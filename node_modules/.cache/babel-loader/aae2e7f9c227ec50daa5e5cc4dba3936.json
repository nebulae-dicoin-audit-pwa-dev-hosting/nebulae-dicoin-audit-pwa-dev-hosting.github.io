{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport { createUserSettingsFirebase, setUserData } from './userSlice';\nexport const submitRegister = _ref => {\n  let {\n    displayName,\n    password,\n    email\n  } = _ref;\n  return async dispatch => {\n    return jwtService.createUser({\n      displayName,\n      password,\n      email\n    }).then(user => {\n      dispatch(setUserData(user));\n      return dispatch(registerSuccess());\n    }).catch(errors => {\n      return dispatch(registerError(errors));\n    });\n  };\n};\nexport const registerWithFirebase = model => async dispatch => {\n  if (!firebaseService.auth) {\n    console.warn(\"Firebase Service didn't initialize, check your configuration\");\n    return () => false;\n  }\n\n  const {\n    email,\n    password,\n    displayName\n  } = model;\n  return firebaseService.auth.createUserWithEmailAndPassword(email, password).then(response => {\n    dispatch(createUserSettingsFirebase({ ...response.user,\n      displayName,\n      email\n    }));\n    return dispatch(registerSuccess());\n  }).catch(error => {\n    const usernameErrorCodes = ['auth/operation-not-allowed', 'auth/user-not-found', 'auth/user-disabled'];\n    const emailErrorCodes = ['auth/email-already-in-use', 'auth/invalid-email'];\n    const passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n    const response = [];\n\n    if (usernameErrorCodes.includes(error.code)) {\n      response.push({\n        type: 'username',\n        message: error.message\n      });\n    }\n\n    if (emailErrorCodes.includes(error.code)) {\n      response.push({\n        type: 'email',\n        message: error.message\n      });\n    }\n\n    if (passwordErrorCodes.includes(error.code)) {\n      response.push({\n        type: 'password',\n        message: error.message\n      });\n    }\n\n    if (error.code === 'auth/invalid-api-key') {\n      dispatch(showMessage({\n        message: error.message\n      }));\n    }\n\n    return dispatch(registerError(response));\n  });\n};\nconst initialState = {\n  success: false,\n  errors: []\n};\nconst registerSlice = createSlice({\n  name: 'auth/register',\n  initialState,\n  reducers: {\n    registerSuccess: (state, action) => {\n      state.success = true;\n      state.errors = [];\n    },\n    registerError: (state, action) => {\n      state.success = false;\n      state.errors = action.payload;\n    }\n  },\n  extraReducers: {}\n});\nexport const {\n  registerSuccess,\n  registerError\n} = registerSlice.actions;\nexport default registerSlice.reducer;","map":{"version":3,"sources":["/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/src/app/auth/store/registerSlice.js"],"names":["createSlice","showMessage","firebaseService","jwtService","createUserSettingsFirebase","setUserData","submitRegister","displayName","password","email","dispatch","createUser","then","user","registerSuccess","catch","errors","registerError","registerWithFirebase","model","auth","console","warn","createUserWithEmailAndPassword","response","error","usernameErrorCodes","emailErrorCodes","passwordErrorCodes","includes","code","push","type","message","initialState","success","registerSlice","name","reducers","state","action","payload","extraReducers","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport { createUserSettingsFirebase, setUserData } from './userSlice';\n\nexport const submitRegister =\n  ({ displayName, password, email }) =>\n  async (dispatch) => {\n    return jwtService\n      .createUser({\n        displayName,\n        password,\n        email,\n      })\n      .then((user) => {\n        dispatch(setUserData(user));\n        return dispatch(registerSuccess());\n      })\n      .catch((errors) => {\n        return dispatch(registerError(errors));\n      });\n  };\n\nexport const registerWithFirebase = (model) => async (dispatch) => {\n  if (!firebaseService.auth) {\n    console.warn(\"Firebase Service didn't initialize, check your configuration\");\n\n    return () => false;\n  }\n  const { email, password, displayName } = model;\n\n  return firebaseService.auth\n    .createUserWithEmailAndPassword(email, password)\n    .then((response) => {\n      dispatch(\n        createUserSettingsFirebase({\n          ...response.user,\n          displayName,\n          email,\n        })\n      );\n\n      return dispatch(registerSuccess());\n    })\n    .catch((error) => {\n      const usernameErrorCodes = [\n        'auth/operation-not-allowed',\n        'auth/user-not-found',\n        'auth/user-disabled',\n      ];\n\n      const emailErrorCodes = ['auth/email-already-in-use', 'auth/invalid-email'];\n\n      const passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n\n      const response = [];\n\n      if (usernameErrorCodes.includes(error.code)) {\n        response.push({\n          type: 'username',\n          message: error.message,\n        });\n      }\n\n      if (emailErrorCodes.includes(error.code)) {\n        response.push({\n          type: 'email',\n          message: error.message,\n        });\n      }\n\n      if (passwordErrorCodes.includes(error.code)) {\n        response.push({\n          type: 'password',\n          message: error.message,\n        });\n      }\n\n      if (error.code === 'auth/invalid-api-key') {\n        dispatch(showMessage({ message: error.message }));\n      }\n\n      return dispatch(registerError(response));\n    });\n};\n\nconst initialState = {\n  success: false,\n  errors: [],\n};\n\nconst registerSlice = createSlice({\n  name: 'auth/register',\n  initialState,\n  reducers: {\n    registerSuccess: (state, action) => {\n      state.success = true;\n      state.errors = [];\n    },\n    registerError: (state, action) => {\n      state.success = false;\n      state.errors = action.payload;\n    },\n  },\n  extraReducers: {},\n});\n\nexport const { registerSuccess, registerError } = registerSlice.actions;\n\nexport default registerSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}