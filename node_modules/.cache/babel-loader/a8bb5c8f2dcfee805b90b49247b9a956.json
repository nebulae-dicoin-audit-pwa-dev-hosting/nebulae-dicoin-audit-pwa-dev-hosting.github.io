{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst lodash_1 = __importDefault(require(\"lodash\"));\n\nconst utils = __importStar(require(\"./utils\"));\n\nconst selector_1 = require(\"./selector\");\n/** Replicates data into a both a master and a replica db. Assumes both are identical at start\n * and then only uses master for finds and does all changes to both\n * Warning: removing a collection removes it from the underlying master and replica!\n */\n\n\nclass ReplicatingDb {\n  constructor(masterDb, replicaDb) {\n    this.collections = {};\n    this.masterDb = masterDb;\n    this.replicaDb = replicaDb;\n  }\n\n  addCollection(name, success, error) {\n    const collection = new Collection(name, this.masterDb[name], this.replicaDb[name]);\n    this[name] = collection;\n    this.collections[name] = collection;\n\n    if (success != null) {\n      return success();\n    }\n  }\n\n  removeCollection(name, success, error) {\n    delete this[name];\n    delete this.collections[name];\n\n    if (success != null) {\n      return success();\n    }\n  }\n\n  getCollectionNames() {\n    return lodash_1.default.keys(this.collections);\n  }\n\n}\n\nexports.default = ReplicatingDb; // Replicated collection.\n\nclass Collection {\n  constructor(name, masterCol, replicaCol) {\n    this.name = name;\n    this.masterCol = masterCol;\n    this.replicaCol = replicaCol;\n  }\n\n  find(selector, options) {\n    return this.masterCol.find(selector, options);\n  }\n\n  findOne(selector, options, success, error) {\n    return this.masterCol.findOne(selector, options, success, error);\n  }\n\n  upsert(docs, bases, success, error) {\n    let items;\n    [items, success, error] = utils.regularizeUpsert(docs, bases, success, error); // Upsert does to both\n\n    return this.masterCol.upsert(lodash_1.default.map(items, \"doc\"), lodash_1.default.map(items, \"base\"), () => {\n      return this.replicaCol.upsert(lodash_1.default.map(items, \"doc\"), lodash_1.default.map(items, \"base\"), results => {\n        return success(docs);\n      }, error);\n    }, error);\n  }\n\n  remove(id, success, error) {\n    // Do to both\n    this.masterCol.remove(id, () => {\n      this.replicaCol.remove(id, success, error);\n    }, error);\n  }\n\n  cache(docs, selector, options, success, error) {\n    // Calculate what has to be done for cache using the master database which is faster (usually MemoryDb)\n    // then do minimum to both databases\n    // Index docs\n    let sort;\n    const docsMap = lodash_1.default.keyBy(docs, \"_id\"); // Compile sort\n\n    if (options.sort) {\n      sort = (0, selector_1.compileSort)(options.sort);\n    } // Perform query\n\n\n    return this.masterCol.find(selector, options).fetch(results => {\n      let result;\n      const resultsMap = lodash_1.default.keyBy(results, \"_id\"); // Determine if each result needs to be cached\n\n      const toCache = [];\n\n      for (let doc of docs) {\n        result = resultsMap[doc._id]; // Exclude any excluded _ids from being cached/uncached\n\n        if (options && options.exclude && options.exclude.includes(doc._id)) {\n          continue;\n        } // If not present locally, cache it\n\n\n        if (!result) {\n          toCache.push(doc);\n          continue;\n        } // If both have revisions (_rev) and new one is same or lower, do not cache\n\n\n        if (doc._rev && result._rev && doc._rev <= result._rev) {\n          continue;\n        } // Only cache if different\n\n\n        if (!lodash_1.default.isEqual(doc, result)) {\n          toCache.push(doc);\n        }\n      }\n\n      const toUncache = [];\n\n      for (result of results) {\n        // If at limit\n        if (options.limit && docs.length === options.limit) {\n          // If past end on sorted limited, ignore\n          if (options.sort && sort(result, lodash_1.default.last(docs)) >= 0) {\n            continue;\n          } // If no sort, ignore\n\n\n          if (!options.sort) {\n            continue;\n          }\n        } // Exclude any excluded _ids from being cached/uncached\n\n\n        if (options && options.exclude && options.exclude.includes(result._id)) {\n          continue;\n        } // Determine which ones to uncache\n\n\n        if (!docsMap[result._id]) {\n          toUncache.push(result._id);\n        }\n      } // Cache ones needing caching\n\n\n      const performCaches = next => {\n        if (toCache.length > 0) {\n          return this.masterCol.cacheList(toCache, () => {\n            return this.replicaCol.cacheList(toCache, () => {\n              return next();\n            }, error);\n          }, error);\n        } else {\n          return next();\n        }\n      }; // Uncache list\n\n\n      const performUncaches = next => {\n        if (toUncache.length > 0) {\n          return this.masterCol.uncacheList(toUncache, () => {\n            return this.replicaCol.uncacheList(toUncache, () => {\n              return next();\n            }, error);\n          }, error);\n        } else {\n          return next();\n        }\n      };\n\n      return performCaches(() => {\n        return performUncaches(() => {\n          if (success != null) {\n            success();\n          }\n        });\n      });\n    }, error);\n  }\n\n  pendingUpserts(success, error) {\n    return this.masterCol.pendingUpserts(success, error);\n  }\n\n  pendingRemoves(success, error) {\n    return this.masterCol.pendingRemoves(success, error);\n  }\n\n  resolveUpserts(upserts, success, error) {\n    return this.masterCol.resolveUpserts(upserts, () => {\n      return this.replicaCol.resolveUpserts(upserts, success, error);\n    }, error);\n  }\n\n  resolveRemove(id, success, error) {\n    return this.masterCol.resolveRemove(id, () => {\n      return this.replicaCol.resolveRemove(id, success, error);\n    }, error);\n  } // Add but do not overwrite or record as upsert\n\n\n  seed(docs, success, error) {\n    return this.masterCol.seed(docs, () => {\n      return this.replicaCol.seed(docs, success, error);\n    }, error);\n  } // Add but do not overwrite upserts or removes\n\n\n  cacheOne(doc, success, error) {\n    return this.masterCol.cacheOne(doc, () => {\n      return this.replicaCol.cacheOne(doc, success, error);\n    }, error);\n  } // Add but do not overwrite upserts or removes\n\n\n  cacheList(docs, success, error) {\n    return this.masterCol.cacheList(docs, () => {\n      return this.replicaCol.cacheList(docs, success, error);\n    }, error);\n  }\n\n  uncache(selector, success, error) {\n    return this.masterCol.uncache(selector, () => {\n      return this.replicaCol.uncache(selector, success, error);\n    }, error);\n  }\n\n  uncacheList(ids, success, error) {\n    return this.masterCol.uncacheList(ids, () => {\n      return this.replicaCol.uncacheList(ids, success, error);\n    }, error);\n  }\n\n}","map":{"version":3,"sources":["/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/node_modules/minimongo/lib/ReplicatingDb.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","__importDefault","exports","lodash_1","require","utils","selector_1","ReplicatingDb","constructor","masterDb","replicaDb","collections","addCollection","name","success","error","collection","Collection","removeCollection","getCollectionNames","default","keys","masterCol","replicaCol","find","selector","options","findOne","upsert","docs","bases","items","regularizeUpsert","map","results","remove","id","cache","sort","docsMap","keyBy","compileSort","fetch","resultsMap","toCache","doc","_id","exclude","includes","push","_rev","isEqual","toUncache","limit","length","last","performCaches","next","cacheList","performUncaches","uncacheList","pendingUpserts","pendingRemoves","resolveUpserts","upserts","resolveRemove","seed","cacheOne","uncache","ids"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lodash_1 = __importDefault(require(\"lodash\"));\nconst utils = __importStar(require(\"./utils\"));\nconst selector_1 = require(\"./selector\");\n/** Replicates data into a both a master and a replica db. Assumes both are identical at start\n * and then only uses master for finds and does all changes to both\n * Warning: removing a collection removes it from the underlying master and replica!\n */\nclass ReplicatingDb {\n    constructor(masterDb, replicaDb) {\n        this.collections = {};\n        this.masterDb = masterDb;\n        this.replicaDb = replicaDb;\n    }\n    addCollection(name, success, error) {\n        const collection = new Collection(name, this.masterDb[name], this.replicaDb[name]);\n        this[name] = collection;\n        this.collections[name] = collection;\n        if (success != null) {\n            return success();\n        }\n    }\n    removeCollection(name, success, error) {\n        delete this[name];\n        delete this.collections[name];\n        if (success != null) {\n            return success();\n        }\n    }\n    getCollectionNames() {\n        return lodash_1.default.keys(this.collections);\n    }\n}\nexports.default = ReplicatingDb;\n// Replicated collection.\nclass Collection {\n    constructor(name, masterCol, replicaCol) {\n        this.name = name;\n        this.masterCol = masterCol;\n        this.replicaCol = replicaCol;\n    }\n    find(selector, options) {\n        return this.masterCol.find(selector, options);\n    }\n    findOne(selector, options, success, error) {\n        return this.masterCol.findOne(selector, options, success, error);\n    }\n    upsert(docs, bases, success, error) {\n        let items;\n        [items, success, error] = utils.regularizeUpsert(docs, bases, success, error);\n        // Upsert does to both\n        return this.masterCol.upsert(lodash_1.default.map(items, \"doc\"), lodash_1.default.map(items, \"base\"), () => {\n            return this.replicaCol.upsert(lodash_1.default.map(items, \"doc\"), lodash_1.default.map(items, \"base\"), (results) => {\n                return success(docs);\n            }, error);\n        }, error);\n    }\n    remove(id, success, error) {\n        // Do to both\n        this.masterCol.remove(id, () => {\n            this.replicaCol.remove(id, success, error);\n        }, error);\n    }\n    cache(docs, selector, options, success, error) {\n        // Calculate what has to be done for cache using the master database which is faster (usually MemoryDb)\n        // then do minimum to both databases\n        // Index docs\n        let sort;\n        const docsMap = lodash_1.default.keyBy(docs, \"_id\");\n        // Compile sort\n        if (options.sort) {\n            sort = (0, selector_1.compileSort)(options.sort);\n        }\n        // Perform query\n        return this.masterCol.find(selector, options).fetch((results) => {\n            let result;\n            const resultsMap = lodash_1.default.keyBy(results, \"_id\");\n            // Determine if each result needs to be cached\n            const toCache = [];\n            for (let doc of docs) {\n                result = resultsMap[doc._id];\n                // Exclude any excluded _ids from being cached/uncached\n                if (options && options.exclude && options.exclude.includes(doc._id)) {\n                    continue;\n                }\n                // If not present locally, cache it\n                if (!result) {\n                    toCache.push(doc);\n                    continue;\n                }\n                // If both have revisions (_rev) and new one is same or lower, do not cache\n                if (doc._rev && result._rev && doc._rev <= result._rev) {\n                    continue;\n                }\n                // Only cache if different\n                if (!lodash_1.default.isEqual(doc, result)) {\n                    toCache.push(doc);\n                }\n            }\n            const toUncache = [];\n            for (result of results) {\n                // If at limit\n                if (options.limit && docs.length === options.limit) {\n                    // If past end on sorted limited, ignore\n                    if (options.sort && sort(result, lodash_1.default.last(docs)) >= 0) {\n                        continue;\n                    }\n                    // If no sort, ignore\n                    if (!options.sort) {\n                        continue;\n                    }\n                }\n                // Exclude any excluded _ids from being cached/uncached\n                if (options && options.exclude && options.exclude.includes(result._id)) {\n                    continue;\n                }\n                // Determine which ones to uncache\n                if (!docsMap[result._id]) {\n                    toUncache.push(result._id);\n                }\n            }\n            // Cache ones needing caching\n            const performCaches = (next) => {\n                if (toCache.length > 0) {\n                    return this.masterCol.cacheList(toCache, () => {\n                        return this.replicaCol.cacheList(toCache, () => {\n                            return next();\n                        }, error);\n                    }, error);\n                }\n                else {\n                    return next();\n                }\n            };\n            // Uncache list\n            const performUncaches = (next) => {\n                if (toUncache.length > 0) {\n                    return this.masterCol.uncacheList(toUncache, () => {\n                        return this.replicaCol.uncacheList(toUncache, () => {\n                            return next();\n                        }, error);\n                    }, error);\n                }\n                else {\n                    return next();\n                }\n            };\n            return performCaches(() => {\n                return performUncaches(() => {\n                    if (success != null) {\n                        success();\n                    }\n                });\n            });\n        }, error);\n    }\n    pendingUpserts(success, error) {\n        return this.masterCol.pendingUpserts(success, error);\n    }\n    pendingRemoves(success, error) {\n        return this.masterCol.pendingRemoves(success, error);\n    }\n    resolveUpserts(upserts, success, error) {\n        return this.masterCol.resolveUpserts(upserts, () => {\n            return this.replicaCol.resolveUpserts(upserts, success, error);\n        }, error);\n    }\n    resolveRemove(id, success, error) {\n        return this.masterCol.resolveRemove(id, () => {\n            return this.replicaCol.resolveRemove(id, success, error);\n        }, error);\n    }\n    // Add but do not overwrite or record as upsert\n    seed(docs, success, error) {\n        return this.masterCol.seed(docs, () => {\n            return this.replicaCol.seed(docs, success, error);\n        }, error);\n    }\n    // Add but do not overwrite upserts or removes\n    cacheOne(doc, success, error) {\n        return this.masterCol.cacheOne(doc, () => {\n            return this.replicaCol.cacheOne(doc, success, error);\n        }, error);\n    }\n    // Add but do not overwrite upserts or removes\n    cacheList(docs, success, error) {\n        return this.masterCol.cacheList(docs, () => {\n            return this.replicaCol.cacheList(docs, success, error);\n        }, error);\n    }\n    uncache(selector, success, error) {\n        return this.masterCol.uncache(selector, () => {\n            return this.replicaCol.uncache(selector, success, error);\n        }, error);\n    }\n    uncacheList(ids, success, error) {\n        return this.masterCol.uncacheList(ids, () => {\n            return this.replicaCol.uncacheList(ids, success, error);\n        }, error);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}