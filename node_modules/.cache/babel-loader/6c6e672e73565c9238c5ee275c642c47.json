{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar PropTypes = require(\"prop-types\");\n\nvar classnames_1 = require(\"classnames\");\n\nvar compute_lines_1 = require(\"./compute-lines\");\n\nexports.DiffMethod = compute_lines_1.DiffMethod;\n\nvar styles_1 = require(\"./styles\"); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nvar m = require('memoize-one');\n\nvar memoize = m.default || m;\nvar LineNumberPrefix;\n\n(function (LineNumberPrefix) {\n  LineNumberPrefix[\"LEFT\"] = \"L\";\n  LineNumberPrefix[\"RIGHT\"] = \"R\";\n})(LineNumberPrefix = exports.LineNumberPrefix || (exports.LineNumberPrefix = {}));\n\nvar DiffViewer =\n/** @class */\nfunction (_super) {\n  __extends(DiffViewer, _super);\n\n  function DiffViewer(props) {\n    var _this = _super.call(this, props) || this;\n    /**\n     * Resets code block expand to the initial stage. Will be exposed to the parent component via\n     * refs.\n     */\n\n\n    _this.resetCodeBlocks = function () {\n      if (_this.state.expandedBlocks.length > 0) {\n        _this.setState({\n          expandedBlocks: []\n        });\n\n        return true;\n      }\n\n      return false;\n    };\n    /**\n     * Pushes the target expanded code block to the state. During the re-render,\n     * this value is used to expand/fold unmodified code.\n     */\n\n\n    _this.onBlockExpand = function (id) {\n      var prevState = _this.state.expandedBlocks.slice();\n\n      prevState.push(id);\n\n      _this.setState({\n        expandedBlocks: prevState\n      });\n    };\n    /**\n     * Computes final styles for the diff viewer. It combines the default styles with the user\n     * supplied overrides. The computed styles are cached with performance in mind.\n     *\n     * @param styles User supplied style overrides.\n     */\n\n\n    _this.computeStyles = memoize(styles_1.default);\n    /**\n     * Returns a function with clicked line number in the closure. Returns an no-op function when no\n     * onLineNumberClick handler is supplied.\n     *\n     * @param id Line id of a line.\n     */\n\n    _this.onLineNumberClickProxy = function (id) {\n      if (_this.props.onLineNumberClick) {\n        return function (e) {\n          return _this.props.onLineNumberClick(id, e);\n        };\n      }\n\n      return function () {};\n    };\n    /**\n     * Maps over the word diff and constructs the required React elements to show word diff.\n     *\n     * @param diffArray Word diff information derived from line information.\n     * @param renderer Optional renderer to format diff words. Useful for syntax highlighting.\n     */\n\n\n    _this.renderWordDiff = function (diffArray, renderer) {\n      return diffArray.map(function (wordDiff, i) {\n        var _a;\n\n        return React.createElement(\"span\", {\n          key: i,\n          className: classnames_1.default(_this.styles.wordDiff, (_a = {}, _a[_this.styles.wordAdded] = wordDiff.type === compute_lines_1.DiffType.ADDED, _a[_this.styles.wordRemoved] = wordDiff.type === compute_lines_1.DiffType.REMOVED, _a))\n        }, renderer ? renderer(wordDiff.value) : wordDiff.value);\n      });\n    };\n    /**\n     * Maps over the line diff and constructs the required react elements to show line diff. It calls\n     * renderWordDiff when encountering word diff. This takes care of both inline and split view line\n     * renders.\n     *\n     * @param lineNumber Line number of the current line.\n     * @param type Type of diff of the current line.\n     * @param prefix Unique id to prefix with the line numbers.\n     * @param value Content of the line. It can be a string or a word diff array.\n     * @param additionalLineNumber Additional line number to be shown. Useful for rendering inline\n     *  diff view. Right line number will be passed as additionalLineNumber.\n     * @param additionalPrefix Similar to prefix but for additional line number.\n     */\n\n\n    _this.renderLine = function (lineNumber, type, prefix, value, additionalLineNumber, additionalPrefix) {\n      var _a, _b, _c, _d;\n\n      var lineNumberTemplate = prefix + \"-\" + lineNumber;\n      var additionalLineNumberTemplate = additionalPrefix + \"-\" + additionalLineNumber;\n\n      var highlightLine = _this.props.highlightLines.includes(lineNumberTemplate) || _this.props.highlightLines.includes(additionalLineNumberTemplate);\n\n      var added = type === compute_lines_1.DiffType.ADDED;\n      var removed = type === compute_lines_1.DiffType.REMOVED;\n      var content;\n\n      if (Array.isArray(value)) {\n        content = _this.renderWordDiff(value, _this.props.renderContent);\n      } else if (_this.props.renderContent) {\n        content = _this.props.renderContent(value);\n      } else {\n        content = value;\n      }\n\n      return React.createElement(React.Fragment, null, !_this.props.hideLineNumbers && React.createElement(\"td\", {\n        onClick: lineNumber && _this.onLineNumberClickProxy(lineNumberTemplate),\n        className: classnames_1.default(_this.styles.gutter, (_a = {}, _a[_this.styles.emptyGutter] = !lineNumber, _a[_this.styles.diffAdded] = added, _a[_this.styles.diffRemoved] = removed, _a[_this.styles.highlightedGutter] = highlightLine, _a))\n      }, React.createElement(\"pre\", {\n        className: _this.styles.lineNumber\n      }, lineNumber)), !_this.props.splitView && !_this.props.hideLineNumbers && React.createElement(\"td\", {\n        onClick: additionalLineNumber && _this.onLineNumberClickProxy(additionalLineNumberTemplate),\n        className: classnames_1.default(_this.styles.gutter, (_b = {}, _b[_this.styles.emptyGutter] = !additionalLineNumber, _b[_this.styles.diffAdded] = added, _b[_this.styles.diffRemoved] = removed, _b[_this.styles.highlightedGutter] = highlightLine, _b))\n      }, React.createElement(\"pre\", {\n        className: _this.styles.lineNumber\n      }, additionalLineNumber)), React.createElement(\"td\", {\n        className: classnames_1.default(_this.styles.marker, (_c = {}, _c[_this.styles.emptyLine] = !content, _c[_this.styles.diffAdded] = added, _c[_this.styles.diffRemoved] = removed, _c[_this.styles.highlightedLine] = highlightLine, _c))\n      }, React.createElement(\"pre\", null, added && '+', removed && '-')), React.createElement(\"td\", {\n        className: classnames_1.default(_this.styles.content, (_d = {}, _d[_this.styles.emptyLine] = !content, _d[_this.styles.diffAdded] = added, _d[_this.styles.diffRemoved] = removed, _d[_this.styles.highlightedLine] = highlightLine, _d))\n      }, React.createElement(\"pre\", {\n        className: _this.styles.contentText\n      }, content)));\n    };\n    /**\n     * Generates lines for split view.\n     *\n     * @param obj Line diff information.\n     * @param obj.left Life diff information for the left pane of the split view.\n     * @param obj.right Life diff information for the right pane of the split view.\n     * @param index React key for the lines.\n     */\n\n\n    _this.renderSplitView = function (_a, index) {\n      var left = _a.left,\n          right = _a.right;\n      return React.createElement(\"tr\", {\n        key: index,\n        className: _this.styles.line\n      }, _this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value), _this.renderLine(right.lineNumber, right.type, LineNumberPrefix.RIGHT, right.value));\n    };\n    /**\n     * Generates lines for inline view.\n     *\n     * @param obj Line diff information.\n     * @param obj.left Life diff information for the added section of the inline view.\n     * @param obj.right Life diff information for the removed section of the inline view.\n     * @param index React key for the lines.\n     */\n\n\n    _this.renderInlineView = function (_a, index) {\n      var left = _a.left,\n          right = _a.right;\n      var content;\n\n      if (left.type === compute_lines_1.DiffType.REMOVED && right.type === compute_lines_1.DiffType.ADDED) {\n        return React.createElement(React.Fragment, {\n          key: index\n        }, React.createElement(\"tr\", {\n          className: _this.styles.line\n        }, _this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, null)), React.createElement(\"tr\", {\n          className: _this.styles.line\n        }, _this.renderLine(null, right.type, LineNumberPrefix.RIGHT, right.value, right.lineNumber)));\n      }\n\n      if (left.type === compute_lines_1.DiffType.REMOVED) {\n        content = _this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, null);\n      }\n\n      if (left.type === compute_lines_1.DiffType.DEFAULT) {\n        content = _this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, right.lineNumber, LineNumberPrefix.RIGHT);\n      }\n\n      if (right.type === compute_lines_1.DiffType.ADDED) {\n        content = _this.renderLine(null, right.type, LineNumberPrefix.RIGHT, right.value, right.lineNumber);\n      }\n\n      return React.createElement(\"tr\", {\n        key: index,\n        className: _this.styles.line\n      }, content);\n    };\n    /**\n     * Returns a function with clicked block number in the closure.\n     *\n     * @param id Cold fold block id.\n     */\n\n\n    _this.onBlockClickProxy = function (id) {\n      return function () {\n        return _this.onBlockExpand(id);\n      };\n    };\n    /**\n     * Generates cold fold block. It also uses the custom message renderer when available to show\n     * cold fold messages.\n     *\n     * @param num Number of skipped lines between two blocks.\n     * @param blockNumber Code fold block id.\n     * @param leftBlockLineNumber First left line number after the current code fold block.\n     * @param rightBlockLineNumber First right line number after the current code fold block.\n     */\n\n\n    _this.renderSkippedLineIndicator = function (num, blockNumber, leftBlockLineNumber, rightBlockLineNumber) {\n      var _a;\n\n      var _b = _this.props,\n          hideLineNumbers = _b.hideLineNumbers,\n          splitView = _b.splitView;\n      var message = _this.props.codeFoldMessageRenderer ? _this.props.codeFoldMessageRenderer(num, leftBlockLineNumber, rightBlockLineNumber) : React.createElement(\"pre\", {\n        className: _this.styles.codeFoldContent\n      }, \"Expand \", num, \" lines ...\");\n      var content = React.createElement(\"td\", null, React.createElement(\"a\", {\n        onClick: _this.onBlockClickProxy(blockNumber),\n        tabIndex: 0\n      }, message));\n      var isUnifiedViewWithoutLineNumbers = !splitView && !hideLineNumbers;\n      return React.createElement(\"tr\", {\n        key: leftBlockLineNumber + \"-\" + rightBlockLineNumber,\n        className: _this.styles.codeFold\n      }, !hideLineNumbers && React.createElement(\"td\", {\n        className: _this.styles.codeFoldGutter\n      }), React.createElement(\"td\", {\n        className: classnames_1.default((_a = {}, _a[_this.styles.codeFoldGutter] = isUnifiedViewWithoutLineNumbers, _a))\n      }), isUnifiedViewWithoutLineNumbers ? React.createElement(React.Fragment, null, React.createElement(\"td\", null), content) : React.createElement(React.Fragment, null, content, React.createElement(\"td\", null)), React.createElement(\"td\", null), React.createElement(\"td\", null));\n    };\n    /**\n     * Generates the entire diff view.\n     */\n\n\n    _this.renderDiff = function () {\n      var _a = _this.props,\n          oldValue = _a.oldValue,\n          newValue = _a.newValue,\n          splitView = _a.splitView,\n          disableWordDiff = _a.disableWordDiff,\n          compareMethod = _a.compareMethod,\n          linesOffset = _a.linesOffset;\n\n      var _b = compute_lines_1.computeLineInformation(oldValue, newValue, disableWordDiff, compareMethod, linesOffset),\n          lineInformation = _b.lineInformation,\n          diffLines = _b.diffLines;\n\n      var extraLines = _this.props.extraLinesSurroundingDiff < 0 ? 0 : _this.props.extraLinesSurroundingDiff;\n      var skippedLines = [];\n      return lineInformation.map(function (line, i) {\n        var diffBlockStart = diffLines[0];\n        var currentPosition = diffBlockStart - i;\n\n        if (_this.props.showDiffOnly) {\n          if (currentPosition === -extraLines) {\n            skippedLines = [];\n            diffLines.shift();\n          }\n\n          if (line.left.type === compute_lines_1.DiffType.DEFAULT && (currentPosition > extraLines || typeof diffBlockStart === 'undefined') && !_this.state.expandedBlocks.includes(diffBlockStart)) {\n            skippedLines.push(i + 1);\n\n            if (i === lineInformation.length - 1 && skippedLines.length > 1) {\n              return _this.renderSkippedLineIndicator(skippedLines.length, diffBlockStart, line.left.lineNumber, line.right.lineNumber);\n            }\n\n            return null;\n          }\n        }\n\n        var diffNodes = splitView ? _this.renderSplitView(line, i) : _this.renderInlineView(line, i);\n\n        if (currentPosition === extraLines && skippedLines.length > 0) {\n          var length_1 = skippedLines.length;\n          skippedLines = [];\n          return React.createElement(React.Fragment, {\n            key: i\n          }, _this.renderSkippedLineIndicator(length_1, diffBlockStart, line.left.lineNumber, line.right.lineNumber), diffNodes);\n        }\n\n        return diffNodes;\n      });\n    };\n\n    _this.render = function () {\n      var _a;\n\n      var _b = _this.props,\n          oldValue = _b.oldValue,\n          newValue = _b.newValue,\n          useDarkTheme = _b.useDarkTheme,\n          leftTitle = _b.leftTitle,\n          rightTitle = _b.rightTitle,\n          splitView = _b.splitView,\n          hideLineNumbers = _b.hideLineNumbers;\n\n      if (typeof oldValue !== 'string' || typeof newValue !== 'string') {\n        throw Error('\"oldValue\" and \"newValue\" should be strings');\n      }\n\n      _this.styles = _this.computeStyles(_this.props.styles, useDarkTheme);\n\n      var nodes = _this.renderDiff();\n\n      var colSpanOnSplitView = hideLineNumbers ? 2 : 3;\n      var colSpanOnInlineView = hideLineNumbers ? 2 : 4;\n      var title = (leftTitle || rightTitle) && React.createElement(\"tr\", null, React.createElement(\"td\", {\n        colSpan: splitView ? colSpanOnSplitView : colSpanOnInlineView,\n        className: _this.styles.titleBlock\n      }, React.createElement(\"pre\", {\n        className: _this.styles.contentText\n      }, leftTitle)), splitView && React.createElement(\"td\", {\n        colSpan: colSpanOnSplitView,\n        className: _this.styles.titleBlock\n      }, React.createElement(\"pre\", {\n        className: _this.styles.contentText\n      }, rightTitle)));\n      return React.createElement(\"table\", {\n        className: classnames_1.default(_this.styles.diffContainer, (_a = {}, _a[_this.styles.splitView] = splitView, _a))\n      }, React.createElement(\"tbody\", null, title, nodes));\n    };\n\n    _this.state = {\n      expandedBlocks: []\n    };\n    return _this;\n  }\n\n  DiffViewer.defaultProps = {\n    oldValue: '',\n    newValue: '',\n    splitView: true,\n    highlightLines: [],\n    disableWordDiff: false,\n    compareMethod: compute_lines_1.DiffMethod.CHARS,\n    styles: {},\n    hideLineNumbers: false,\n    extraLinesSurroundingDiff: 3,\n    showDiffOnly: true,\n    useDarkTheme: false,\n    linesOffset: 0\n  };\n  DiffViewer.propTypes = {\n    oldValue: PropTypes.string.isRequired,\n    newValue: PropTypes.string.isRequired,\n    splitView: PropTypes.bool,\n    disableWordDiff: PropTypes.bool,\n    compareMethod: PropTypes.oneOf(Object.values(compute_lines_1.DiffMethod)),\n    renderContent: PropTypes.func,\n    onLineNumberClick: PropTypes.func,\n    extraLinesSurroundingDiff: PropTypes.number,\n    styles: PropTypes.object,\n    hideLineNumbers: PropTypes.bool,\n    showDiffOnly: PropTypes.bool,\n    highlightLines: PropTypes.arrayOf(PropTypes.string),\n    leftTitle: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    rightTitle: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    linesOffset: PropTypes.number\n  };\n  return DiffViewer;\n}(React.Component);\n\nexports.default = DiffViewer;","map":null,"metadata":{},"sourceType":"script"}