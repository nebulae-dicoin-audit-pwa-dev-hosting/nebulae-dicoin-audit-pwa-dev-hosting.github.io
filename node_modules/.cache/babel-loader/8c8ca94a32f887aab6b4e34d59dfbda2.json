{"ast":null,"code":"import { useRef, useEffect } from 'react';\n/**\n * https://usehooks.com/useEventListener/\n */\n\nfunction useEventListener(eventName, handler) {\n  let element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window;\n  // Create a ref that stores handler\n  const savedHandler = useRef(); // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(() => {\n    // Make sure element supports addEventListener\n    // On\n    const isSupported = element && element.addEventListener;\n\n    if (!isSupported) {\n      return false;\n    } // Create event listener that calls handler function stored in ref\n\n\n    const eventListener = event => savedHandler.current(event); // Add event listener\n\n\n    element.addEventListener(eventName, eventListener); // Remove event listener on cleanup\n\n    return () => {\n      element.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element] // Re-run if eventName or element changes\n  );\n}\n\nexport default useEventListener;","map":{"version":3,"sources":["/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/src/@fuse/hooks/useEventListener.js"],"names":["useRef","useEffect","useEventListener","eventName","handler","element","window","savedHandler","current","isSupported","addEventListener","eventListener","event","removeEventListener"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AAEA;AACA;AACA;;AACA,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,OAArC,EAAgE;AAAA,MAAlBC,OAAkB,uEAARC,MAAQ;AAC9D;AACA,QAAMC,YAAY,GAAGP,MAAM,EAA3B,CAF8D,CAI9D;AACA;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,YAAY,CAACC,OAAb,GAAuBJ,OAAvB;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIAH,EAAAA,SAAS,CACP,MAAM;AACJ;AACA;AACA,UAAMQ,WAAW,GAAGJ,OAAO,IAAIA,OAAO,CAACK,gBAAvC;;AACA,QAAI,CAACD,WAAL,EAAkB;AAChB,aAAO,KAAP;AACD,KANG,CAQJ;;;AACA,UAAME,aAAa,GAAIC,KAAD,IAAWL,YAAY,CAACC,OAAb,CAAqBI,KAArB,CAAjC,CATI,CAWJ;;;AACAP,IAAAA,OAAO,CAACK,gBAAR,CAAyBP,SAAzB,EAAoCQ,aAApC,EAZI,CAcJ;;AACA,WAAO,MAAM;AACXN,MAAAA,OAAO,CAACQ,mBAAR,CAA4BV,SAA5B,EAAuCQ,aAAvC;AACD,KAFD;AAGD,GAnBM,EAoBP,CAACR,SAAD,EAAYE,OAAZ,CApBO,CAoBc;AApBd,GAAT;AAsBD;;AAED,eAAeH,gBAAf","sourcesContent":["import { useRef, useEffect } from 'react';\n\n/**\n * https://usehooks.com/useEventListener/\n */\nfunction useEventListener(eventName, handler, element = window) {\n  // Create a ref that stores handler\n  const savedHandler = useRef();\n\n  // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(\n    () => {\n      // Make sure element supports addEventListener\n      // On\n      const isSupported = element && element.addEventListener;\n      if (!isSupported) {\n        return false;\n      }\n\n      // Create event listener that calls handler function stored in ref\n      const eventListener = (event) => savedHandler.current(event);\n\n      // Add event listener\n      element.addEventListener(eventName, eventListener);\n\n      // Remove event listener on cleanup\n      return () => {\n        element.removeEventListener(eventName, eventListener);\n      };\n    },\n    [eventName, element] // Re-run if eventName or element changes\n  );\n}\n\nexport default useEventListener;\n"]},"metadata":{},"sourceType":"module"}