{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst lodash_1 = __importDefault(require(\"lodash\"));\n\nconst async_1 = __importDefault(require(\"async\"));\n\nconst utils = __importStar(require(\"./utils\"));\n\nconst utils_1 = require(\"./utils\");\n\nconst selector_1 = require(\"./selector\");\n\nclass LocalStorageDb {\n  constructor(options, success, error) {\n    this.collections = {};\n\n    if (options && options.namespace && window.localStorage) {\n      this.namespace = options.namespace;\n    }\n\n    if (success) {\n      success(this);\n    }\n  }\n\n  addCollection(name, success, error) {\n    // Set namespace for collection\n    let namespace;\n\n    if (this.namespace) {\n      namespace = this.namespace + \".\" + name;\n    }\n\n    const collection = new Collection(name, namespace);\n    this[name] = collection;\n    this.collections[name] = collection;\n\n    if (success != null) {\n      return success();\n    }\n  }\n\n  removeCollection(name, success, error) {\n    if (this.namespace && window.localStorage) {\n      const keys = [];\n\n      for (let i = 0, end = window.localStorage.length, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n        keys.push(window.localStorage.key(i));\n      }\n\n      for (let key of keys) {\n        const keyToMatch = this.namespace + \".\" + name;\n\n        if (key.substring(0, keyToMatch.length) === keyToMatch) {\n          window.localStorage.removeItem(key);\n        }\n      }\n    }\n\n    delete this[name];\n    delete this.collections[name];\n\n    if (success != null) {\n      return success();\n    }\n  }\n\n  getCollectionNames() {\n    return lodash_1.default.keys(this.collections);\n  }\n\n}\n\nexports.default = LocalStorageDb; // Stores data in memory, optionally backed by local storage\n\nclass Collection {\n  constructor(name, namespace) {\n    this.name = name;\n    this.namespace = namespace;\n    this.items = {};\n    this.upserts = {}; // Pending upserts by _id. Still in items\n\n    this.removes = {}; // Pending removes by _id. No longer in items\n    // Read from local storage\n\n    if (window.localStorage && namespace != null) {\n      this.loadStorage();\n    }\n  }\n\n  loadStorage() {\n    // Read items from localStorage\n    let key;\n    this.itemNamespace = this.namespace + \"_\";\n\n    for (let i = 0, end = window.localStorage.length, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n      key = window.localStorage.key(i);\n\n      if (key.substring(0, this.itemNamespace.length) === this.itemNamespace) {\n        const item = JSON.parse(window.localStorage[key]);\n        this.items[item._id] = item;\n      }\n    } // Read upserts\n\n\n    const upsertKeys = window.localStorage[this.namespace + \"upserts\"] ? JSON.parse(window.localStorage[this.namespace + \"upserts\"]) : [];\n\n    for (key of upsertKeys) {\n      this.upserts[key] = {\n        doc: this.items[key]\n      }; // Get base if present\n\n      const base = window.localStorage[this.namespace + \"upsertbase_\" + key] ? JSON.parse(window.localStorage[this.namespace + \"upsertbase_\" + key]) : null;\n      this.upserts[key].base = base;\n    } // Read removes\n\n\n    const removeItems = window.localStorage[this.namespace + \"removes\"] ? JSON.parse(window.localStorage[this.namespace + \"removes\"]) : [];\n    return this.removes = lodash_1.default.fromPairs(lodash_1.default.zip(lodash_1.default.map(removeItems, \"_id\"), removeItems));\n  }\n\n  find(selector, options) {\n    return {\n      fetch: (success, error) => {\n        return this._findFetch(selector, options, success, error);\n      }\n    };\n  }\n\n  findOne(selector, options, success, error) {\n    if (lodash_1.default.isFunction(options)) {\n      ;\n      [options, success, error] = [{}, options, success];\n    }\n\n    return this.find(selector, options).fetch(function (results) {\n      if (success != null) {\n        return success(results.length > 0 ? results[0] : null);\n      }\n    }, error);\n  }\n\n  _findFetch(selector, options, success, error) {\n    // Deep clone to prevent modification\n    if (success != null) {\n      return success((0, utils_1.processFind)(lodash_1.default.cloneDeep(lodash_1.default.values(this.items)), selector, options));\n    }\n  }\n\n  upsert(docs, bases, success, error) {\n    let items;\n    [items, success, error] = utils.regularizeUpsert(docs, bases, success, error); // Keep independent copies to prevent modification\n\n    items = JSON.parse(JSON.stringify(items));\n\n    for (let item of items) {\n      // Fill in base\n      if (item.base === undefined) {\n        // Use existing base\n        if (this.upserts[item.doc._id]) {\n          item.base = this.upserts[item.doc._id].base;\n        } else {\n          item.base = this.items[item.doc._id] || null;\n        }\n      } // Keep independent copies\n\n\n      item = lodash_1.default.cloneDeep(item); // Replace/add\n\n      this._putItem(item.doc);\n\n      this._putUpsert(item);\n    }\n\n    if (success) {\n      return success(docs);\n    }\n  }\n\n  remove(id, success, error) {\n    // Special case for filter-type remove\n    if (lodash_1.default.isObject(id)) {\n      this.find(id).fetch(rows => {\n        return async_1.default.each(rows, (row, cb) => {\n          return this.remove(row._id, () => cb(), cb);\n        }, () => success());\n      }, error);\n      return;\n    }\n\n    if (lodash_1.default.has(this.items, id)) {\n      this._putRemove(this.items[id]);\n\n      this._deleteItem(id);\n\n      this._deleteUpsert(id);\n    } else {\n      this._putRemove({\n        _id: id\n      });\n    }\n\n    if (success != null) {\n      return success();\n    }\n  }\n\n  _putItem(doc) {\n    this.items[doc._id] = doc;\n\n    if (this.namespace) {\n      window.localStorage[this.itemNamespace + doc._id] = JSON.stringify(doc);\n    }\n  }\n\n  _deleteItem(id) {\n    delete this.items[id];\n\n    if (this.namespace) {\n      window.localStorage.removeItem(this.itemNamespace + id);\n    }\n  }\n\n  _putUpsert(upsert) {\n    this.upserts[upsert.doc._id] = upsert;\n\n    if (this.namespace) {\n      window.localStorage[this.namespace + \"upserts\"] = JSON.stringify(lodash_1.default.keys(this.upserts));\n      window.localStorage[this.namespace + \"upsertbase_\" + upsert.doc._id] = JSON.stringify(upsert.base);\n    }\n  }\n\n  _deleteUpsert(id) {\n    delete this.upserts[id];\n\n    if (this.namespace) {\n      window.localStorage[this.namespace + \"upserts\"] = JSON.stringify(lodash_1.default.keys(this.upserts));\n    }\n  }\n\n  _putRemove(doc) {\n    this.removes[doc._id] = doc;\n\n    if (this.namespace) {\n      window.localStorage[this.namespace + \"removes\"] = JSON.stringify(lodash_1.default.values(this.removes));\n    }\n  }\n\n  _deleteRemove(id) {\n    delete this.removes[id];\n\n    if (this.namespace) {\n      window.localStorage[this.namespace + \"removes\"] = JSON.stringify(lodash_1.default.values(this.removes));\n    }\n  }\n\n  cache(docs, selector, options, success, error) {\n    // Add all non-local that are not upserted or removed\n    let sort;\n\n    for (let doc of docs) {\n      // Exclude any excluded _ids from being cached/uncached\n      if (options && options.exclude && options.exclude.includes(doc._id)) {\n        continue;\n      }\n\n      this.cacheOne(doc, () => {}, () => {});\n    }\n\n    const docsMap = lodash_1.default.fromPairs(lodash_1.default.zip(lodash_1.default.map(docs, \"_id\"), docs));\n\n    if (options.sort) {\n      sort = (0, selector_1.compileSort)(options.sort);\n    } // Perform query, removing rows missing in docs from local db\n\n\n    return this.find(selector, options).fetch(results => {\n      for (let result of results) {\n        if (!docsMap[result._id] && !lodash_1.default.has(this.upserts, result._id)) {\n          // Exclude any excluded _ids from being cached/uncached\n          if (options && options.exclude && options.exclude.includes(result._id)) {\n            continue;\n          } // If at limit\n\n\n          if (options.limit && docs.length === options.limit) {\n            // If past end on sorted limited, ignore\n            if (options.sort && sort(result, lodash_1.default.last(docs)) >= 0) {\n              continue;\n            } // If no sort, ignore\n\n\n            if (!options.sort) {\n              continue;\n            }\n          }\n\n          this._deleteItem(result._id);\n        }\n      }\n\n      if (success != null) {\n        return success();\n      }\n    }, error);\n  }\n\n  pendingUpserts(success) {\n    return success(lodash_1.default.values(this.upserts));\n  }\n\n  pendingRemoves(success) {\n    return success(lodash_1.default.map(this.removes, \"_id\"));\n  }\n\n  resolveUpserts(upserts, success) {\n    for (let upsert of upserts) {\n      if (this.upserts[upsert.doc._id]) {\n        // Only safely remove upsert if item is unchanged\n        if (lodash_1.default.isEqual(upsert.doc, this.upserts[upsert.doc._id].doc)) {\n          this._deleteUpsert(upsert.doc._id);\n        } else {\n          // Just update base\n          this.upserts[upsert.doc._id].base = upsert.doc;\n\n          this._putUpsert(this.upserts[upsert.doc._id]);\n        }\n      }\n    }\n\n    if (success != null) {\n      return success();\n    }\n  }\n\n  resolveRemove(id, success) {\n    this._deleteRemove(id);\n\n    if (success != null) {\n      return success();\n    }\n  } // Add but do not overwrite or record as upsert\n\n\n  seed(docs, success) {\n    if (!lodash_1.default.isArray(docs)) {\n      docs = [docs];\n    }\n\n    for (let doc of docs) {\n      if (!lodash_1.default.has(this.items, doc._id) && !lodash_1.default.has(this.removes, doc._id)) {\n        this._putItem(doc);\n      }\n    }\n\n    if (success != null) {\n      return success();\n    }\n  } // Add but do not overwrite upserts or removes\n\n\n  cacheOne(doc, success, error) {\n    return this.cacheList([doc], success, error);\n  } // Add but do not overwrite upserts or removes\n\n\n  cacheList(docs, success, error) {\n    for (let doc of docs) {\n      if (!lodash_1.default.has(this.upserts, doc._id) && !lodash_1.default.has(this.removes, doc._id)) {\n        const existing = this.items[doc._id]; // If _rev present, make sure that not overwritten by lower or equal _rev\n\n        if (!existing || !doc._rev || !existing._rev || doc._rev > existing._rev) {\n          this._putItem(doc);\n        }\n      }\n    }\n\n    if (success != null) {\n      return success();\n    }\n  }\n\n  uncache(selector, success, error) {\n    const compiledSelector = utils.compileDocumentSelector(selector);\n\n    for (let item of lodash_1.default.values(this.items)) {\n      if (this.upserts[item._id] == null && compiledSelector(item)) {\n        this._deleteItem(item._id);\n      }\n    }\n\n    if (success != null) {\n      return success();\n    }\n  }\n\n  uncacheList(ids, success, error) {\n    for (let id of ids) {\n      if (this.upserts[id] == null) {\n        this._deleteItem(id);\n      }\n    }\n\n    if (success != null) {\n      return success();\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/node_modules/minimongo/lib/LocalStorageDb.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","__importDefault","exports","lodash_1","require","async_1","utils","utils_1","selector_1","LocalStorageDb","constructor","options","success","error","collections","namespace","window","localStorage","addCollection","name","collection","Collection","removeCollection","keys","i","end","length","asc","push","key","keyToMatch","substring","removeItem","getCollectionNames","default","items","upserts","removes","loadStorage","itemNamespace","item","JSON","parse","_id","upsertKeys","doc","base","removeItems","fromPairs","zip","map","find","selector","fetch","_findFetch","findOne","isFunction","results","processFind","cloneDeep","values","upsert","docs","bases","regularizeUpsert","stringify","_putItem","_putUpsert","remove","id","isObject","rows","each","row","cb","has","_putRemove","_deleteItem","_deleteUpsert","_deleteRemove","cache","sort","exclude","includes","cacheOne","docsMap","compileSort","limit","last","pendingUpserts","pendingRemoves","resolveUpserts","isEqual","resolveRemove","seed","isArray","cacheList","existing","_rev","uncache","compiledSelector","compileDocumentSelector","uncacheList","ids"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lodash_1 = __importDefault(require(\"lodash\"));\nconst async_1 = __importDefault(require(\"async\"));\nconst utils = __importStar(require(\"./utils\"));\nconst utils_1 = require(\"./utils\");\nconst selector_1 = require(\"./selector\");\nclass LocalStorageDb {\n    constructor(options, success, error) {\n        this.collections = {};\n        if (options && options.namespace && window.localStorage) {\n            this.namespace = options.namespace;\n        }\n        if (success) {\n            success(this);\n        }\n    }\n    addCollection(name, success, error) {\n        // Set namespace for collection\n        let namespace;\n        if (this.namespace) {\n            namespace = this.namespace + \".\" + name;\n        }\n        const collection = new Collection(name, namespace);\n        this[name] = collection;\n        this.collections[name] = collection;\n        if (success != null) {\n            return success();\n        }\n    }\n    removeCollection(name, success, error) {\n        if (this.namespace && window.localStorage) {\n            const keys = [];\n            for (let i = 0, end = window.localStorage.length, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n                keys.push(window.localStorage.key(i));\n            }\n            for (let key of keys) {\n                const keyToMatch = this.namespace + \".\" + name;\n                if (key.substring(0, keyToMatch.length) === keyToMatch) {\n                    window.localStorage.removeItem(key);\n                }\n            }\n        }\n        delete this[name];\n        delete this.collections[name];\n        if (success != null) {\n            return success();\n        }\n    }\n    getCollectionNames() {\n        return lodash_1.default.keys(this.collections);\n    }\n}\nexports.default = LocalStorageDb;\n// Stores data in memory, optionally backed by local storage\nclass Collection {\n    constructor(name, namespace) {\n        this.name = name;\n        this.namespace = namespace;\n        this.items = {};\n        this.upserts = {}; // Pending upserts by _id. Still in items\n        this.removes = {}; // Pending removes by _id. No longer in items\n        // Read from local storage\n        if (window.localStorage && namespace != null) {\n            this.loadStorage();\n        }\n    }\n    loadStorage() {\n        // Read items from localStorage\n        let key;\n        this.itemNamespace = this.namespace + \"_\";\n        for (let i = 0, end = window.localStorage.length, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n            key = window.localStorage.key(i);\n            if (key.substring(0, this.itemNamespace.length) === this.itemNamespace) {\n                const item = JSON.parse(window.localStorage[key]);\n                this.items[item._id] = item;\n            }\n        }\n        // Read upserts\n        const upsertKeys = window.localStorage[this.namespace + \"upserts\"]\n            ? JSON.parse(window.localStorage[this.namespace + \"upserts\"])\n            : [];\n        for (key of upsertKeys) {\n            this.upserts[key] = { doc: this.items[key] };\n            // Get base if present\n            const base = window.localStorage[this.namespace + \"upsertbase_\" + key]\n                ? JSON.parse(window.localStorage[this.namespace + \"upsertbase_\" + key])\n                : null;\n            this.upserts[key].base = base;\n        }\n        // Read removes\n        const removeItems = window.localStorage[this.namespace + \"removes\"]\n            ? JSON.parse(window.localStorage[this.namespace + \"removes\"])\n            : [];\n        return (this.removes = lodash_1.default.fromPairs(lodash_1.default.zip(lodash_1.default.map(removeItems, \"_id\"), removeItems)));\n    }\n    find(selector, options) {\n        return {\n            fetch: (success, error) => {\n                return this._findFetch(selector, options, success, error);\n            }\n        };\n    }\n    findOne(selector, options, success, error) {\n        if (lodash_1.default.isFunction(options)) {\n            ;\n            [options, success, error] = [{}, options, success];\n        }\n        return this.find(selector, options).fetch(function (results) {\n            if (success != null) {\n                return success(results.length > 0 ? results[0] : null);\n            }\n        }, error);\n    }\n    _findFetch(selector, options, success, error) {\n        // Deep clone to prevent modification\n        if (success != null) {\n            return success((0, utils_1.processFind)(lodash_1.default.cloneDeep(lodash_1.default.values(this.items)), selector, options));\n        }\n    }\n    upsert(docs, bases, success, error) {\n        let items;\n        [items, success, error] = utils.regularizeUpsert(docs, bases, success, error);\n        // Keep independent copies to prevent modification\n        items = JSON.parse(JSON.stringify(items));\n        for (let item of items) {\n            // Fill in base\n            if (item.base === undefined) {\n                // Use existing base\n                if (this.upserts[item.doc._id]) {\n                    item.base = this.upserts[item.doc._id].base;\n                }\n                else {\n                    item.base = this.items[item.doc._id] || null;\n                }\n            }\n            // Keep independent copies\n            item = lodash_1.default.cloneDeep(item);\n            // Replace/add\n            this._putItem(item.doc);\n            this._putUpsert(item);\n        }\n        if (success) {\n            return success(docs);\n        }\n    }\n    remove(id, success, error) {\n        // Special case for filter-type remove\n        if (lodash_1.default.isObject(id)) {\n            this.find(id).fetch((rows) => {\n                return async_1.default.each(rows, ((row, cb) => {\n                    return this.remove(row._id, () => cb(), cb);\n                }), () => success());\n            }, error);\n            return;\n        }\n        if (lodash_1.default.has(this.items, id)) {\n            this._putRemove(this.items[id]);\n            this._deleteItem(id);\n            this._deleteUpsert(id);\n        }\n        else {\n            this._putRemove({ _id: id });\n        }\n        if (success != null) {\n            return success();\n        }\n    }\n    _putItem(doc) {\n        this.items[doc._id] = doc;\n        if (this.namespace) {\n            window.localStorage[this.itemNamespace + doc._id] = JSON.stringify(doc);\n        }\n    }\n    _deleteItem(id) {\n        delete this.items[id];\n        if (this.namespace) {\n            window.localStorage.removeItem(this.itemNamespace + id);\n        }\n    }\n    _putUpsert(upsert) {\n        this.upserts[upsert.doc._id] = upsert;\n        if (this.namespace) {\n            window.localStorage[this.namespace + \"upserts\"] = JSON.stringify(lodash_1.default.keys(this.upserts));\n            window.localStorage[this.namespace + \"upsertbase_\" + upsert.doc._id] = JSON.stringify(upsert.base);\n        }\n    }\n    _deleteUpsert(id) {\n        delete this.upserts[id];\n        if (this.namespace) {\n            window.localStorage[this.namespace + \"upserts\"] = JSON.stringify(lodash_1.default.keys(this.upserts));\n        }\n    }\n    _putRemove(doc) {\n        this.removes[doc._id] = doc;\n        if (this.namespace) {\n            window.localStorage[this.namespace + \"removes\"] = JSON.stringify(lodash_1.default.values(this.removes));\n        }\n    }\n    _deleteRemove(id) {\n        delete this.removes[id];\n        if (this.namespace) {\n            window.localStorage[this.namespace + \"removes\"] = JSON.stringify(lodash_1.default.values(this.removes));\n        }\n    }\n    cache(docs, selector, options, success, error) {\n        // Add all non-local that are not upserted or removed\n        let sort;\n        for (let doc of docs) {\n            // Exclude any excluded _ids from being cached/uncached\n            if (options && options.exclude && options.exclude.includes(doc._id)) {\n                continue;\n            }\n            this.cacheOne(doc, () => { }, () => { });\n        }\n        const docsMap = lodash_1.default.fromPairs(lodash_1.default.zip(lodash_1.default.map(docs, \"_id\"), docs));\n        if (options.sort) {\n            sort = (0, selector_1.compileSort)(options.sort);\n        }\n        // Perform query, removing rows missing in docs from local db\n        return this.find(selector, options).fetch((results) => {\n            for (let result of results) {\n                if (!docsMap[result._id] && !lodash_1.default.has(this.upserts, result._id)) {\n                    // Exclude any excluded _ids from being cached/uncached\n                    if (options && options.exclude && options.exclude.includes(result._id)) {\n                        continue;\n                    }\n                    // If at limit\n                    if (options.limit && docs.length === options.limit) {\n                        // If past end on sorted limited, ignore\n                        if (options.sort && sort(result, lodash_1.default.last(docs)) >= 0) {\n                            continue;\n                        }\n                        // If no sort, ignore\n                        if (!options.sort) {\n                            continue;\n                        }\n                    }\n                    this._deleteItem(result._id);\n                }\n            }\n            if (success != null) {\n                return success();\n            }\n        }, error);\n    }\n    pendingUpserts(success) {\n        return success(lodash_1.default.values(this.upserts));\n    }\n    pendingRemoves(success) {\n        return success(lodash_1.default.map(this.removes, \"_id\"));\n    }\n    resolveUpserts(upserts, success) {\n        for (let upsert of upserts) {\n            if (this.upserts[upsert.doc._id]) {\n                // Only safely remove upsert if item is unchanged\n                if (lodash_1.default.isEqual(upsert.doc, this.upserts[upsert.doc._id].doc)) {\n                    this._deleteUpsert(upsert.doc._id);\n                }\n                else {\n                    // Just update base\n                    this.upserts[upsert.doc._id].base = upsert.doc;\n                    this._putUpsert(this.upserts[upsert.doc._id]);\n                }\n            }\n        }\n        if (success != null) {\n            return success();\n        }\n    }\n    resolveRemove(id, success) {\n        this._deleteRemove(id);\n        if (success != null) {\n            return success();\n        }\n    }\n    // Add but do not overwrite or record as upsert\n    seed(docs, success) {\n        if (!lodash_1.default.isArray(docs)) {\n            docs = [docs];\n        }\n        for (let doc of docs) {\n            if (!lodash_1.default.has(this.items, doc._id) && !lodash_1.default.has(this.removes, doc._id)) {\n                this._putItem(doc);\n            }\n        }\n        if (success != null) {\n            return success();\n        }\n    }\n    // Add but do not overwrite upserts or removes\n    cacheOne(doc, success, error) {\n        return this.cacheList([doc], success, error);\n    }\n    // Add but do not overwrite upserts or removes\n    cacheList(docs, success, error) {\n        for (let doc of docs) {\n            if (!lodash_1.default.has(this.upserts, doc._id) && !lodash_1.default.has(this.removes, doc._id)) {\n                const existing = this.items[doc._id];\n                // If _rev present, make sure that not overwritten by lower or equal _rev\n                if (!existing || !doc._rev || !existing._rev || doc._rev > existing._rev) {\n                    this._putItem(doc);\n                }\n            }\n        }\n        if (success != null) {\n            return success();\n        }\n    }\n    uncache(selector, success, error) {\n        const compiledSelector = utils.compileDocumentSelector(selector);\n        for (let item of lodash_1.default.values(this.items)) {\n            if (this.upserts[item._id] == null && compiledSelector(item)) {\n                this._deleteItem(item._id);\n            }\n        }\n        if (success != null) {\n            return success();\n        }\n    }\n    uncacheList(ids, success, error) {\n        for (let id of ids) {\n            if (this.upserts[id] == null) {\n                this._deleteItem(id);\n            }\n        }\n        if (success != null) {\n            return success();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}