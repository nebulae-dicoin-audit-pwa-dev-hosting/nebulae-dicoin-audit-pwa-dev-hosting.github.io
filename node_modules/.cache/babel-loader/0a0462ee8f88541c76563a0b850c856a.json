{"ast":null,"code":"import { __read } from \"tslib\";\nimport { useEffect, useState, useCallback } from 'react';\nimport useConstant from 'use-constant';\nimport { BehaviorSubject, Subject } from 'rxjs';\nexport function useEventCallback(callback, initialState, inputs) {\n  var initialValue = typeof initialState !== 'undefined' ? initialState : null;\n\n  var _a = __read(useState(initialValue), 2),\n      state = _a[0],\n      setState = _a[1];\n\n  var event$ = useConstant(function () {\n    return new Subject();\n  });\n  var state$ = useConstant(function () {\n    return new BehaviorSubject(initialValue);\n  });\n  var inputs$ = useConstant(function () {\n    return new BehaviorSubject(typeof inputs === 'undefined' ? null : inputs);\n  });\n\n  function eventCallback(e) {\n    return event$.next(e);\n  }\n\n  var returnedCallback = useCallback(eventCallback, []);\n  useEffect(function () {\n    inputs$.next(inputs);\n  }, inputs || []);\n  useEffect(function () {\n    setState(initialValue);\n    var value$;\n\n    if (!inputs) {\n      value$ = callback(event$, state$);\n    } else {\n      value$ = callback(event$, state$, inputs$);\n    }\n\n    var subscription = value$.subscribe(function (value) {\n      state$.next(value);\n      setState(value);\n    });\n    return function () {\n      subscription.unsubscribe();\n      state$.complete();\n      inputs$.complete();\n      event$.complete();\n    };\n  }, []); // immutable forever\n\n  return [returnedCallback, state];\n}","map":null,"metadata":{},"sourceType":"module"}