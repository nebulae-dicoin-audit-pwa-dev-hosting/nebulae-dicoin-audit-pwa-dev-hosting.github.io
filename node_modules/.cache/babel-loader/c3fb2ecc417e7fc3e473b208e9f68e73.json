{"ast":null,"code":"import{useRef,useEffect}from'react';/**\n * https://usehooks.com/useEventListener/\n */function useEventListener(eventName,handler){var element=arguments.length>2&&arguments[2]!==undefined?arguments[2]:window;// Create a ref that stores handler\nvar savedHandler=useRef();// Update ref.current value if handler changes.\n// This allows our effect below to always get latest handler ...\n// ... without us needing to pass it in effect deps array ...\n// ... and potentially cause effect to re-run every render.\nuseEffect(function(){savedHandler.current=handler;},[handler]);useEffect(function(){// Make sure element supports addEventListener\n// On\nvar isSupported=element&&element.addEventListener;if(!isSupported){return false;}// Create event listener that calls handler function stored in ref\nvar eventListener=function eventListener(event){return savedHandler.current(event);};// Add event listener\nelement.addEventListener(eventName,eventListener);// Remove event listener on cleanup\nreturn function(){element.removeEventListener(eventName,eventListener);};},[eventName,element]// Re-run if eventName or element changes\n);}export default useEventListener;","map":null,"metadata":{},"sourceType":"module"}