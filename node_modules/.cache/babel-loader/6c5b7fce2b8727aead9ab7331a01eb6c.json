{"ast":null,"code":"var _jsxFileName = \"/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/src/@fuse/core/FuseMessage/FuseMessage.js\";\nimport { amber, blue, green } from '@mui/material/colors';\nimport { styled } from '@mui/material/styles';\nimport Icon from '@mui/material/Icon';\nimport IconButton from '@mui/material/IconButton';\nimport Snackbar from '@mui/material/Snackbar';\nimport SnackbarContent from '@mui/material/SnackbarContent';\nimport Typography from '@mui/material/Typography';\nimport { memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { hideMessage } from 'app/store/fuse/messageSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledSnackbar = styled(Snackbar)(_ref => {\n  let {\n    theme,\n    variant\n  } = _ref;\n  return {\n    '& .FuseMessage-content': { ...(variant === 'success' && {\n        backgroundColor: green[600],\n        color: '#FFFFFF'\n      }),\n      ...(variant === 'error' && {\n        backgroundColor: theme.palette.error.dark,\n        color: theme.palette.getContrastText(theme.palette.error.dark)\n      }),\n      ...(variant === 'info' && {\n        backgroundColor: blue[600],\n        color: '#FFFFFF'\n      }),\n      ...(variant === 'warning' && {\n        backgroundColor: amber[600],\n        color: '#FFFFFF'\n      })\n    }\n  };\n});\nconst variantIcon = {\n  success: 'check_circle',\n  warning: 'warning',\n  error: 'error_outline',\n  info: 'info'\n};\n\nfunction FuseMessage(props) {\n  const dispatch = useDispatch();\n  const state = useSelector(_ref2 => {\n    let {\n      fuse\n    } = _ref2;\n    return fuse.message.state;\n  });\n  const options = useSelector(_ref3 => {\n    let {\n      fuse\n    } = _ref3;\n    return fuse.message.options;\n  });\n  return /*#__PURE__*/_jsxDEV(StyledSnackbar, { ...options,\n    open: state,\n    onClose: () => dispatch(hideMessage()),\n    ContentProps: {\n      variant: 'body2',\n      headlineMapping: {\n        body1: 'div',\n        body2: 'div'\n      }\n    },\n    children: /*#__PURE__*/_jsxDEV(SnackbarContent, {\n      className: \"FuseMessage-content\",\n      message: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center\",\n        children: [variantIcon[options.variant] && /*#__PURE__*/_jsxDEV(Icon, {\n          color: \"inherit\",\n          children: variantIcon[options.variant]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          className: \"mx-8\",\n          children: options.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this),\n      action: [/*#__PURE__*/_jsxDEV(IconButton, {\n        \"aria-label\": \"Close\",\n        color: \"inherit\",\n        onClick: () => dispatch(hideMessage()),\n        size: \"large\",\n        children: /*#__PURE__*/_jsxDEV(Icon, {\n          children: \"close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, \"close\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\nexport default /*#__PURE__*/memo(FuseMessage);","map":{"version":3,"sources":["/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/src/@fuse/core/FuseMessage/FuseMessage.js"],"names":["amber","blue","green","styled","Icon","IconButton","Snackbar","SnackbarContent","Typography","memo","useDispatch","useSelector","hideMessage","StyledSnackbar","theme","variant","backgroundColor","color","palette","error","dark","getContrastText","variantIcon","success","warning","info","FuseMessage","props","dispatch","state","fuse","message","options","headlineMapping","body1","body2"],"mappings":"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","sourcesContent":["import { amber, blue, green } from '@mui/material/colors';\nimport { styled } from '@mui/material/styles';\nimport Icon from '@mui/material/Icon';\nimport IconButton from '@mui/material/IconButton';\nimport Snackbar from '@mui/material/Snackbar';\nimport SnackbarContent from '@mui/material/SnackbarContent';\nimport Typography from '@mui/material/Typography';\nimport { memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { hideMessage } from 'app/store/fuse/messageSlice';\n\nconst StyledSnackbar = styled(Snackbar)(({ theme, variant }) => ({\n  '& .FuseMessage-content': {\n    ...(variant === 'success' && {\n      backgroundColor: green[600],\n      color: '#FFFFFF',\n    }),\n\n    ...(variant === 'error' && {\n      backgroundColor: theme.palette.error.dark,\n      color: theme.palette.getContrastText(theme.palette.error.dark),\n    }),\n\n    ...(variant === 'info' && {\n      backgroundColor: blue[600],\n      color: '#FFFFFF',\n    }),\n\n    ...(variant === 'warning' && {\n      backgroundColor: amber[600],\n      color: '#FFFFFF',\n    }),\n  },\n}));\n\nconst variantIcon = {\n  success: 'check_circle',\n  warning: 'warning',\n  error: 'error_outline',\n  info: 'info',\n};\n\nfunction FuseMessage(props) {\n  const dispatch = useDispatch();\n  const state = useSelector(({ fuse }) => fuse.message.state);\n  const options = useSelector(({ fuse }) => fuse.message.options);\n\n  return (\n    <StyledSnackbar\n      {...options}\n      open={state}\n      onClose={() => dispatch(hideMessage())}\n      ContentProps={{\n        variant: 'body2',\n        headlineMapping: {\n          body1: 'div',\n          body2: 'div',\n        },\n      }}\n    >\n      <SnackbarContent\n        className=\"FuseMessage-content\"\n        message={\n          <div className=\"flex items-center\">\n            {variantIcon[options.variant] && (\n              <Icon color=\"inherit\">{variantIcon[options.variant]}</Icon>\n            )}\n            <Typography className=\"mx-8\">{options.message}</Typography>\n          </div>\n        }\n        action={[\n          <IconButton\n            key=\"close\"\n            aria-label=\"Close\"\n            color=\"inherit\"\n            onClick={() => dispatch(hideMessage())}\n            size=\"large\"\n          >\n            <Icon>close</Icon>\n          </IconButton>,\n        ]}\n      />\n    </StyledSnackbar>\n  );\n}\n\nexport default memo(FuseMessage);\n"]},"metadata":{},"sourceType":"module"}