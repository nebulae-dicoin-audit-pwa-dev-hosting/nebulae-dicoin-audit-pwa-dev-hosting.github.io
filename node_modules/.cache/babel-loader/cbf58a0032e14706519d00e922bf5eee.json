{"ast":null,"code":"var _jsxFileName = \"/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/src/app/auth/Auth.js\";\nimport FuseSplashScreen from '@fuse/core/FuseSplashScreen';\nimport auth0Service from 'app/services/auth0Service';\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from '@reduxjs/toolkit';\nimport { hideMessage, showMessage } from 'app/store/fuse/messageSlice';\nimport { setUserDataFirebase, setUserDataAuth0, setUserData, logoutUser } from './store/userSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      waitAuthCheck: true\n    };\n\n    this.jwtCheck = () => new Promise(resolve => {\n      jwtService.on('onAutoLogin', () => {\n        this.props.showMessage({\n          message: 'Logging in with JWT'\n        });\n        /**\n         * Sign in and retrieve user data from Api\n         */\n\n        jwtService.signInWithToken().then(user => {\n          this.props.setUserData(user);\n          resolve();\n          this.props.showMessage({\n            message: 'Logged in with JWT'\n          });\n        }).catch(error => {\n          this.props.showMessage({\n            message: error.message\n          });\n          resolve();\n        });\n      });\n      jwtService.on('onAutoLogout', message => {\n        if (message) {\n          this.props.showMessage({\n            message\n          });\n        }\n\n        this.props.logout();\n        resolve();\n      });\n      jwtService.on('onNoAccessToken', () => {\n        resolve();\n      });\n      jwtService.init();\n      return Promise.resolve();\n    });\n\n    this.auth0Check = () => new Promise(resolve => {\n      auth0Service.init(success => {\n        if (!success) {\n          resolve();\n        }\n      });\n\n      if (auth0Service.isAuthenticated()) {\n        this.props.showMessage({\n          message: 'Logging in with Auth0'\n        });\n        /**\n         * Retrieve user data from Auth0\n         */\n\n        auth0Service.getUserData().then(tokenData => {\n          this.props.setUserDataAuth0(tokenData);\n          resolve();\n          this.props.showMessage({\n            message: 'Logged in with Auth0'\n          });\n        });\n      } else {\n        resolve();\n      }\n\n      return Promise.resolve();\n    });\n\n    this.firebaseCheck = () => new Promise(resolve => {\n      firebaseService.init(success => {\n        if (!success) {\n          resolve();\n        }\n      });\n      firebaseService.onAuthStateChanged(authUser => {\n        if (authUser) {\n          this.props.showMessage({\n            message: 'Logging in with Firebase'\n          });\n          /**\n           * Retrieve user data from Firebase\n           */\n\n          firebaseService.getUserData(authUser.uid).then(user => {\n            this.props.setUserDataFirebase(user, authUser);\n            resolve();\n            this.props.showMessage({\n              message: 'Logged in with Firebase'\n            });\n          }, error => {\n            resolve();\n          });\n        } else {\n          resolve();\n        }\n      });\n      return Promise.resolve();\n    });\n  }\n\n  componentDidMount() {\n    return Promise.all([// Comment the lines which you do not use\n      // this.firebaseCheck(),\n      // this.auth0Check(),\n      // this.jwtCheck(),\n    ]).then(() => {\n      this.setState({\n        waitAuthCheck: false\n      });\n    });\n  }\n\n  render() {\n    return this.state.waitAuthCheck ? /*#__PURE__*/_jsxDEV(FuseSplashScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 39\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: this.props.children\n    }, void 0, false);\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    logout: logoutUser,\n    setUserData,\n    setUserDataAuth0,\n    setUserDataFirebase,\n    showMessage,\n    hideMessage\n  }, dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/src/app/auth/Auth.js"],"names":["FuseSplashScreen","auth0Service","firebaseService","jwtService","Component","connect","bindActionCreators","hideMessage","showMessage","setUserDataFirebase","setUserDataAuth0","setUserData","logoutUser","Auth","state","waitAuthCheck","jwtCheck","Promise","resolve","on","props","message","signInWithToken","then","user","catch","error","logout","init","auth0Check","success","isAuthenticated","getUserData","tokenData","firebaseCheck","onAuthStateChanged","authUser","uid","componentDidMount","all","setState","render","children","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import FuseSplashScreen from '@fuse/core/FuseSplashScreen';\nimport auth0Service from 'app/services/auth0Service';\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from '@reduxjs/toolkit';\nimport { hideMessage, showMessage } from 'app/store/fuse/messageSlice';\n\nimport { setUserDataFirebase, setUserDataAuth0, setUserData, logoutUser } from './store/userSlice';\n\nclass Auth extends Component {\n  state = {\n    waitAuthCheck: true,\n  };\n\n  componentDidMount() {\n    return Promise.all([\n      // Comment the lines which you do not use\n      // this.firebaseCheck(),\n      // this.auth0Check(),\n      // this.jwtCheck(),\n    ]).then(() => {\n      this.setState({ waitAuthCheck: false });\n    });\n  }\n\n  jwtCheck = () =>\n    new Promise((resolve) => {\n      jwtService.on('onAutoLogin', () => {\n        this.props.showMessage({ message: 'Logging in with JWT' });\n\n        /**\n         * Sign in and retrieve user data from Api\n         */\n        jwtService\n          .signInWithToken()\n          .then((user) => {\n            this.props.setUserData(user);\n\n            resolve();\n\n            this.props.showMessage({ message: 'Logged in with JWT' });\n          })\n          .catch((error) => {\n            this.props.showMessage({ message: error.message });\n\n            resolve();\n          });\n      });\n\n      jwtService.on('onAutoLogout', (message) => {\n        if (message) {\n          this.props.showMessage({ message });\n        }\n\n        this.props.logout();\n\n        resolve();\n      });\n\n      jwtService.on('onNoAccessToken', () => {\n        resolve();\n      });\n\n      jwtService.init();\n\n      return Promise.resolve();\n    });\n\n  auth0Check = () =>\n    new Promise((resolve) => {\n      auth0Service.init((success) => {\n        if (!success) {\n          resolve();\n        }\n      });\n\n      if (auth0Service.isAuthenticated()) {\n        this.props.showMessage({ message: 'Logging in with Auth0' });\n\n        /**\n         * Retrieve user data from Auth0\n         */\n        auth0Service.getUserData().then((tokenData) => {\n          this.props.setUserDataAuth0(tokenData);\n\n          resolve();\n\n          this.props.showMessage({ message: 'Logged in with Auth0' });\n        });\n      } else {\n        resolve();\n      }\n\n      return Promise.resolve();\n    });\n\n  firebaseCheck = () =>\n    new Promise((resolve) => {\n      firebaseService.init((success) => {\n        if (!success) {\n          resolve();\n        }\n      });\n\n      firebaseService.onAuthStateChanged((authUser) => {\n        if (authUser) {\n          this.props.showMessage({ message: 'Logging in with Firebase' });\n\n          /**\n           * Retrieve user data from Firebase\n           */\n          firebaseService.getUserData(authUser.uid).then(\n            (user) => {\n              this.props.setUserDataFirebase(user, authUser);\n\n              resolve();\n\n              this.props.showMessage({ message: 'Logged in with Firebase' });\n            },\n            (error) => {\n              resolve();\n            }\n          );\n        } else {\n          resolve();\n        }\n      });\n\n      return Promise.resolve();\n    });\n\n  render() {\n    return this.state.waitAuthCheck ? <FuseSplashScreen /> : <>{this.props.children}</>;\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      logout: logoutUser,\n      setUserData,\n      setUserDataAuth0,\n      setUserDataFirebase,\n      showMessage,\n      hideMessage,\n    },\n    dispatch\n  );\n}\n\nexport default connect(null, mapDispatchToProps)(Auth);\n"]},"metadata":{},"sourceType":"module"}