{"ast":null,"code":"import FuseUtils from '@fuse/utils';\nimport AppContext from 'app/AppContext';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { matchRoutes } from 'react-router-config';\nimport { withRouter } from 'react-router-dom';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FuseAuthorization extends Component {\n  constructor(props, context) {\n    super(props);\n    const {\n      routes\n    } = context;\n    this.state = {\n      accessGranted: true,\n      routes\n    };\n  }\n\n  componentDidMount() {\n    if (!this.state.accessGranted) {\n      this.redirectRoute();\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextState.accessGranted !== this.state.accessGranted;\n  }\n\n  componentDidUpdate() {\n    if (!this.state.accessGranted) {\n      this.redirectRoute();\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const {\n      location,\n      userRole\n    } = props;\n    const {\n      pathname\n    } = location;\n    const matched = matchRoutes(state.routes, pathname)[0];\n    return {\n      accessGranted: matched ? FuseUtils.hasPermission(matched.route.auth, userRole) : true\n    };\n  }\n\n  redirectRoute() {\n    const {\n      location,\n      userRole,\n      history\n    } = this.props;\n    const {\n      pathname,\n      state\n    } = location;\n    const redirectUrl = state && state.redirectUrl ? state.redirectUrl : '/';\n    /*\n        User is guest\n        Redirect to Login Page\n        */\n\n    if (!userRole || userRole.length === 0) {\n      history.push({\n        pathname: '/login',\n        state: {\n          redirectUrl: pathname\n        }\n      });\n    } else {\n      /*\n        User is member\n        User must be on unAuthorized page or just logged in\n        Redirect to dashboard or redirectUrl\n        */\n      history.push({\n        pathname: redirectUrl\n      });\n    }\n  }\n\n  render() {\n    // console.info('Fuse Authorization rendered', this.state.accessGranted);\n    return this.state.accessGranted ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: this.props.children\n    }, void 0, false) : null;\n  }\n\n}\n\nfunction mapStateToProps(_ref) {\n  let {\n    auth\n  } = _ref;\n  return {\n    userRole: auth.user.role\n  };\n}\n\nFuseAuthorization.contextType = AppContext;\nexport default withRouter(connect(mapStateToProps)(FuseAuthorization));","map":{"version":3,"sources":["/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/src/@fuse/core/FuseAuthorization/FuseAuthorization.js"],"names":["FuseUtils","AppContext","Component","connect","matchRoutes","withRouter","FuseAuthorization","constructor","props","context","routes","state","accessGranted","componentDidMount","redirectRoute","shouldComponentUpdate","nextProps","nextState","componentDidUpdate","getDerivedStateFromProps","location","userRole","pathname","matched","hasPermission","route","auth","history","redirectUrl","length","push","render","children","mapStateToProps","user","role","contextType"],"mappings":"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","sourcesContent":["import FuseUtils from '@fuse/utils';\nimport AppContext from 'app/AppContext';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { matchRoutes } from 'react-router-config';\nimport { withRouter } from 'react-router-dom';\n\nclass FuseAuthorization extends Component {\n  constructor(props, context) {\n    super(props);\n    const { routes } = context;\n    this.state = {\n      accessGranted: true,\n      routes,\n    };\n  }\n\n  componentDidMount() {\n    if (!this.state.accessGranted) {\n      this.redirectRoute();\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextState.accessGranted !== this.state.accessGranted;\n  }\n\n  componentDidUpdate() {\n    if (!this.state.accessGranted) {\n      this.redirectRoute();\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { location, userRole } = props;\n    const { pathname } = location;\n\n    const matched = matchRoutes(state.routes, pathname)[0];\n\n    return {\n      accessGranted: matched ? FuseUtils.hasPermission(matched.route.auth, userRole) : true,\n    };\n  }\n\n  redirectRoute() {\n    const { location, userRole, history } = this.props;\n    const { pathname, state } = location;\n    const redirectUrl = state && state.redirectUrl ? state.redirectUrl : '/';\n\n    /*\n        User is guest\n        Redirect to Login Page\n        */\n    if (!userRole || userRole.length === 0) {\n      history.push({\n        pathname: '/login',\n        state: { redirectUrl: pathname },\n      });\n    } else {\n      /*\n        User is member\n        User must be on unAuthorized page or just logged in\n        Redirect to dashboard or redirectUrl\n        */\n      history.push({\n        pathname: redirectUrl,\n      });\n    }\n  }\n\n  render() {\n    // console.info('Fuse Authorization rendered', this.state.accessGranted);\n    return this.state.accessGranted ? <>{this.props.children}</> : null;\n  }\n}\n\nfunction mapStateToProps({ auth }) {\n  return {\n    userRole: auth.user.role,\n  };\n}\n\nFuseAuthorization.contextType = AppContext;\n\nexport default withRouter(connect(mapStateToProps)(FuseAuthorization));\n"]},"metadata":{},"sourceType":"module"}