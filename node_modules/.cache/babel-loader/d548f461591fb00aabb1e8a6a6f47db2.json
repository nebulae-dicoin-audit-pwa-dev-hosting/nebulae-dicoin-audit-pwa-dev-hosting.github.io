{"ast":null,"code":"import _slicedToArray from \"/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\n\nfunction useRandomId(idOverride) {\n  var _React$useState = React.useState(idOverride),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      defaultId = _React$useState2[0],\n      setDefaultId = _React$useState2[1];\n\n  var id = idOverride || defaultId;\n  React.useEffect(function () {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the random value for client-side rendering only.\n      // We can't use it server-side.\n      setDefaultId(\"mui-\".concat(Math.round(Math.random() * 1e9)));\n    }\n  }, [defaultId]);\n  return id;\n}\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\n\n\nexport default function useReactId(idOverride) {\n  // TODO: Remove `React as any` once `useId` is part of stable types.\n  if (React.useId !== undefined) {\n    var reactId = React.useId();\n    return idOverride != null ? idOverride : reactId;\n  } // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n\n\n  return useRandomId(idOverride);\n}","map":null,"metadata":{},"sourceType":"module"}