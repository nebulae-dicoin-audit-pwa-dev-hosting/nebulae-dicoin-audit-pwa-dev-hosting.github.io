{"ast":null,"code":"import { __read } from \"tslib\";\nimport { BehaviorSubject } from 'rxjs';\nimport { useState, useEffect } from 'react';\nimport useConstant from 'use-constant';\nexport function useObservable(inputFactory, initialState, inputs) {\n  var _a = __read(useState(typeof initialState !== 'undefined' ? initialState : null), 2),\n      state = _a[0],\n      setState = _a[1];\n\n  var state$ = useConstant(function () {\n    return new BehaviorSubject(initialState);\n  });\n  var inputs$ = useConstant(function () {\n    return new BehaviorSubject(inputs);\n  });\n  useEffect(function () {\n    inputs$.next(inputs);\n  }, inputs || []);\n  useEffect(function () {\n    var output$;\n\n    if (inputs) {\n      output$ = inputFactory(state$, inputs$);\n    } else {\n      output$ = inputFactory(state$);\n    }\n\n    var subscription = output$.subscribe(function (value) {\n      state$.next(value);\n      setState(value);\n    });\n    return function () {\n      subscription.unsubscribe();\n      inputs$.complete();\n      state$.complete();\n    };\n  }, []); // immutable forever\n\n  return state;\n}","map":null,"metadata":{},"sourceType":"module"}