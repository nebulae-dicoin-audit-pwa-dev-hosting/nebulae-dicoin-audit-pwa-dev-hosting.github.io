{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.ReCAPTCHA = exports.isRecaptcha = undefined;\n\nvar _createRef = require('../../utils/createRef');\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar noop = function noop() {};\n\nvar RECAPTCHA_V2_PROVIDER = 'recaptcha_v2';\nvar RECAPTCHA_ENTERPRISE_PROVIDER = 'recaptcha_enterprise';\n\nvar isRecaptcha = exports.isRecaptcha = function isRecaptcha(provider) {\n  return provider === RECAPTCHA_ENTERPRISE_PROVIDER || provider === RECAPTCHA_V2_PROVIDER;\n};\n\nvar getRecaptchaProvider = function getRecaptchaProvider(provider) {\n  switch (provider) {\n    case RECAPTCHA_V2_PROVIDER:\n      return window.grecaptcha;\n\n    case RECAPTCHA_ENTERPRISE_PROVIDER:\n      return window.grecaptcha.enterprise;\n  }\n};\n\nvar scriptForProvider = function scriptForProvider(provider, lang, callback) {\n  switch (provider) {\n    case RECAPTCHA_V2_PROVIDER:\n      return 'https://www.recaptcha.net/recaptcha/api.js?hl=' + lang + '&onload=' + callback;\n\n    case RECAPTCHA_ENTERPRISE_PROVIDER:\n      return 'https://www.recaptcha.net/recaptcha/enterprise.js?render=explicit&hl=' + lang + '&onload=' + callback;\n  }\n};\n\nvar ReCAPTCHA = exports.ReCAPTCHA = function (_React$Component) {\n  _inherits(ReCAPTCHA, _React$Component);\n\n  function ReCAPTCHA(props) {\n    _classCallCheck(this, ReCAPTCHA);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.state = {}; //this version of react doesn't have React.createRef\n\n    _this.ref = (0, _createRef.createRef)();\n\n    _this.changeHandler = function (value) {\n      _this.setState({\n        value: value\n      }, function () {\n        _this.props.onChange(value);\n      });\n    };\n\n    _this.expiredHandler = function () {\n      var value = '';\n\n      _this.setState({\n        value: value\n      }, function () {\n        _this.props.onChange(value);\n\n        _this.props.onExpired();\n      });\n    };\n\n    _this.erroredHandler = function () {\n      var value = '';\n\n      _this.setState({\n        value: value\n      }, function () {\n        _this.props.onChange(value);\n\n        _this.props.onErrored();\n      });\n    };\n\n    return _this;\n  }\n\n  ReCAPTCHA.loadScript = function loadScript(props) {\n    var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.body;\n    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n    var callbackName = 'recatpchaCallback_' + Math.floor(Math.random() * 1000001);\n    var scriptUrl = scriptForProvider(props.provider, props.hl, callbackName);\n    var script = document.createElement('script');\n\n    window[callbackName] = function () {\n      delete window[callbackName];\n      callback(null, script);\n    };\n\n    script.src = scriptUrl;\n    script.async = true;\n    element.appendChild(script);\n  };\n\n  ReCAPTCHA.prototype.componentWillUnmount = function componentWillUnmount() {\n    if (!this.scriptNode) {\n      return;\n    }\n\n    document.body.removeChild(this.scriptNode);\n  };\n\n  ReCAPTCHA.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    ReCAPTCHA.loadScript(this.props, document.body, function (err, scriptNode) {\n      _this2.scriptNode = scriptNode;\n      var provider = getRecaptchaProvider(_this2.props.provider); // if this is enterprise then we change this to window.grecaptcha.enterprise.render\n\n      _this2.widgetId = provider.render(_this2.ref.current, {\n        callback: _this2.changeHandler,\n        'expired-callback': _this2.expiredHandler,\n        'error-callback': _this2.erroredHandler,\n        sitekey: _this2.props.sitekey\n      });\n    });\n  };\n\n  ReCAPTCHA.prototype.reset = function reset() {\n    var provider = getRecaptchaProvider(this.props.provider);\n    provider.reset(this.widgetId);\n  };\n\n  ReCAPTCHA.prototype.render = function render() {\n    /*\n      This is an override for the following conflicting css-rule:\n       @media screen and (max-width: 480px)\n      html.auth0-lock-html body > * {\n          display: none;\n      }\n    */\n    var fixInterval = setInterval(function () {\n      var iframes = Array.from(document.querySelectorAll('iframe[src*=\"recaptcha\"]'));\n      var containers = iframes.map(function (iframe) {\n        return iframe.parentNode.parentNode;\n      }).filter(function (container) {\n        return container && container.parentNode === document.body && container.style.display !== 'block';\n      });\n\n      if (containers.length === 0) {\n        return;\n      }\n\n      containers.forEach(function (iframe) {\n        iframe.style.display = 'block';\n      });\n      clearInterval(fixInterval);\n    }, 300);\n    return _react2.default.createElement('div', {\n      className: this.props.isValid ? 'auth0-lock-recaptcha-block' : 'auth0-lock-recaptcha-block auth0-lock-recaptcha-block-error'\n    }, _react2.default.createElement('div', {\n      className: 'auth0-lock-recaptchav2',\n      ref: this.ref\n    }));\n  };\n\n  ReCAPTCHA.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.value !== prevState.value) {\n      return {\n        value: nextProps.value\n      };\n    } else {\n      return null;\n    }\n  };\n\n  ReCAPTCHA.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    if (prevProps.value !== this.props.value && this.props.value === '') {\n      this.reset();\n    }\n  };\n\n  return ReCAPTCHA;\n}(_react2.default.Component);\n\nReCAPTCHA.displayName = 'ReCAPTCHA';\nReCAPTCHA.propTypes = {\n  provider: _propTypes2.default.string.isRequired,\n  sitekey: _propTypes2.default.string.isRequired,\n  onChange: _propTypes2.default.func,\n  onExpired: _propTypes2.default.func,\n  onErrored: _propTypes2.default.func,\n  hl: _propTypes2.default.string,\n  value: _propTypes2.default.string,\n  isValid: _propTypes2.default.bool\n};\nReCAPTCHA.defaultProps = {\n  onChange: noop,\n  onExpired: noop,\n  onErrored: noop\n};","map":null,"metadata":{},"sourceType":"script"}