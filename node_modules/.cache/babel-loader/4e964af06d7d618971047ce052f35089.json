{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.regularizeUpsert = exports.createUid = exports.filterFields = exports.processFind = exports.cloneLocalCollection = exports.cloneLocalDb = exports.migrateLocalDb = exports.autoselectLocalDb = exports.compileDocumentSelector = void 0; // Utilities for db handling\n\nconst lodash_1 = __importDefault(require(\"lodash\"));\n\nconst async_1 = __importDefault(require(\"async\"));\n\nconst bowser_1 = __importDefault(require(\"bowser\"));\n\nconst selector_1 = require(\"./selector\");\n\nObject.defineProperty(exports, \"compileDocumentSelector\", {\n  enumerable: true,\n  get: function () {\n    return selector_1.compileDocumentSelector;\n  }\n});\n\nconst boolean_point_in_polygon_1 = __importDefault(require(\"@turf/boolean-point-in-polygon\"));\n\nconst intersect_1 = __importDefault(require(\"@turf/intersect\"));\n\nconst boolean_crosses_1 = __importDefault(require(\"@turf/boolean-crosses\"));\n\nconst boolean_within_1 = __importDefault(require(\"@turf/boolean-within\"));\n\nconst IndexedDb_1 = __importDefault(require(\"./IndexedDb\"));\n\nconst WebSQLDb_1 = __importDefault(require(\"./WebSQLDb\"));\n\nconst LocalStorageDb_1 = __importDefault(require(\"./LocalStorageDb\"));\n\nconst MemoryDb_1 = __importDefault(require(\"./MemoryDb\"));\n\nconst HybridDb_1 = __importDefault(require(\"./HybridDb\")); // Test window.localStorage\n\n\nfunction isLocalStorageSupported() {\n  if (!window.localStorage) {\n    return false;\n  }\n\n  try {\n    window.localStorage.setItem(\"test\", \"test\");\n    window.localStorage.removeItem(\"test\");\n    return true;\n  } catch (e) {\n    return false;\n  }\n} // Select appropriate local database, prefering IndexedDb, then WebSQLDb, then LocalStorageDb, then MemoryDb\n\n\nfunction autoselectLocalDb(options, success, error) {\n  var _a; // Get browser capabilities\n\n\n  const {\n    browser\n  } = bowser_1.default; // Browsers with no localStorage support don't deserve anything better than a MemoryDb\n\n  if (!isLocalStorageSupported()) {\n    return new MemoryDb_1.default(options, success);\n  } // Always use WebSQL in cordova\n\n\n  if (window[\"cordova\"]) {\n    if (((_a = window[\"device\"]) === null || _a === void 0 ? void 0 : _a.platform) === \"iOS\" && window[\"sqlitePlugin\"]) {\n      console.log(\"Selecting WebSQLDb(sqlite) for Cordova\");\n      options.storage = \"sqlite\";\n      return new WebSQLDb_1.default(options, success, error);\n    } else {\n      console.log(\"Selecting else WebSQLDb for Cordova\"); // WebSQLDb must success in Cordova\n\n      return new WebSQLDb_1.default(options, success, error);\n    }\n  } // Use IndexedDb for ios, Safari\n\n\n  if (browser.ios || browser.safari) {\n    // Fallback to IndexedDb\n    return new IndexedDb_1.default(options, success, err => {\n      console.log(\"Failed to create IndexedDb: \" + (err ? err.message : undefined)); // Create memory db instead\n\n      return new MemoryDb_1.default(options, success);\n    });\n  } // Use WebSQL in Android, Chrome,  Opera, Blackberry if supports it\n\n\n  if (browser.android || browser.chrome || browser.opera || browser.blackberry) {\n    if (typeof window[\"openDatabase\"] === \"function\") {\n      console.log(\"Selecting WebSQLDb for browser\");\n      return new WebSQLDb_1.default(options, success, err => {\n        console.log(\"Failed to create WebSQLDb: \" + (err ? err.message : undefined)); // Fallback to IndexedDb\n\n        return new IndexedDb_1.default(options, success, err => {\n          console.log(\"Failed to create IndexedDb: \" + (err ? err.message : undefined)); // Create memory db instead\n\n          return new MemoryDb_1.default(options, success);\n        });\n      });\n    } else {\n      // Fallback to IndexedDb\n      console.log(\"Selecting IndexedDb for browser as WebSQL not supported\");\n      return new IndexedDb_1.default(options, success, err => {\n        console.log(\"Failed to create IndexedDb: \" + (err ? err.message : undefined)); // Create memory db instead\n\n        return new MemoryDb_1.default(options, success);\n      });\n    }\n  } // Use IndexedDb on Firefox >= 16\n\n\n  if (browser.firefox && browser.version >= 16) {\n    console.log(\"Selecting IndexedDb for browser\");\n    return new IndexedDb_1.default(options, success, err => {\n      console.log(\"Failed to create IndexedDb: \" + (err ? err.message : undefined)); // Create memory db instead\n\n      return new MemoryDb_1.default(options, success);\n    });\n  } // Use Local Storage otherwise\n\n\n  console.log(\"Selecting LocalStorageDb for fallback\");\n  return new LocalStorageDb_1.default(options, success, error);\n}\n\nexports.autoselectLocalDb = autoselectLocalDb; // Migrates a local database's pending upserts and removes from one database to another\n// Useful for upgrading from one type of database to another\n\nfunction migrateLocalDb(fromDb, toDb, success, error) {\n  // Migrate collection using a HybridDb\n  const hybridDb = new HybridDb_1.default(fromDb, toDb);\n\n  for (let name in fromDb.collections) {\n    const col = fromDb.collections[name];\n\n    if (toDb[name]) {\n      hybridDb.addCollection(name);\n    }\n  }\n\n  return hybridDb.upload(success, error);\n}\n\nexports.migrateLocalDb = migrateLocalDb;\n/** Clone a local database collection's caches, pending upserts and removes from one database to another\n * Useful for making a replica */\n\nfunction cloneLocalDb(fromDb, toDb, success, error) {\n  let name;\n\n  for (name in fromDb.collections) {\n    // TODO Assumes synchronous addCollection\n    const col = fromDb.collections[name];\n\n    if (!toDb[name]) {\n      toDb.addCollection(name);\n    }\n  } // First cache all data\n\n\n  return async_1.default.each(lodash_1.default.values(fromDb.collections), (fromCol, cb) => {\n    const toCol = toDb[fromCol.name]; // Get all items\n\n    return fromCol.find({}).fetch(items => {\n      // Seed items\n      return toCol.seed(items, () => {\n        // Copy upserts\n        return fromCol.pendingUpserts(upserts => {\n          return toCol.upsert(lodash_1.default.map(upserts, \"doc\"), lodash_1.default.map(upserts, \"base\"), () => {\n            // Copy removes\n            return fromCol.pendingRemoves(removes => {\n              return async_1.default.eachSeries(removes, (remove, cb2) => {\n                return toCol.remove(remove, () => {\n                  return cb2();\n                }, cb2);\n              }, cb);\n            }, cb);\n          }, cb);\n        }, cb);\n      }, cb);\n    }, cb);\n  }, err => {\n    if (err) {\n      return error(err);\n    }\n\n    return success();\n  });\n}\n\nexports.cloneLocalDb = cloneLocalDb;\n/** Clone a local database collection's caches, pending upserts and removes from one database to another\n * Useful for making a replica */\n\nfunction cloneLocalCollection(fromCol, toCol, success, error) {\n  // Get all items\n  return fromCol.find({}).fetch(items => {\n    // Seed items\n    return toCol.seed(items, () => {\n      // Copy upserts\n      return fromCol.pendingUpserts(upserts => {\n        return toCol.upsert(lodash_1.default.map(upserts, \"doc\"), lodash_1.default.map(upserts, \"base\"), () => {\n          // Copy removes\n          return fromCol.pendingRemoves(removes => {\n            const iterator = (remove, cb2) => {\n              return toCol.remove(remove, () => {\n                return cb2();\n              }, cb2);\n            };\n\n            return async_1.default.eachSeries(removes, iterator, err => {\n              if (err) {\n                return error(err);\n              }\n\n              return success();\n            });\n          }, error);\n        }, error);\n      }, error);\n    }, error);\n  }, error);\n}\n\nexports.cloneLocalCollection = cloneLocalCollection; // Processes a find with sorting and filtering and limiting\n\nfunction processFind(items, selector, options) {\n  let filtered = lodash_1.default.filter(items, (0, selector_1.compileDocumentSelector)(selector)); // Handle geospatial operators\n\n  filtered = processNearOperator(selector, filtered);\n  filtered = processGeoIntersectsOperator(selector, filtered);\n\n  if (options && options.sort) {\n    filtered.sort((0, selector_1.compileSort)(options.sort));\n  }\n\n  if (options && options.skip) {\n    filtered = lodash_1.default.slice(filtered, options.skip);\n  }\n\n  if (options && options.limit) {\n    filtered = lodash_1.default.take(filtered, options.limit);\n  } // Apply fields if present\n\n\n  if (options && options.fields) {\n    filtered = exports.filterFields(filtered, options.fields);\n  }\n\n  return filtered;\n}\n\nexports.processFind = processFind;\n/** Include/exclude fields in mongo-style */\n\nfunction filterFields(items) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  // Handle trivial case\n  if (lodash_1.default.keys(fields).length === 0) {\n    return items;\n  } // For each item\n\n\n  return lodash_1.default.map(items, function (item) {\n    let field, obj, path, pathElem;\n    const newItem = {};\n\n    if (lodash_1.default.first(lodash_1.default.values(fields)) === 1) {\n      // Include fields\n      for (field of lodash_1.default.keys(fields).concat([\"_id\"])) {\n        path = field.split(\".\"); // Determine if path exists\n\n        obj = item;\n\n        for (pathElem of path) {\n          if (obj) {\n            obj = obj[pathElem];\n          }\n        }\n\n        if (obj == null) {\n          continue;\n        } // Go into path, creating as necessary\n\n\n        let from = item;\n        let to = newItem;\n\n        for (pathElem of lodash_1.default.initial(path)) {\n          to[pathElem] = to[pathElem] || {}; // Move inside\n\n          to = to[pathElem];\n          from = from[pathElem];\n        } // Copy value\n\n\n        to[lodash_1.default.last(path)] = from[lodash_1.default.last(path)];\n      }\n\n      return newItem;\n    } else {\n      // Deep clone as we will be deleting keys from item to exclude fields\n      item = lodash_1.default.cloneDeep(item); // Exclude fields\n\n      for (field of lodash_1.default.keys(fields)) {\n        path = field.split(\".\"); // Go inside path\n\n        obj = item;\n\n        for (pathElem of lodash_1.default.initial(path)) {\n          if (obj) {\n            obj = obj[pathElem];\n          }\n        } // If not there, don't exclude\n\n\n        if (obj == null) {\n          continue;\n        }\n\n        delete obj[lodash_1.default.last(path)];\n      }\n\n      return item;\n    }\n  });\n}\n\nexports.filterFields = filterFields; // Creates a unique identifier string\n\nfunction createUid() {\n  return \"xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === \"x\" ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\nexports.createUid = createUid;\n\nfunction processNearOperator(selector, list) {\n  for (var key in selector) {\n    var value = selector[key];\n\n    if (value != null && value[\"$near\"]) {\n      var geo = value[\"$near\"][\"$geometry\"];\n\n      if (geo.type !== \"Point\") {\n        break;\n      }\n\n      list = lodash_1.default.filter(list, doc => doc[key] && doc[key].type === \"Point\"); // Get distances\n\n      let distances = lodash_1.default.map(list, doc => ({\n        doc,\n        distance: getDistanceFromLatLngInM(geo.coordinates[1], geo.coordinates[0], doc[key].coordinates[1], doc[key].coordinates[0])\n      })); // Filter non-points\n\n      distances = lodash_1.default.filter(distances, item => item.distance >= 0); // Sort by distance\n\n      distances = lodash_1.default.sortBy(distances, \"distance\"); // Filter by maxDistance\n\n      if (value[\"$near\"][\"$maxDistance\"]) {\n        distances = lodash_1.default.filter(distances, item => item.distance <= value[\"$near\"][\"$maxDistance\"]);\n      } // Extract docs\n\n\n      list = lodash_1.default.map(distances, \"doc\");\n    }\n  }\n\n  return list;\n}\n\nfunction pointInPolygon(point, polygon) {\n  return (0, boolean_point_in_polygon_1.default)(point, polygon);\n}\n\nfunction polygonIntersection(polygon1, polygon2) {\n  return (0, intersect_1.default)(polygon1, polygon2) != null;\n} // From http://www.movable-type.co.uk/scripts/latlong.html\n\n\nfunction getDistanceFromLatLngInM(lat1, lng1, lat2, lng2) {\n  const R = 6370986; // Radius of the earth in m\n\n  const dLat = deg2rad(lat2 - lat1); // deg2rad below\n\n  const dLng = deg2rad(lng2 - lng1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c; // Distance in m\n\n  return d;\n}\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}\n\nfunction processGeoIntersectsOperator(selector, list) {\n  for (var key in selector) {\n    const value = selector[key];\n\n    if (value != null && value[\"$geoIntersects\"]) {\n      var geo = value[\"$geoIntersects\"][\"$geometry\"]; // Can only test intersection with polygon\n\n      if (geo.type !== \"Polygon\") {\n        break;\n      } // Check within for each\n\n\n      list = lodash_1.default.filter(list, function (doc) {\n        // Ignore if null\n        if (!doc[key]) {\n          return false;\n        } // Check point or polygon\n\n\n        if (doc[key].type === \"Point\") {\n          return pointInPolygon(doc[key], geo);\n        } else if ([\"Polygon\", \"MultiPolygon\"].includes(doc[key].type)) {\n          return polygonIntersection(doc[key], geo);\n        } else if (doc[key].type === \"LineString\") {\n          return (0, boolean_crosses_1.default)(doc[key], geo) || (0, boolean_within_1.default)(doc[key], geo);\n        } else if (doc[key].type === \"MultiLineString\") {\n          // Bypass deficiencies in turf.js by splitting it up\n          for (let line of doc[key].coordinates) {\n            const lineGeo = {\n              type: \"LineString\",\n              coordinates: line\n            };\n\n            if ((0, boolean_crosses_1.default)(lineGeo, geo) || (0, boolean_within_1.default)(lineGeo, geo)) {\n              return true;\n            }\n          }\n\n          return false;\n        }\n      });\n    }\n  }\n\n  return list;\n}\n/** Tidy up upsert parameters to always be a list of { doc: <doc>, base: <base> },\n * doing basic error checking and making sure that _id is present\n * Returns [items, success, error]\n */\n\n\nfunction regularizeUpsert(docs, bases, success, error) {\n  // Handle case of bases not present\n  if (lodash_1.default.isFunction(bases)) {\n    ;\n    [bases, success, error] = [undefined, bases, success];\n  } // Handle single upsert\n\n\n  if (!lodash_1.default.isArray(docs)) {\n    docs = [docs];\n    bases = [bases];\n  } else {\n    bases = bases || [];\n  } // Make into list of { doc: .., base: }\n\n\n  const items = lodash_1.default.map(docs, (doc, i) => ({\n    doc,\n    base: i < bases.length ? bases[i] : undefined\n  })); // Set _id\n\n  for (let item of items) {\n    if (!item.doc._id) {\n      item.doc._id = exports.createUid();\n    }\n\n    if (item.base && !item.base._id) {\n      throw new Error(\"Base needs _id\");\n    }\n\n    if (item.base && item.base._id !== item.doc._id) {\n      throw new Error(\"Base needs same _id\");\n    }\n  }\n\n  return [items, success, error];\n}\n\nexports.regularizeUpsert = regularizeUpsert;","map":{"version":3,"sources":["/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/node_modules/minimongo/lib/utils.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","regularizeUpsert","createUid","filterFields","processFind","cloneLocalCollection","cloneLocalDb","migrateLocalDb","autoselectLocalDb","compileDocumentSelector","lodash_1","require","async_1","bowser_1","selector_1","enumerable","get","boolean_point_in_polygon_1","intersect_1","boolean_crosses_1","boolean_within_1","IndexedDb_1","WebSQLDb_1","LocalStorageDb_1","MemoryDb_1","HybridDb_1","isLocalStorageSupported","window","localStorage","setItem","removeItem","e","options","success","error","_a","browser","default","platform","console","log","storage","ios","safari","err","message","undefined","android","chrome","opera","blackberry","firefox","version","fromDb","toDb","hybridDb","name","collections","col","addCollection","upload","each","values","fromCol","cb","toCol","find","fetch","items","seed","pendingUpserts","upserts","upsert","map","pendingRemoves","removes","eachSeries","remove","cb2","iterator","selector","filtered","filter","processNearOperator","processGeoIntersectsOperator","sort","compileSort","skip","slice","limit","take","fields","keys","length","item","field","obj","path","pathElem","newItem","first","concat","split","from","to","initial","last","cloneDeep","replace","c","r","Math","random","v","toString","list","key","geo","type","doc","distances","distance","getDistanceFromLatLngInM","coordinates","sortBy","pointInPolygon","point","polygon","polygonIntersection","polygon1","polygon2","lat1","lng1","lat2","lng2","R","dLat","deg2rad","dLng","a","sin","cos","atan2","sqrt","d","deg","PI","includes","line","lineGeo","docs","bases","isFunction","isArray","i","base","_id","Error"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.regularizeUpsert = exports.createUid = exports.filterFields = exports.processFind = exports.cloneLocalCollection = exports.cloneLocalDb = exports.migrateLocalDb = exports.autoselectLocalDb = exports.compileDocumentSelector = void 0;\n// Utilities for db handling\nconst lodash_1 = __importDefault(require(\"lodash\"));\nconst async_1 = __importDefault(require(\"async\"));\nconst bowser_1 = __importDefault(require(\"bowser\"));\nconst selector_1 = require(\"./selector\");\nObject.defineProperty(exports, \"compileDocumentSelector\", { enumerable: true, get: function () { return selector_1.compileDocumentSelector; } });\nconst boolean_point_in_polygon_1 = __importDefault(require(\"@turf/boolean-point-in-polygon\"));\nconst intersect_1 = __importDefault(require(\"@turf/intersect\"));\nconst boolean_crosses_1 = __importDefault(require(\"@turf/boolean-crosses\"));\nconst boolean_within_1 = __importDefault(require(\"@turf/boolean-within\"));\nconst IndexedDb_1 = __importDefault(require(\"./IndexedDb\"));\nconst WebSQLDb_1 = __importDefault(require(\"./WebSQLDb\"));\nconst LocalStorageDb_1 = __importDefault(require(\"./LocalStorageDb\"));\nconst MemoryDb_1 = __importDefault(require(\"./MemoryDb\"));\nconst HybridDb_1 = __importDefault(require(\"./HybridDb\"));\n// Test window.localStorage\nfunction isLocalStorageSupported() {\n    if (!window.localStorage) {\n        return false;\n    }\n    try {\n        window.localStorage.setItem(\"test\", \"test\");\n        window.localStorage.removeItem(\"test\");\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n}\n// Select appropriate local database, prefering IndexedDb, then WebSQLDb, then LocalStorageDb, then MemoryDb\nfunction autoselectLocalDb(options, success, error) {\n    var _a;\n    // Get browser capabilities\n    const { browser } = bowser_1.default;\n    // Browsers with no localStorage support don't deserve anything better than a MemoryDb\n    if (!isLocalStorageSupported()) {\n        return new MemoryDb_1.default(options, success);\n    }\n    // Always use WebSQL in cordova\n    if (window[\"cordova\"]) {\n        if (((_a = window[\"device\"]) === null || _a === void 0 ? void 0 : _a.platform) === \"iOS\" && window[\"sqlitePlugin\"]) {\n            console.log(\"Selecting WebSQLDb(sqlite) for Cordova\");\n            options.storage = \"sqlite\";\n            return new WebSQLDb_1.default(options, success, error);\n        }\n        else {\n            console.log(\"Selecting else WebSQLDb for Cordova\");\n            // WebSQLDb must success in Cordova\n            return new WebSQLDb_1.default(options, success, error);\n        }\n    }\n    // Use IndexedDb for ios, Safari\n    if (browser.ios || browser.safari) {\n        // Fallback to IndexedDb\n        return new IndexedDb_1.default(options, success, (err) => {\n            console.log(\"Failed to create IndexedDb: \" + (err ? err.message : undefined));\n            // Create memory db instead\n            return new MemoryDb_1.default(options, success);\n        });\n    }\n    // Use WebSQL in Android, Chrome,  Opera, Blackberry if supports it\n    if (browser.android || browser.chrome || browser.opera || browser.blackberry) {\n        if (typeof window[\"openDatabase\"] === \"function\") {\n            console.log(\"Selecting WebSQLDb for browser\");\n            return new WebSQLDb_1.default(options, success, (err) => {\n                console.log(\"Failed to create WebSQLDb: \" + (err ? err.message : undefined));\n                // Fallback to IndexedDb\n                return new IndexedDb_1.default(options, success, (err) => {\n                    console.log(\"Failed to create IndexedDb: \" + (err ? err.message : undefined));\n                    // Create memory db instead\n                    return new MemoryDb_1.default(options, success);\n                });\n            });\n        }\n        else {\n            // Fallback to IndexedDb\n            console.log(\"Selecting IndexedDb for browser as WebSQL not supported\");\n            return new IndexedDb_1.default(options, success, (err) => {\n                console.log(\"Failed to create IndexedDb: \" + (err ? err.message : undefined));\n                // Create memory db instead\n                return new MemoryDb_1.default(options, success);\n            });\n        }\n    }\n    // Use IndexedDb on Firefox >= 16\n    if (browser.firefox && browser.version >= 16) {\n        console.log(\"Selecting IndexedDb for browser\");\n        return new IndexedDb_1.default(options, success, (err) => {\n            console.log(\"Failed to create IndexedDb: \" + (err ? err.message : undefined));\n            // Create memory db instead\n            return new MemoryDb_1.default(options, success);\n        });\n    }\n    // Use Local Storage otherwise\n    console.log(\"Selecting LocalStorageDb for fallback\");\n    return new LocalStorageDb_1.default(options, success, error);\n}\nexports.autoselectLocalDb = autoselectLocalDb;\n// Migrates a local database's pending upserts and removes from one database to another\n// Useful for upgrading from one type of database to another\nfunction migrateLocalDb(fromDb, toDb, success, error) {\n    // Migrate collection using a HybridDb\n    const hybridDb = new HybridDb_1.default(fromDb, toDb);\n    for (let name in fromDb.collections) {\n        const col = fromDb.collections[name];\n        if (toDb[name]) {\n            hybridDb.addCollection(name);\n        }\n    }\n    return hybridDb.upload(success, error);\n}\nexports.migrateLocalDb = migrateLocalDb;\n/** Clone a local database collection's caches, pending upserts and removes from one database to another\n * Useful for making a replica */\nfunction cloneLocalDb(fromDb, toDb, success, error) {\n    let name;\n    for (name in fromDb.collections) {\n        // TODO Assumes synchronous addCollection\n        const col = fromDb.collections[name];\n        if (!toDb[name]) {\n            toDb.addCollection(name);\n        }\n    }\n    // First cache all data\n    return async_1.default.each(lodash_1.default.values(fromDb.collections), ((fromCol, cb) => {\n        const toCol = toDb[fromCol.name];\n        // Get all items\n        return fromCol.find({}).fetch((items) => {\n            // Seed items\n            return toCol.seed(items, () => {\n                // Copy upserts\n                return fromCol.pendingUpserts((upserts) => {\n                    return toCol.upsert(lodash_1.default.map(upserts, \"doc\"), lodash_1.default.map(upserts, \"base\"), () => {\n                        // Copy removes\n                        return fromCol.pendingRemoves((removes) => {\n                            return async_1.default.eachSeries(removes, ((remove, cb2) => {\n                                return toCol.remove(remove, () => {\n                                    return cb2();\n                                }, cb2);\n                            }), cb);\n                        }, cb);\n                    }, cb);\n                }, cb);\n            }, cb);\n        }, cb);\n    }), (err) => {\n        if (err) {\n            return error(err);\n        }\n        return success();\n    });\n}\nexports.cloneLocalDb = cloneLocalDb;\n/** Clone a local database collection's caches, pending upserts and removes from one database to another\n * Useful for making a replica */\nfunction cloneLocalCollection(fromCol, toCol, success, error) {\n    // Get all items\n    return fromCol.find({}).fetch((items) => {\n        // Seed items\n        return toCol.seed(items, () => {\n            // Copy upserts\n            return fromCol.pendingUpserts((upserts) => {\n                return toCol.upsert(lodash_1.default.map(upserts, \"doc\"), lodash_1.default.map(upserts, \"base\"), () => {\n                    // Copy removes\n                    return fromCol.pendingRemoves((removes) => {\n                        const iterator = (remove, cb2) => {\n                            return toCol.remove(remove, () => {\n                                return cb2();\n                            }, cb2);\n                        };\n                        return async_1.default.eachSeries(removes, iterator, (err) => {\n                            if (err) {\n                                return error(err);\n                            }\n                            return success();\n                        });\n                    }, error);\n                }, error);\n            }, error);\n        }, error);\n    }, error);\n}\nexports.cloneLocalCollection = cloneLocalCollection;\n// Processes a find with sorting and filtering and limiting\nfunction processFind(items, selector, options) {\n    let filtered = lodash_1.default.filter(items, (0, selector_1.compileDocumentSelector)(selector));\n    // Handle geospatial operators\n    filtered = processNearOperator(selector, filtered);\n    filtered = processGeoIntersectsOperator(selector, filtered);\n    if (options && options.sort) {\n        filtered.sort((0, selector_1.compileSort)(options.sort));\n    }\n    if (options && options.skip) {\n        filtered = lodash_1.default.slice(filtered, options.skip);\n    }\n    if (options && options.limit) {\n        filtered = lodash_1.default.take(filtered, options.limit);\n    }\n    // Apply fields if present\n    if (options && options.fields) {\n        filtered = exports.filterFields(filtered, options.fields);\n    }\n    return filtered;\n}\nexports.processFind = processFind;\n/** Include/exclude fields in mongo-style */\nfunction filterFields(items, fields = {}) {\n    // Handle trivial case\n    if (lodash_1.default.keys(fields).length === 0) {\n        return items;\n    }\n    // For each item\n    return lodash_1.default.map(items, function (item) {\n        let field, obj, path, pathElem;\n        const newItem = {};\n        if (lodash_1.default.first(lodash_1.default.values(fields)) === 1) {\n            // Include fields\n            for (field of lodash_1.default.keys(fields).concat([\"_id\"])) {\n                path = field.split(\".\");\n                // Determine if path exists\n                obj = item;\n                for (pathElem of path) {\n                    if (obj) {\n                        obj = obj[pathElem];\n                    }\n                }\n                if (obj == null) {\n                    continue;\n                }\n                // Go into path, creating as necessary\n                let from = item;\n                let to = newItem;\n                for (pathElem of lodash_1.default.initial(path)) {\n                    to[pathElem] = to[pathElem] || {};\n                    // Move inside\n                    to = to[pathElem];\n                    from = from[pathElem];\n                }\n                // Copy value\n                to[lodash_1.default.last(path)] = from[lodash_1.default.last(path)];\n            }\n            return newItem;\n        }\n        else {\n            // Deep clone as we will be deleting keys from item to exclude fields\n            item = lodash_1.default.cloneDeep(item);\n            // Exclude fields\n            for (field of lodash_1.default.keys(fields)) {\n                path = field.split(\".\");\n                // Go inside path\n                obj = item;\n                for (pathElem of lodash_1.default.initial(path)) {\n                    if (obj) {\n                        obj = obj[pathElem];\n                    }\n                }\n                // If not there, don't exclude\n                if (obj == null) {\n                    continue;\n                }\n                delete obj[lodash_1.default.last(path)];\n            }\n            return item;\n        }\n    });\n}\nexports.filterFields = filterFields;\n// Creates a unique identifier string\nfunction createUid() {\n    return \"xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n        const r = (Math.random() * 16) | 0;\n        const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\nexports.createUid = createUid;\nfunction processNearOperator(selector, list) {\n    for (var key in selector) {\n        var value = selector[key];\n        if (value != null && value[\"$near\"]) {\n            var geo = value[\"$near\"][\"$geometry\"];\n            if (geo.type !== \"Point\") {\n                break;\n            }\n            list = lodash_1.default.filter(list, (doc) => doc[key] && doc[key].type === \"Point\");\n            // Get distances\n            let distances = lodash_1.default.map(list, (doc) => ({\n                doc,\n                distance: getDistanceFromLatLngInM(geo.coordinates[1], geo.coordinates[0], doc[key].coordinates[1], doc[key].coordinates[0])\n            }));\n            // Filter non-points\n            distances = lodash_1.default.filter(distances, (item) => item.distance >= 0);\n            // Sort by distance\n            distances = lodash_1.default.sortBy(distances, \"distance\");\n            // Filter by maxDistance\n            if (value[\"$near\"][\"$maxDistance\"]) {\n                distances = lodash_1.default.filter(distances, (item) => item.distance <= value[\"$near\"][\"$maxDistance\"]);\n            }\n            // Extract docs\n            list = lodash_1.default.map(distances, \"doc\");\n        }\n    }\n    return list;\n}\nfunction pointInPolygon(point, polygon) {\n    return (0, boolean_point_in_polygon_1.default)(point, polygon);\n}\nfunction polygonIntersection(polygon1, polygon2) {\n    return (0, intersect_1.default)(polygon1, polygon2) != null;\n}\n// From http://www.movable-type.co.uk/scripts/latlong.html\nfunction getDistanceFromLatLngInM(lat1, lng1, lat2, lng2) {\n    const R = 6370986; // Radius of the earth in m\n    const dLat = deg2rad(lat2 - lat1); // deg2rad below\n    const dLng = deg2rad(lng2 - lng1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const d = R * c; // Distance in m\n    return d;\n}\nfunction deg2rad(deg) {\n    return deg * (Math.PI / 180);\n}\nfunction processGeoIntersectsOperator(selector, list) {\n    for (var key in selector) {\n        const value = selector[key];\n        if (value != null && value[\"$geoIntersects\"]) {\n            var geo = value[\"$geoIntersects\"][\"$geometry\"];\n            // Can only test intersection with polygon\n            if (geo.type !== \"Polygon\") {\n                break;\n            }\n            // Check within for each\n            list = lodash_1.default.filter(list, function (doc) {\n                // Ignore if null\n                if (!doc[key]) {\n                    return false;\n                }\n                // Check point or polygon\n                if (doc[key].type === \"Point\") {\n                    return pointInPolygon(doc[key], geo);\n                }\n                else if ([\"Polygon\", \"MultiPolygon\"].includes(doc[key].type)) {\n                    return polygonIntersection(doc[key], geo);\n                }\n                else if (doc[key].type === \"LineString\") {\n                    return (0, boolean_crosses_1.default)(doc[key], geo) || (0, boolean_within_1.default)(doc[key], geo);\n                }\n                else if (doc[key].type === \"MultiLineString\") {\n                    // Bypass deficiencies in turf.js by splitting it up\n                    for (let line of doc[key].coordinates) {\n                        const lineGeo = { type: \"LineString\", coordinates: line };\n                        if ((0, boolean_crosses_1.default)(lineGeo, geo) || (0, boolean_within_1.default)(lineGeo, geo)) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n            });\n        }\n    }\n    return list;\n}\n/** Tidy up upsert parameters to always be a list of { doc: <doc>, base: <base> },\n * doing basic error checking and making sure that _id is present\n * Returns [items, success, error]\n */\nfunction regularizeUpsert(docs, bases, success, error) {\n    // Handle case of bases not present\n    if (lodash_1.default.isFunction(bases)) {\n        ;\n        [bases, success, error] = [undefined, bases, success];\n    }\n    // Handle single upsert\n    if (!lodash_1.default.isArray(docs)) {\n        docs = [docs];\n        bases = [bases];\n    }\n    else {\n        bases = bases || [];\n    }\n    // Make into list of { doc: .., base: }\n    const items = lodash_1.default.map(docs, (doc, i) => ({\n        doc,\n        base: i < bases.length ? bases[i] : undefined\n    }));\n    // Set _id\n    for (let item of items) {\n        if (!item.doc._id) {\n            item.doc._id = exports.createUid();\n        }\n        if (item.base && !item.base._id) {\n            throw new Error(\"Base needs _id\");\n        }\n        if (item.base && item.base._id !== item.doc._id) {\n            throw new Error(\"Base needs same _id\");\n        }\n    }\n    return [items, success, error];\n}\nexports.regularizeUpsert = regularizeUpsert;\n"]},"metadata":{},"sourceType":"script"}