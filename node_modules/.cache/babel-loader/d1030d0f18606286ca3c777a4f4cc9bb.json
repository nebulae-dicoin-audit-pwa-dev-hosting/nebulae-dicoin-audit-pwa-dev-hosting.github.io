{"ast":null,"code":"import _objectSpread from\"/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useContext}from'react';import{useSprings,animated}from'@react-spring/web';import{useDrag}from'@use-gesture/react';import{makeStyles}from'@mui/styles';import TravelContext from'../travel-context/TravelContext';import BtnActionsExecution from'./BtnActionsExecution';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var useStyles=makeStyles({/**/deck:{position:'absolute',top:'0',left:'0',right:'0',willChange:'transform',background:'white',zIndex:'10','& > div':{touchAction:'none',willChange:'transform'}},deckTwo:{position:'absolute',bottom:'0',left:'0',right:'0',willChange:'transform',background:'white',zIndex:'10','& > div':{touchAction:'none',willChange:'transform'}}});var to=function to(i){return{x:0,y:i*-4,scale:1,rot:-10+Math.random()*20,delay:i*100};};var from=function from(_i){return{x:0,rot:0,scale:1.5,y:_i===0?-1000:1000};};export default function Deck(prop){var setIndexDragModified=prop.setIndexDragModified,accumulatorTimeThreshold=prop.accumulatorTimeThreshold;var _useContext=useContext(TravelContext),cards=_useContext.cards,hadleCloseBtnDrag=_useContext.hadleCloseBtnDrag,openCard=_useContext.openCard,displayBtnDisabled=_useContext.displayBtnDisabled,setDisplayBtnDisabled=_useContext.setDisplayBtnDisabled,progressLoading=_useContext.progressLoading,setProgressLoading=_useContext.setProgressLoading,setAvailableHeight=_useContext.setAvailableHeight;var classes=useStyles();var _useState=useState(function(){return new Set();}),_useState2=_slicedToArray(_useState,1),gone=_useState2[0];var _useSprings=useSprings(cards.length,function(i){return _objectSpread(_objectSpread({},to(i)),{},{from:from(i)});}),_useSprings2=_slicedToArray(_useSprings,2),props=_useSprings2[0],api=_useSprings2[1];if(gone.size>=1&&!displayBtnDisabled){setDisplayBtnDisabled(true);}if(progressLoading){setProgressLoading(false);}var bind=useDrag(function(_ref){var _ref$args=_slicedToArray(_ref.args,1),index=_ref$args[0],active=_ref.active,_ref$movement=_slicedToArray(_ref.movement,1),mx=_ref$movement[0],_ref$direction=_slicedToArray(_ref.direction,1),xDir=_ref$direction[0],_ref$velocity=_slicedToArray(_ref.velocity,1),vx=_ref$velocity[0];var trigger=vx>0.2;// If you flick hard enough it should trigger the card to fly out\nif(!active&&trigger)gone.add(index);// If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\napi.start(function(i){if(index!==i)return;// We're only interested in changing spring-data for the current spring\nvar isGone=gone.has(index);var x=isGone?(300+window.innerWidth)*xDir:active?mx:0;// When a card is gone it flys out left or right, otherwise goes back to zero\nvar rot=mx/100+(isGone?xDir*10*vx:0);// How much the card tilts, flicking it harder makes it rotate faster\nvar scale=active?1.1:1;// Active cards lift up a bit\nreturn{x:x,rot:rot,scale:scale,delay:undefined,config:{friction:50,tension:active?800:isGone?200:500}};});if(!active&&gone.size===cards.length&&openCard){setTimeout(function(){hadleCloseBtnDrag();gone.clear();api.start(function(i){return to(i);});},600);}if(!active&&gone.size===cards.length){setAvailableHeight(window.innerHeight-210);setIndexDragModified(0);}else if(Array.from(gone).some(function(g){return g===1;})&&!active&&index===1){setAvailableHeight(window.innerHeight-373);setIndexDragModified(1);}else if(Array.from(gone).some(function(g){return g===0;})&&!active&&index===0){setAvailableHeight(window.innerHeight-373);setIndexDragModified(0);}else if(!Array.from(gone).some(function(g){return g===1;})&&!active&&index===1){setIndexDragModified(Array.from(gone).some(function(g){return g===0;})?0:1);}else if(!Array.from(gone).some(function(g){return g===0;})&&!active&&index===0){setIndexDragModified(1);}});// Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\nreturn/*#__PURE__*/_jsx(_Fragment,{children:props.map(function(_ref2,i){var x=_ref2.x,y=_ref2.y,rot=_ref2.rot,scale=_ref2.scale;var type=i===0?'top':'bot';return/*#__PURE__*/_jsx(animated.div,{className:i===0?classes.deck:classes.deckTwo,style:{x:x,y:y},children:/*#__PURE__*/_jsx(animated.div,_objectSpread(_objectSpread({},bind(i)),{},{style:{transform:to([rot,scale])},children:/*#__PURE__*/_jsx(BtnActionsExecution,{type:type,accumulatorTimeThreshold:accumulatorTimeThreshold})}))},i);})});}","map":null,"metadata":{},"sourceType":"module"}