{"ast":null,"code":"import _ from 'lodash';\nimport moment from 'moment';\nimport RecordDA from './data-access/RecordDA';\nimport TripDA from './data-access/TripDA';\n\nclass Trip {\n  /**\n   * @param string routeCode\n   * @param string route\n   * @param string vehiclePlate\n   * @param string driverDocument\n   * @param string companyId\n   */\n  constructor(routeCode, route, vehiclePlate, driverDocument, companyId, errorReporter) {\n    const args = Array.from(arguments);\n\n    if (args.lenngth < 6 || args.some(arg => arg === undefined || arg === null)) {\n      errorReporter('ERROR_MISSING_ARGUMENTS');\n    } else {\n      this.errorReporter = errorReporter;\n      this.routeCode = routeCode;\n      this.route = route;\n      this.vehiclePlate = vehiclePlate;\n      this.driverDocument = driverDocument;\n      this.companyId = companyId;\n      this.tempState = this.buildNewState();\n      this.state = this.buildNewState();\n      this.recordSeq = 0;\n      this.records = [];\n    }\n  }\n\n  updateTrip() {\n    if (this._id) return TripDA.updateTrip(this._id, {\n      tempState: this.tempState,\n      state: this.state\n    });\n    return null;\n  }\n\n  buildRecordId() {\n    const companyId = (this.companyId || '').replace('-', '');\n    const plate = this.vehiclePlate;\n    const currentDate = this.recordSeq === 1 ? new Date(this.state.timestamp) : new Date(this.tempState.timestamp);\n    const mm = currentDate.getMonth() + 1;\n    const dd = currentDate.getDate();\n    const year = currentDate.getFullYear();\n    const hour = currentDate.getHours();\n    const minutes = currentDate.getMinutes();\n    const seconds = currentDate.getSeconds();\n    const milisegundos = currentDate.getMilliseconds();\n    return `${companyId}${plate}${(dd > 9 ? '' : '0') + dd}${(mm > 9 ? '' : '0') + mm}${year}${(hour > 9 ? '' : '0') + hour}${(minutes > 9 ? '' : '0') + minutes}${(seconds > 9 ? '' : '0') + seconds}`;\n  }\n\n  buildNewState() {\n    let stateToBaseOn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let propertiesToSet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return _.cloneDeep({\n      geolocationPosition: null,\n      frontDoorOpen: null,\n      backDoorOpen: null,\n      frontDoorInput: 0,\n      frontDoorOutput: 0,\n      backDoorInput: 0,\n      backDoorOutput: 0,\n      traveledDistance: 0,\n      ...stateToBaseOn,\n      ...propertiesToSet,\n      timestamp: Date.now()\n    });\n  }\n\n  getAndResetTempState() {\n    const tempStateToReturn = this.tempState;\n    this.tempState = this.buildNewState(tempStateToReturn, {\n      frontDoorInput: 0,\n      frontDoorOutput: 0,\n      backDoorInput: 0,\n      backDoorOutput: 0,\n      traveledDistance: 0\n    });\n    this.updateTrip();\n    return tempStateToReturn;\n  }\n\n  reportGeolocationPosition(geolocationPosition) {\n    let geoLoc;\n    let traveledDistance = 0;\n\n    if (geolocationPosition === null || geolocationPosition === undefined) {\n      // this.errorReporter('INVALID_GEOLOCATION');\n      console.log('INVALID_GEOLOCATION.noData', {\n        geolocationPosition\n      });\n    } else {\n      const {\n        timestamp,\n        coords: {\n          accuracy,\n          altitude,\n          altitudeAccuracy,\n          dop,\n          heading,\n          latitude,\n          longitude,\n          speed\n        }\n      } = geolocationPosition;\n      const mandatoryProps = [timestamp, latitude, longitude, speed, dop];\n\n      if (mandatoryProps.some(prop => prop === undefined || prop === null)) {\n        // this.errorReporter('INVALID_GEOLOCATION');\n        console.log('INVALID_GEOLOCATION.mandatoryProps validation failed:', {\n          timestamp,\n          latitude,\n          longitude,\n          speed,\n          dop\n        });\n      } else {\n        geoLoc = {\n          timestamp,\n          coords: {\n            accuracy,\n            altitude,\n            altitudeAccuracy,\n            dop,\n            heading,\n            latitude,\n            longitude,\n            speed\n          }\n        };\n        traveledDistance = ((this.tempState || {}).geolocationPosition || {}).coords && !_.isEqual(((this.tempState || {}).geolocationPosition || {}).coords, geoLoc.coords) ? this.distance(geoLoc.coords, ((this.tempState || {}).geolocationPosition || {}).coords) : 0;\n      }\n    }\n\n    this.tempState.traveledDistance += traveledDistance;\n    this.tempState.geolocationPosition = geoLoc;\n    this.state.traveledDistance += traveledDistance;\n    this.state.geolocationPosition = geoLoc;\n    this.updateTrip();\n  }\n\n  distance(coord1, coord2) {\n    const {\n      latitude: lat1 = 0,\n      longitude: lon1 = 0\n    } = coord1 || {};\n    const {\n      latitude: lat2 = 0,\n      longitude: lon2 = 0\n    } = coord2 || {};\n\n    if (lat1 === lat2 && lon1 === lon2) {\n      return false;\n    }\n\n    const radlat1 = Math.PI * lat1 / 180;\n    const radlat2 = Math.PI * lat2 / 180;\n    const theta = lon1 - lon2;\n    const radtheta = Math.PI * theta / 180;\n    let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\n    if (dist > 1) {\n      dist = 1;\n    }\n\n    dist = Math.acos(dist);\n    dist = dist * 180 / Math.PI;\n    dist = dist * 60 * 1.1515;\n    dist = Math.floor(dist * 1.609344 * 1000);\n    return dist;\n  }\n\n  reportDoorsStatus(frontDoorOpen, backDoorOpen) {\n    const args = Array.from(arguments);\n\n    if (args.lenngth < 2 || args.some(arg => arg === undefined || arg === null || typeof arg !== 'boolean')) {\n      this.errorReporter('INVALID_DOOR_STATUS');\n    } else {\n      this.tempState = { ...this.tempState,\n        ...{\n          frontDoorOpen,\n          backDoorOpen\n        }\n      };\n      this.state = { ...this.state,\n        ...{\n          frontDoorOpen,\n          backDoorOpen\n        }\n      };\n      this.updateTrip();\n    }\n  }\n\n  reportTripStoped(reason, endTimestamp) {\n    const newData = {\n      tripState: 'FINALIZED',\n      reason,\n      endTimestamp\n    };\n    this.tempState = { ...this.tempState,\n      ...newData\n    };\n    this.state = { ...this.state,\n      ...newData\n    };\n    this.finalizeTrip(newData);\n  }\n\n  finalizeTrip(newData) {\n    if (this._id) return TripDA.finalizeTrip(this._id, newData);\n    return null;\n  }\n\n  reportPassengerFlow(frontDoorInput, frontDoorOutput, backDoorInput, backDoorOutput) {\n    const args = Array.from(arguments);\n\n    if (args.lenngth < 4 || args.some(arg => arg === undefined || arg === null || typeof arg !== 'number' || arg < 0)) {\n      this.errorReporter('INVALID_PASSENGER_FLOW');\n    } else {\n      this.tempState.frontDoorInput += frontDoorInput;\n      this.tempState.frontDoorOutput += frontDoorOutput;\n      this.tempState.backDoorInput += backDoorInput;\n      this.tempState.backDoorOutput += backDoorOutput;\n      this.state.frontDoorInput += frontDoorInput;\n      this.state.frontDoorOutput += frontDoorOutput;\n      this.state.backDoorInput += backDoorInput;\n      this.state.backDoorOutput += backDoorOutput;\n      this.updateTrip();\n    }\n  }\n\n  generateRecord() {\n    const tempState = this.getAndResetTempState();\n    this.recordSeq += 1;\n    const timestamp = this.recordSeq === 1 ? this.state.timestamp : Date.now();\n    const record = {\n      _id: this.buildRecordId(timestamp),\n      state: 'PERSISTED',\n      type: 'RECORD',\n      recordSeq: this.recordSeq,\n      timestamp,\n      tripTempState: tempState,\n      stats: {\n        retryAttempt: 0,\n        attempts: []\n      }\n    };\n    this.records.push(record);\n    const extendedRecord = this.buildRecordAndPersist(record);\n    this.incRecorSeq();\n    return {\n      record,\n      extendedRecord\n    };\n  }\n\n  generateFinalRecord(endTimestamp, endState) {\n    const tempState = this.getAndResetTempState();\n    this.recordSeq += 1;\n    const timestamp = this.recordSeq === 1 ? this.state.timestamp : Date.now();\n    const record = {\n      _id: this.buildRecordId(timestamp),\n      state: 'PERSISTED',\n      type: 'RECORD',\n      recordSeq: this.recordSeq,\n      endState,\n      endTimestamp,\n      timestamp,\n      tripTempState: tempState,\n      stats: {\n        retryAttempt: 0,\n        attempts: []\n      }\n    };\n    this.records.push(record);\n    const extendedRecord = this.buildRecordAndPersist(record);\n    this.incRecorSeq();\n    return {\n      record,\n      extendedRecord\n    };\n  }\n\n  incRecorSeq() {\n    if (this._id) {\n      TripDA.updateTrip(this._id, {\n        recordSeq: this.recordSeq\n      });\n    }\n  }\n\n  addNote(note) {\n    const record = {\n      _id: `${this.buildRecordId()}-NOTE`,\n      type: 'NOTE',\n      timestamp: Date.now(),\n      note\n    };\n    this.records.push(record);\n    const extendedRecord = this.buildRecordAndPersist(record);\n    return {\n      record,\n      extendedRecord\n    };\n  }\n\n  buildRecordAndPersist(record) {\n    const {\n      state,\n      _id,\n      type,\n      timestamp,\n      tripTempState = {},\n      note,\n      endTimestamp,\n      endState\n    } = record;\n    const currentRecord = {\n      _id,\n      serviceId: this._id,\n      state,\n      type,\n      timestamp,\n      recordSeq: this.recordSeq,\n      tripState: type === 'RECORD' ? {\n        endTimestamp,\n        traveledDistance: this.state.traveledDistance,\n        tempStateTraveledDistance: tripTempState.traveledDistance,\n        tempStateTimestamp: tripTempState.timestamp\n      } : undefined,\n      payload: type === 'RECORD' ? {\n        geolocationPosition: tripTempState.geolocationPosition,\n        frontDoorInput: tripTempState.frontDoorInput,\n        frontDoorOutput: tripTempState.frontDoorOutput,\n        backDoorInput: tripTempState.backDoorInput,\n        backDoorOutput: tripTempState.backDoorOutput,\n        frontDoorOpen: tripTempState.frontDoorOpen,\n        backDoorOpen: tripTempState.backDoorOpen\n      } : {\n        timestamp,\n        note\n      },\n      authorityPayload: type === 'RECORD' ? {\n        idViaje: this._id,\n        cedula: this.driverDocument,\n        codigoRuta: this.route === 'NA' ? '' : this.routeCode,\n        ruta: this.route === 'NA' ? 'NA' : this.route,\n        nit: this.companyId,\n        placa: this.vehiclePlate,\n        inicio_viaje: this.route === 'NA' ? '' : moment(this.state.timestamp).format('DD/MM/YYYY HH:mm:ss'),\n        fin_viaje: this.route === 'NA' ? '' : endTimestamp ? moment(endTimestamp).format('DD/MM/YYYY HH:mm:ss') : '',\n        estado: this.route === 'NA' ? '' : endState === 'S' ? '1' : '0',\n        eventos: [{\n          fecha: moment(timestamp).format('YYYY/MM/DD').replaceAll('/', ''),\n          hora: moment(timestamp).format('HH:mm:ss').replaceAll(':', ''),\n          dop: String(tripTempState.geolocationPosition.coords.dop).replaceAll('.', ','),\n          longitud: String(tripTempState.geolocationPosition.coords.longitude.toFixed(6)).replaceAll('.', ','),\n          latitud: String(tripTempState.geolocationPosition.coords.latitude.toFixed(6)).replaceAll('.', ','),\n          velocidad: tripTempState.geolocationPosition.coords.speed,\n          puerta: [{\n            idPuerta: 0,\n            estado: tripTempState.frontDoorOpen ? 0 : 1,\n            ingresos: tripTempState.frontDoorInput,\n            salidas: tripTempState.frontDoorOutput\n          }, {\n            idPuerta: 1,\n            estado: tripTempState.backDoorOpen ? 0 : 1,\n            ingresos: tripTempState.backDoorInput,\n            salidas: tripTempState.backDoorOutput\n          }]\n        }]\n      } : undefined,\n      stats: type === 'RECORD' ? {\n        retryAttempt: 0,\n        attempts: []\n      } : undefined\n    };\n    RecordDA.insertRecord(currentRecord);\n    return currentRecord;\n  }\n\n}\n/**\n * @returns {Trip}\n */\n\n\nexport default Trip;","map":{"version":3,"sources":["/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/src/app/main/travels/tools/dicoin-engine/Trip.js"],"names":["_","moment","RecordDA","TripDA","Trip","constructor","routeCode","route","vehiclePlate","driverDocument","companyId","errorReporter","args","Array","from","arguments","lenngth","some","arg","undefined","tempState","buildNewState","state","recordSeq","records","updateTrip","_id","buildRecordId","replace","plate","currentDate","Date","timestamp","mm","getMonth","dd","getDate","year","getFullYear","hour","getHours","minutes","getMinutes","seconds","getSeconds","milisegundos","getMilliseconds","stateToBaseOn","propertiesToSet","cloneDeep","geolocationPosition","frontDoorOpen","backDoorOpen","frontDoorInput","frontDoorOutput","backDoorInput","backDoorOutput","traveledDistance","now","getAndResetTempState","tempStateToReturn","reportGeolocationPosition","geoLoc","console","log","coords","accuracy","altitude","altitudeAccuracy","dop","heading","latitude","longitude","speed","mandatoryProps","prop","isEqual","distance","coord1","coord2","lat1","lon1","lat2","lon2","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","floor","reportDoorsStatus","reportTripStoped","reason","endTimestamp","newData","tripState","finalizeTrip","reportPassengerFlow","generateRecord","record","type","tripTempState","stats","retryAttempt","attempts","push","extendedRecord","buildRecordAndPersist","incRecorSeq","generateFinalRecord","endState","addNote","note","currentRecord","serviceId","tempStateTraveledDistance","tempStateTimestamp","payload","authorityPayload","idViaje","cedula","codigoRuta","ruta","nit","placa","inicio_viaje","format","fin_viaje","estado","eventos","fecha","replaceAll","hora","String","longitud","toFixed","latitud","velocidad","puerta","idPuerta","ingresos","salidas","insertRecord"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,MAAMC,IAAN,CAAW;AACT;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,YAAnB,EAAiCC,cAAjC,EAAiDC,SAAjD,EAA4DC,aAA5D,EAA2E;AACpF,UAAMC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWC,SAAX,CAAb;;AACA,QAAIH,IAAI,CAACI,OAAL,GAAe,CAAf,IAAoBJ,IAAI,CAACK,IAAL,CAAWC,GAAD,IAASA,GAAG,KAAKC,SAAR,IAAqBD,GAAG,KAAK,IAAhD,CAAxB,EAA+E;AAC7EP,MAAAA,aAAa,CAAC,yBAAD,CAAb;AACD,KAFD,MAEO;AACL,WAAKA,aAAL,GAAqBA,aAArB;AACA,WAAKL,SAAL,GAAiBA,SAAjB;AACA,WAAKC,KAAL,GAAaA,KAAb;AACA,WAAKC,YAAL,GAAoBA,YAApB;AACA,WAAKC,cAAL,GAAsBA,cAAtB;AACA,WAAKC,SAAL,GAAiBA,SAAjB;AACA,WAAKU,SAAL,GAAiB,KAAKC,aAAL,EAAjB;AACA,WAAKC,KAAL,GAAa,KAAKD,aAAL,EAAb;AACA,WAAKE,SAAL,GAAiB,CAAjB;AACA,WAAKC,OAAL,GAAe,EAAf;AACD;AACF;;AAEDC,EAAAA,UAAU,GAAG;AACX,QAAI,KAAKC,GAAT,EACE,OAAOvB,MAAM,CAACsB,UAAP,CAAkB,KAAKC,GAAvB,EAA4B;AACjCN,MAAAA,SAAS,EAAE,KAAKA,SADiB;AAEjCE,MAAAA,KAAK,EAAE,KAAKA;AAFqB,KAA5B,CAAP;AAKF,WAAO,IAAP;AACD;;AAEDK,EAAAA,aAAa,GAAG;AACd,UAAMjB,SAAS,GAAG,CAAC,KAAKA,SAAL,IAAkB,EAAnB,EAAuBkB,OAAvB,CAA+B,GAA/B,EAAoC,EAApC,CAAlB;AACA,UAAMC,KAAK,GAAG,KAAKrB,YAAnB;AACA,UAAMsB,WAAW,GACf,KAAKP,SAAL,KAAmB,CAAnB,GAAuB,IAAIQ,IAAJ,CAAS,KAAKT,KAAL,CAAWU,SAApB,CAAvB,GAAwD,IAAID,IAAJ,CAAS,KAAKX,SAAL,CAAeY,SAAxB,CAD1D;AAGA,UAAMC,EAAE,GAAGH,WAAW,CAACI,QAAZ,KAAyB,CAApC;AACA,UAAMC,EAAE,GAAGL,WAAW,CAACM,OAAZ,EAAX;AACA,UAAMC,IAAI,GAAGP,WAAW,CAACQ,WAAZ,EAAb;AACA,UAAMC,IAAI,GAAGT,WAAW,CAACU,QAAZ,EAAb;AACA,UAAMC,OAAO,GAAGX,WAAW,CAACY,UAAZ,EAAhB;AACA,UAAMC,OAAO,GAAGb,WAAW,CAACc,UAAZ,EAAhB;AACA,UAAMC,YAAY,GAAGf,WAAW,CAACgB,eAAZ,EAArB;AACA,WAAQ,GAAEpC,SAAU,GAAEmB,KAAM,GAAE,CAACM,EAAE,GAAG,CAAL,GAAS,EAAT,GAAc,GAAf,IAAsBA,EAAG,GAAE,CAACF,EAAE,GAAG,CAAL,GAAS,EAAT,GAAc,GAAf,IAAsBA,EAAG,GAAEI,IAAK,GACvF,CAACE,IAAI,GAAG,CAAP,GAAW,EAAX,GAAgB,GAAjB,IAAwBA,IACzB,GAAE,CAACE,OAAO,GAAG,CAAV,GAAc,EAAd,GAAmB,GAApB,IAA2BA,OAAQ,GAAE,CAACE,OAAO,GAAG,CAAV,GAAc,EAAd,GAAmB,GAApB,IAA2BA,OAAQ,EAF3E;AAGD;;AAEDtB,EAAAA,aAAa,GAA2C;AAAA,QAA1C0B,aAA0C,uEAA1B,EAA0B;AAAA,QAAtBC,eAAsB,uEAAJ,EAAI;AACtD,WAAOhD,CAAC,CAACiD,SAAF,CAAY;AACjBC,MAAAA,mBAAmB,EAAE,IADJ;AAEjBC,MAAAA,aAAa,EAAE,IAFE;AAGjBC,MAAAA,YAAY,EAAE,IAHG;AAIjBC,MAAAA,cAAc,EAAE,CAJC;AAKjBC,MAAAA,eAAe,EAAE,CALA;AAMjBC,MAAAA,aAAa,EAAE,CANE;AAOjBC,MAAAA,cAAc,EAAE,CAPC;AAQjBC,MAAAA,gBAAgB,EAAE,CARD;AASjB,SAAGV,aATc;AAUjB,SAAGC,eAVc;AAWjBhB,MAAAA,SAAS,EAAED,IAAI,CAAC2B,GAAL;AAXM,KAAZ,CAAP;AAaD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,UAAMC,iBAAiB,GAAG,KAAKxC,SAA/B;AACA,SAAKA,SAAL,GAAiB,KAAKC,aAAL,CAAmBuC,iBAAnB,EAAsC;AACrDP,MAAAA,cAAc,EAAE,CADqC;AAErDC,MAAAA,eAAe,EAAE,CAFoC;AAGrDC,MAAAA,aAAa,EAAE,CAHsC;AAIrDC,MAAAA,cAAc,EAAE,CAJqC;AAKrDC,MAAAA,gBAAgB,EAAE;AALmC,KAAtC,CAAjB;AAOA,SAAKhC,UAAL;AACA,WAAOmC,iBAAP;AACD;;AAEDC,EAAAA,yBAAyB,CAACX,mBAAD,EAAsB;AAC7C,QAAIY,MAAJ;AACA,QAAIL,gBAAgB,GAAG,CAAvB;;AAEA,QAAIP,mBAAmB,KAAK,IAAxB,IAAgCA,mBAAmB,KAAK/B,SAA5D,EAAuE;AACrE;AACA4C,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0C;AAAEd,QAAAA;AAAF,OAA1C;AACD,KAHD,MAGO;AACL,YAAM;AACJlB,QAAAA,SADI;AAEJiC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,QAAF;AAAYC,UAAAA,QAAZ;AAAsBC,UAAAA,gBAAtB;AAAwCC,UAAAA,GAAxC;AAA6CC,UAAAA,OAA7C;AAAsDC,UAAAA,QAAtD;AAAgEC,UAAAA,SAAhE;AAA2EC,UAAAA;AAA3E;AAFJ,UAGFvB,mBAHJ;AAIA,YAAMwB,cAAc,GAAG,CAAC1C,SAAD,EAAYuC,QAAZ,EAAsBC,SAAtB,EAAiCC,KAAjC,EAAwCJ,GAAxC,CAAvB;;AACA,UAAIK,cAAc,CAACzD,IAAf,CAAqB0D,IAAD,IAAUA,IAAI,KAAKxD,SAAT,IAAsBwD,IAAI,KAAK,IAA7D,CAAJ,EAAwE;AACtE;AACAZ,QAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ,EAAqE;AACnEhC,UAAAA,SADmE;AAEnEuC,UAAAA,QAFmE;AAGnEC,UAAAA,SAHmE;AAInEC,UAAAA,KAJmE;AAKnEJ,UAAAA;AALmE,SAArE;AAOD,OATD,MASO;AACLP,QAAAA,MAAM,GAAG;AACP9B,UAAAA,SADO;AAEPiC,UAAAA,MAAM,EAAE;AACNC,YAAAA,QADM;AAENC,YAAAA,QAFM;AAGNC,YAAAA,gBAHM;AAINC,YAAAA,GAJM;AAKNC,YAAAA,OALM;AAMNC,YAAAA,QANM;AAONC,YAAAA,SAPM;AAQNC,YAAAA;AARM;AAFD,SAAT;AAcAhB,QAAAA,gBAAgB,GACd,CAAC,CAAC,KAAKrC,SAAL,IAAkB,EAAnB,EAAuB8B,mBAAvB,IAA8C,EAA/C,EAAmDe,MAAnD,IACA,CAACjE,CAAC,CAAC4E,OAAF,CAAU,CAAC,CAAC,KAAKxD,SAAL,IAAkB,EAAnB,EAAuB8B,mBAAvB,IAA8C,EAA/C,EAAmDe,MAA7D,EAAqEH,MAAM,CAACG,MAA5E,CADD,GAEI,KAAKY,QAAL,CACEf,MAAM,CAACG,MADT,EAEE,CAAC,CAAC,KAAK7C,SAAL,IAAkB,EAAnB,EAAuB8B,mBAAvB,IAA8C,EAA/C,EAAmDe,MAFrD,CAFJ,GAMI,CAPN;AAQD;AACF;;AAED,SAAK7C,SAAL,CAAeqC,gBAAf,IAAmCA,gBAAnC;AACA,SAAKrC,SAAL,CAAe8B,mBAAf,GAAqCY,MAArC;AACA,SAAKxC,KAAL,CAAWmC,gBAAX,IAA+BA,gBAA/B;AACA,SAAKnC,KAAL,CAAW4B,mBAAX,GAAiCY,MAAjC;AACA,SAAKrC,UAAL;AACD;;AAEDoD,EAAAA,QAAQ,CAACC,MAAD,EAASC,MAAT,EAAiB;AACvB,UAAM;AAAER,MAAAA,QAAQ,EAAES,IAAI,GAAG,CAAnB;AAAsBR,MAAAA,SAAS,EAAES,IAAI,GAAG;AAAxC,QAA8CH,MAAM,IAAI,EAA9D;AACA,UAAM;AAAEP,MAAAA,QAAQ,EAAEW,IAAI,GAAG,CAAnB;AAAsBV,MAAAA,SAAS,EAAEW,IAAI,GAAG;AAAxC,QAA8CJ,MAAM,IAAI,EAA9D;;AACA,QAAIC,IAAI,KAAKE,IAAT,IAAiBD,IAAI,KAAKE,IAA9B,EAAoC;AAClC,aAAO,KAAP;AACD;;AACD,UAAMC,OAAO,GAAIC,IAAI,CAACC,EAAL,GAAUN,IAAX,GAAmB,GAAnC;AACA,UAAMO,OAAO,GAAIF,IAAI,CAACC,EAAL,GAAUJ,IAAX,GAAmB,GAAnC;AACA,UAAMM,KAAK,GAAGP,IAAI,GAAGE,IAArB;AACA,UAAMM,QAAQ,GAAIJ,IAAI,CAACC,EAAL,GAAUE,KAAX,GAAoB,GAArC;AACA,QAAIE,IAAI,GACNL,IAAI,CAACM,GAAL,CAASP,OAAT,IAAoBC,IAAI,CAACM,GAAL,CAASJ,OAAT,CAApB,GACAF,IAAI,CAACO,GAAL,CAASR,OAAT,IAAoBC,IAAI,CAACO,GAAL,CAASL,OAAT,CAApB,GAAwCF,IAAI,CAACO,GAAL,CAASH,QAAT,CAF1C;;AAGA,QAAIC,IAAI,GAAG,CAAX,EAAc;AACZA,MAAAA,IAAI,GAAG,CAAP;AACD;;AACDA,IAAAA,IAAI,GAAGL,IAAI,CAACQ,IAAL,CAAUH,IAAV,CAAP;AACAA,IAAAA,IAAI,GAAIA,IAAI,GAAG,GAAR,GAAeL,IAAI,CAACC,EAA3B;AACAI,IAAAA,IAAI,GAAGA,IAAI,GAAG,EAAP,GAAY,MAAnB;AACAA,IAAAA,IAAI,GAAGL,IAAI,CAACS,KAAL,CAAWJ,IAAI,GAAG,QAAP,GAAkB,IAA7B,CAAP;AACA,WAAOA,IAAP;AACD;;AAEDK,EAAAA,iBAAiB,CAAC5C,aAAD,EAAgBC,YAAhB,EAA8B;AAC7C,UAAMxC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWC,SAAX,CAAb;;AACA,QACEH,IAAI,CAACI,OAAL,GAAe,CAAf,IACAJ,IAAI,CAACK,IAAL,CAAWC,GAAD,IAASA,GAAG,KAAKC,SAAR,IAAqBD,GAAG,KAAK,IAA7B,IAAqC,OAAOA,GAAP,KAAe,SAAvE,CAFF,EAGE;AACA,WAAKP,aAAL,CAAmB,qBAAnB;AACD,KALD,MAKO;AACL,WAAKS,SAAL,GAAiB,EAAE,GAAG,KAAKA,SAAV;AAAqB,WAAG;AAAE+B,UAAAA,aAAF;AAAiBC,UAAAA;AAAjB;AAAxB,OAAjB;AACA,WAAK9B,KAAL,GAAa,EAAE,GAAG,KAAKA,KAAV;AAAiB,WAAG;AAAE6B,UAAAA,aAAF;AAAiBC,UAAAA;AAAjB;AAApB,OAAb;AACA,WAAK3B,UAAL;AACD;AACF;;AAEDuE,EAAAA,gBAAgB,CAACC,MAAD,EAASC,YAAT,EAAuB;AACrC,UAAMC,OAAO,GAAG;AAAEC,MAAAA,SAAS,EAAE,WAAb;AAA0BH,MAAAA,MAA1B;AAAkCC,MAAAA;AAAlC,KAAhB;AACA,SAAK9E,SAAL,GAAiB,EAAE,GAAG,KAAKA,SAAV;AAAqB,SAAG+E;AAAxB,KAAjB;AACA,SAAK7E,KAAL,GAAa,EAAE,GAAG,KAAKA,KAAV;AAAiB,SAAG6E;AAApB,KAAb;AAEA,SAAKE,YAAL,CAAkBF,OAAlB;AACD;;AAEDE,EAAAA,YAAY,CAACF,OAAD,EAAU;AACpB,QAAI,KAAKzE,GAAT,EAAc,OAAOvB,MAAM,CAACkG,YAAP,CAAoB,KAAK3E,GAAzB,EAA8ByE,OAA9B,CAAP;AACd,WAAO,IAAP;AACD;;AAEDG,EAAAA,mBAAmB,CAACjD,cAAD,EAAiBC,eAAjB,EAAkCC,aAAlC,EAAiDC,cAAjD,EAAiE;AAClF,UAAM5C,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWC,SAAX,CAAb;;AACA,QACEH,IAAI,CAACI,OAAL,GAAe,CAAf,IACAJ,IAAI,CAACK,IAAL,CAAWC,GAAD,IAASA,GAAG,KAAKC,SAAR,IAAqBD,GAAG,KAAK,IAA7B,IAAqC,OAAOA,GAAP,KAAe,QAApD,IAAgEA,GAAG,GAAG,CAAzF,CAFF,EAGE;AACA,WAAKP,aAAL,CAAmB,wBAAnB;AACD,KALD,MAKO;AACL,WAAKS,SAAL,CAAeiC,cAAf,IAAiCA,cAAjC;AACA,WAAKjC,SAAL,CAAekC,eAAf,IAAkCA,eAAlC;AACA,WAAKlC,SAAL,CAAemC,aAAf,IAAgCA,aAAhC;AACA,WAAKnC,SAAL,CAAeoC,cAAf,IAAiCA,cAAjC;AACA,WAAKlC,KAAL,CAAW+B,cAAX,IAA6BA,cAA7B;AACA,WAAK/B,KAAL,CAAWgC,eAAX,IAA8BA,eAA9B;AACA,WAAKhC,KAAL,CAAWiC,aAAX,IAA4BA,aAA5B;AACA,WAAKjC,KAAL,CAAWkC,cAAX,IAA6BA,cAA7B;AACA,WAAK/B,UAAL;AACD;AACF;;AAED8E,EAAAA,cAAc,GAAG;AACf,UAAMnF,SAAS,GAAG,KAAKuC,oBAAL,EAAlB;AACA,SAAKpC,SAAL,IAAkB,CAAlB;AACA,UAAMS,SAAS,GAAG,KAAKT,SAAL,KAAmB,CAAnB,GAAuB,KAAKD,KAAL,CAAWU,SAAlC,GAA8CD,IAAI,CAAC2B,GAAL,EAAhE;AACA,UAAM8C,MAAM,GAAG;AACb9E,MAAAA,GAAG,EAAE,KAAKC,aAAL,CAAmBK,SAAnB,CADQ;AAEbV,MAAAA,KAAK,EAAE,WAFM;AAGbmF,MAAAA,IAAI,EAAE,QAHO;AAIblF,MAAAA,SAAS,EAAE,KAAKA,SAJH;AAKbS,MAAAA,SALa;AAMb0E,MAAAA,aAAa,EAAEtF,SANF;AAObuF,MAAAA,KAAK,EAAE;AAAEC,QAAAA,YAAY,EAAE,CAAhB;AAAmBC,QAAAA,QAAQ,EAAE;AAA7B;AAPM,KAAf;AAUA,SAAKrF,OAAL,CAAasF,IAAb,CAAkBN,MAAlB;AAEA,UAAMO,cAAc,GAAG,KAAKC,qBAAL,CAA2BR,MAA3B,CAAvB;AACA,SAAKS,WAAL;AACA,WAAO;AAAET,MAAAA,MAAF;AAAUO,MAAAA;AAAV,KAAP;AACD;;AAEDG,EAAAA,mBAAmB,CAAChB,YAAD,EAAeiB,QAAf,EAAyB;AAC1C,UAAM/F,SAAS,GAAG,KAAKuC,oBAAL,EAAlB;AACA,SAAKpC,SAAL,IAAkB,CAAlB;AACA,UAAMS,SAAS,GAAG,KAAKT,SAAL,KAAmB,CAAnB,GAAuB,KAAKD,KAAL,CAAWU,SAAlC,GAA8CD,IAAI,CAAC2B,GAAL,EAAhE;AACA,UAAM8C,MAAM,GAAG;AACb9E,MAAAA,GAAG,EAAE,KAAKC,aAAL,CAAmBK,SAAnB,CADQ;AAEbV,MAAAA,KAAK,EAAE,WAFM;AAGbmF,MAAAA,IAAI,EAAE,QAHO;AAIblF,MAAAA,SAAS,EAAE,KAAKA,SAJH;AAKb4F,MAAAA,QALa;AAMbjB,MAAAA,YANa;AAOblE,MAAAA,SAPa;AAQb0E,MAAAA,aAAa,EAAEtF,SARF;AASbuF,MAAAA,KAAK,EAAE;AAAEC,QAAAA,YAAY,EAAE,CAAhB;AAAmBC,QAAAA,QAAQ,EAAE;AAA7B;AATM,KAAf;AAYA,SAAKrF,OAAL,CAAasF,IAAb,CAAkBN,MAAlB;AAEA,UAAMO,cAAc,GAAG,KAAKC,qBAAL,CAA2BR,MAA3B,CAAvB;AACA,SAAKS,WAAL;AACA,WAAO;AAAET,MAAAA,MAAF;AAAUO,MAAAA;AAAV,KAAP;AACD;;AAEDE,EAAAA,WAAW,GAAG;AACZ,QAAI,KAAKvF,GAAT,EAAc;AACZvB,MAAAA,MAAM,CAACsB,UAAP,CAAkB,KAAKC,GAAvB,EAA4B;AAC1BH,QAAAA,SAAS,EAAE,KAAKA;AADU,OAA5B;AAGD;AACF;;AAED6F,EAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,UAAMb,MAAM,GAAG;AACb9E,MAAAA,GAAG,EAAG,GAAE,KAAKC,aAAL,EAAqB,OADhB;AAEb8E,MAAAA,IAAI,EAAE,MAFO;AAGbzE,MAAAA,SAAS,EAAED,IAAI,CAAC2B,GAAL,EAHE;AAIb2D,MAAAA;AAJa,KAAf;AAMA,SAAK7F,OAAL,CAAasF,IAAb,CAAkBN,MAAlB;AACA,UAAMO,cAAc,GAAG,KAAKC,qBAAL,CAA2BR,MAA3B,CAAvB;AACA,WAAO;AAAEA,MAAAA,MAAF;AAAUO,MAAAA;AAAV,KAAP;AACD;;AAEDC,EAAAA,qBAAqB,CAACR,MAAD,EAAS;AAC5B,UAAM;AACJlF,MAAAA,KADI;AAEJI,MAAAA,GAFI;AAGJ+E,MAAAA,IAHI;AAIJzE,MAAAA,SAJI;AAKJ0E,MAAAA,aAAa,GAAG,EALZ;AAMJW,MAAAA,IANI;AAOJnB,MAAAA,YAPI;AAQJiB,MAAAA;AARI,QASFX,MATJ;AAUA,UAAMc,aAAa,GAAG;AACpB5F,MAAAA,GADoB;AAEpB6F,MAAAA,SAAS,EAAE,KAAK7F,GAFI;AAGpBJ,MAAAA,KAHoB;AAIpBmF,MAAAA,IAJoB;AAKpBzE,MAAAA,SALoB;AAMpBT,MAAAA,SAAS,EAAE,KAAKA,SANI;AAOpB6E,MAAAA,SAAS,EACPK,IAAI,KAAK,QAAT,GACI;AACEP,QAAAA,YADF;AAEEzC,QAAAA,gBAAgB,EAAE,KAAKnC,KAAL,CAAWmC,gBAF/B;AAGE+D,QAAAA,yBAAyB,EAAEd,aAAa,CAACjD,gBAH3C;AAIEgE,QAAAA,kBAAkB,EAAEf,aAAa,CAAC1E;AAJpC,OADJ,GAOIb,SAfc;AAgBpBuG,MAAAA,OAAO,EACLjB,IAAI,KAAK,QAAT,GACI;AACEvD,QAAAA,mBAAmB,EAAEwD,aAAa,CAACxD,mBADrC;AAEEG,QAAAA,cAAc,EAAEqD,aAAa,CAACrD,cAFhC;AAGEC,QAAAA,eAAe,EAAEoD,aAAa,CAACpD,eAHjC;AAIEC,QAAAA,aAAa,EAAEmD,aAAa,CAACnD,aAJ/B;AAKEC,QAAAA,cAAc,EAAEkD,aAAa,CAAClD,cALhC;AAMEL,QAAAA,aAAa,EAAEuD,aAAa,CAACvD,aAN/B;AAOEC,QAAAA,YAAY,EAAEsD,aAAa,CAACtD;AAP9B,OADJ,GAUI;AACEpB,QAAAA,SADF;AAEEqF,QAAAA;AAFF,OA3Bc;AA+BpBM,MAAAA,gBAAgB,EACdlB,IAAI,KAAK,QAAT,GACI;AACEmB,QAAAA,OAAO,EAAE,KAAKlG,GADhB;AAEEmG,QAAAA,MAAM,EAAE,KAAKpH,cAFf;AAGEqH,QAAAA,UAAU,EAAE,KAAKvH,KAAL,KAAe,IAAf,GAAsB,EAAtB,GAA2B,KAAKD,SAH9C;AAIEyH,QAAAA,IAAI,EAAE,KAAKxH,KAAL,KAAe,IAAf,GAAsB,IAAtB,GAA6B,KAAKA,KAJ1C;AAKEyH,QAAAA,GAAG,EAAE,KAAKtH,SALZ;AAMEuH,QAAAA,KAAK,EAAE,KAAKzH,YANd;AAOE0H,QAAAA,YAAY,EACV,KAAK3H,KAAL,KAAe,IAAf,GACI,EADJ,GAEIN,MAAM,CAAC,KAAKqB,KAAL,CAAWU,SAAZ,CAAN,CAA6BmG,MAA7B,CAAoC,qBAApC,CAVR;AAWEC,QAAAA,SAAS,EACP,KAAK7H,KAAL,KAAe,IAAf,GACI,EADJ,GAEI2F,YAAY,GACZjG,MAAM,CAACiG,YAAD,CAAN,CAAqBiC,MAArB,CAA4B,qBAA5B,CADY,GAEZ,EAhBR;AAiBEE,QAAAA,MAAM,EAAE,KAAK9H,KAAL,KAAe,IAAf,GAAsB,EAAtB,GAA2B4G,QAAQ,KAAK,GAAb,GAAmB,GAAnB,GAAyB,GAjB9D;AAkBEmB,QAAAA,OAAO,EAAE,CACP;AACEC,UAAAA,KAAK,EAAEtI,MAAM,CAAC+B,SAAD,CAAN,CAAkBmG,MAAlB,CAAyB,YAAzB,EAAuCK,UAAvC,CAAkD,GAAlD,EAAuD,EAAvD,CADT;AAEEC,UAAAA,IAAI,EAAExI,MAAM,CAAC+B,SAAD,CAAN,CAAkBmG,MAAlB,CAAyB,UAAzB,EAAqCK,UAArC,CAAgD,GAAhD,EAAqD,EAArD,CAFR;AAGEnE,UAAAA,GAAG,EAAEqE,MAAM,CAAChC,aAAa,CAACxD,mBAAd,CAAkCe,MAAlC,CAAyCI,GAA1C,CAAN,CAAqDmE,UAArD,CAAgE,GAAhE,EAAqE,GAArE,CAHP;AAIEG,UAAAA,QAAQ,EAAED,MAAM,CACdhC,aAAa,CAACxD,mBAAd,CAAkCe,MAAlC,CAAyCO,SAAzC,CAAmDoE,OAAnD,CAA2D,CAA3D,CADc,CAAN,CAERJ,UAFQ,CAEG,GAFH,EAEQ,GAFR,CAJZ;AAOEK,UAAAA,OAAO,EAAEH,MAAM,CACbhC,aAAa,CAACxD,mBAAd,CAAkCe,MAAlC,CAAyCM,QAAzC,CAAkDqE,OAAlD,CAA0D,CAA1D,CADa,CAAN,CAEPJ,UAFO,CAEI,GAFJ,EAES,GAFT,CAPX;AAUEM,UAAAA,SAAS,EAAEpC,aAAa,CAACxD,mBAAd,CAAkCe,MAAlC,CAAyCQ,KAVtD;AAWEsE,UAAAA,MAAM,EAAE,CACN;AACEC,YAAAA,QAAQ,EAAE,CADZ;AAEEX,YAAAA,MAAM,EAAE3B,aAAa,CAACvD,aAAd,GAA8B,CAA9B,GAAkC,CAF5C;AAGE8F,YAAAA,QAAQ,EAAEvC,aAAa,CAACrD,cAH1B;AAIE6F,YAAAA,OAAO,EAAExC,aAAa,CAACpD;AAJzB,WADM,EAON;AACE0F,YAAAA,QAAQ,EAAE,CADZ;AAEEX,YAAAA,MAAM,EAAE3B,aAAa,CAACtD,YAAd,GAA6B,CAA7B,GAAiC,CAF3C;AAGE6F,YAAAA,QAAQ,EAAEvC,aAAa,CAACnD,aAH1B;AAIE2F,YAAAA,OAAO,EAAExC,aAAa,CAAClD;AAJzB,WAPM;AAXV,SADO;AAlBX,OADJ,GAgDIrC,SAhFc;AAiFpBwF,MAAAA,KAAK,EACHF,IAAI,KAAK,QAAT,GACI;AACEG,QAAAA,YAAY,EAAE,CADhB;AAEEC,QAAAA,QAAQ,EAAE;AAFZ,OADJ,GAKI1F;AAvFc,KAAtB;AAyFAjB,IAAAA,QAAQ,CAACiJ,YAAT,CAAsB7B,aAAtB;AACA,WAAOA,aAAP;AACD;;AAtXQ;AAyXX;AACA;AACA;;;AACA,eAAelH,IAAf","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport RecordDA from './data-access/RecordDA';\nimport TripDA from './data-access/TripDA';\n\nclass Trip {\n  /**\n   * @param string routeCode\n   * @param string route\n   * @param string vehiclePlate\n   * @param string driverDocument\n   * @param string companyId\n   */\n  constructor(routeCode, route, vehiclePlate, driverDocument, companyId, errorReporter) {\n    const args = Array.from(arguments);\n    if (args.lenngth < 6 || args.some((arg) => arg === undefined || arg === null)) {\n      errorReporter('ERROR_MISSING_ARGUMENTS');\n    } else {\n      this.errorReporter = errorReporter;\n      this.routeCode = routeCode;\n      this.route = route;\n      this.vehiclePlate = vehiclePlate;\n      this.driverDocument = driverDocument;\n      this.companyId = companyId;\n      this.tempState = this.buildNewState();\n      this.state = this.buildNewState();\n      this.recordSeq = 0;\n      this.records = [];\n    }\n  }\n\n  updateTrip() {\n    if (this._id)\n      return TripDA.updateTrip(this._id, {\n        tempState: this.tempState,\n        state: this.state,\n      });\n\n    return null;\n  }\n\n  buildRecordId() {\n    const companyId = (this.companyId || '').replace('-', '');\n    const plate = this.vehiclePlate;\n    const currentDate =\n      this.recordSeq === 1 ? new Date(this.state.timestamp) : new Date(this.tempState.timestamp);\n\n    const mm = currentDate.getMonth() + 1;\n    const dd = currentDate.getDate();\n    const year = currentDate.getFullYear();\n    const hour = currentDate.getHours();\n    const minutes = currentDate.getMinutes();\n    const seconds = currentDate.getSeconds();\n    const milisegundos = currentDate.getMilliseconds();\n    return `${companyId}${plate}${(dd > 9 ? '' : '0') + dd}${(mm > 9 ? '' : '0') + mm}${year}${\n      (hour > 9 ? '' : '0') + hour\n    }${(minutes > 9 ? '' : '0') + minutes}${(seconds > 9 ? '' : '0') + seconds}`;\n  }\n\n  buildNewState(stateToBaseOn = {}, propertiesToSet = {}) {\n    return _.cloneDeep({\n      geolocationPosition: null,\n      frontDoorOpen: null,\n      backDoorOpen: null,\n      frontDoorInput: 0,\n      frontDoorOutput: 0,\n      backDoorInput: 0,\n      backDoorOutput: 0,\n      traveledDistance: 0,\n      ...stateToBaseOn,\n      ...propertiesToSet,\n      timestamp: Date.now(),\n    });\n  }\n\n  getAndResetTempState() {\n    const tempStateToReturn = this.tempState;\n    this.tempState = this.buildNewState(tempStateToReturn, {\n      frontDoorInput: 0,\n      frontDoorOutput: 0,\n      backDoorInput: 0,\n      backDoorOutput: 0,\n      traveledDistance: 0,\n    });\n    this.updateTrip();\n    return tempStateToReturn;\n  }\n\n  reportGeolocationPosition(geolocationPosition) {\n    let geoLoc;\n    let traveledDistance = 0;\n\n    if (geolocationPosition === null || geolocationPosition === undefined) {\n      // this.errorReporter('INVALID_GEOLOCATION');\n      console.log('INVALID_GEOLOCATION.noData', { geolocationPosition });\n    } else {\n      const {\n        timestamp,\n        coords: { accuracy, altitude, altitudeAccuracy, dop, heading, latitude, longitude, speed },\n      } = geolocationPosition;\n      const mandatoryProps = [timestamp, latitude, longitude, speed, dop];\n      if (mandatoryProps.some((prop) => prop === undefined || prop === null)) {\n        // this.errorReporter('INVALID_GEOLOCATION');\n        console.log('INVALID_GEOLOCATION.mandatoryProps validation failed:', {\n          timestamp,\n          latitude,\n          longitude,\n          speed,\n          dop,\n        });\n      } else {\n        geoLoc = {\n          timestamp,\n          coords: {\n            accuracy,\n            altitude,\n            altitudeAccuracy,\n            dop,\n            heading,\n            latitude,\n            longitude,\n            speed,\n          },\n        };\n\n        traveledDistance =\n          ((this.tempState || {}).geolocationPosition || {}).coords &&\n          !_.isEqual(((this.tempState || {}).geolocationPosition || {}).coords, geoLoc.coords)\n            ? this.distance(\n                geoLoc.coords,\n                ((this.tempState || {}).geolocationPosition || {}).coords\n              )\n            : 0;\n      }\n    }\n\n    this.tempState.traveledDistance += traveledDistance;\n    this.tempState.geolocationPosition = geoLoc;\n    this.state.traveledDistance += traveledDistance;\n    this.state.geolocationPosition = geoLoc;\n    this.updateTrip();\n  }\n\n  distance(coord1, coord2) {\n    const { latitude: lat1 = 0, longitude: lon1 = 0 } = coord1 || {};\n    const { latitude: lat2 = 0, longitude: lon2 = 0 } = coord2 || {};\n    if (lat1 === lat2 && lon1 === lon2) {\n      return false;\n    }\n    const radlat1 = (Math.PI * lat1) / 180;\n    const radlat2 = (Math.PI * lat2) / 180;\n    const theta = lon1 - lon2;\n    const radtheta = (Math.PI * theta) / 180;\n    let dist =\n      Math.sin(radlat1) * Math.sin(radlat2) +\n      Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    if (dist > 1) {\n      dist = 1;\n    }\n    dist = Math.acos(dist);\n    dist = (dist * 180) / Math.PI;\n    dist = dist * 60 * 1.1515;\n    dist = Math.floor(dist * 1.609344 * 1000);\n    return dist;\n  }\n\n  reportDoorsStatus(frontDoorOpen, backDoorOpen) {\n    const args = Array.from(arguments);\n    if (\n      args.lenngth < 2 ||\n      args.some((arg) => arg === undefined || arg === null || typeof arg !== 'boolean')\n    ) {\n      this.errorReporter('INVALID_DOOR_STATUS');\n    } else {\n      this.tempState = { ...this.tempState, ...{ frontDoorOpen, backDoorOpen } };\n      this.state = { ...this.state, ...{ frontDoorOpen, backDoorOpen } };\n      this.updateTrip();\n    }\n  }\n\n  reportTripStoped(reason, endTimestamp) {\n    const newData = { tripState: 'FINALIZED', reason, endTimestamp };\n    this.tempState = { ...this.tempState, ...newData };\n    this.state = { ...this.state, ...newData };\n\n    this.finalizeTrip(newData);\n  }\n\n  finalizeTrip(newData) {\n    if (this._id) return TripDA.finalizeTrip(this._id, newData);\n    return null;\n  }\n\n  reportPassengerFlow(frontDoorInput, frontDoorOutput, backDoorInput, backDoorOutput) {\n    const args = Array.from(arguments);\n    if (\n      args.lenngth < 4 ||\n      args.some((arg) => arg === undefined || arg === null || typeof arg !== 'number' || arg < 0)\n    ) {\n      this.errorReporter('INVALID_PASSENGER_FLOW');\n    } else {\n      this.tempState.frontDoorInput += frontDoorInput;\n      this.tempState.frontDoorOutput += frontDoorOutput;\n      this.tempState.backDoorInput += backDoorInput;\n      this.tempState.backDoorOutput += backDoorOutput;\n      this.state.frontDoorInput += frontDoorInput;\n      this.state.frontDoorOutput += frontDoorOutput;\n      this.state.backDoorInput += backDoorInput;\n      this.state.backDoorOutput += backDoorOutput;\n      this.updateTrip();\n    }\n  }\n\n  generateRecord() {\n    const tempState = this.getAndResetTempState();\n    this.recordSeq += 1;\n    const timestamp = this.recordSeq === 1 ? this.state.timestamp : Date.now();\n    const record = {\n      _id: this.buildRecordId(timestamp),\n      state: 'PERSISTED',\n      type: 'RECORD',\n      recordSeq: this.recordSeq,\n      timestamp,\n      tripTempState: tempState,\n      stats: { retryAttempt: 0, attempts: [] },\n    };\n\n    this.records.push(record);\n\n    const extendedRecord = this.buildRecordAndPersist(record);\n    this.incRecorSeq();\n    return { record, extendedRecord };\n  }\n\n  generateFinalRecord(endTimestamp, endState) {\n    const tempState = this.getAndResetTempState();\n    this.recordSeq += 1;\n    const timestamp = this.recordSeq === 1 ? this.state.timestamp : Date.now();\n    const record = {\n      _id: this.buildRecordId(timestamp),\n      state: 'PERSISTED',\n      type: 'RECORD',\n      recordSeq: this.recordSeq,\n      endState,\n      endTimestamp,\n      timestamp,\n      tripTempState: tempState,\n      stats: { retryAttempt: 0, attempts: [] },\n    };\n\n    this.records.push(record);\n\n    const extendedRecord = this.buildRecordAndPersist(record);\n    this.incRecorSeq();\n    return { record, extendedRecord };\n  }\n\n  incRecorSeq() {\n    if (this._id) {\n      TripDA.updateTrip(this._id, {\n        recordSeq: this.recordSeq,\n      });\n    }\n  }\n\n  addNote(note) {\n    const record = {\n      _id: `${this.buildRecordId()}-NOTE`,\n      type: 'NOTE',\n      timestamp: Date.now(),\n      note,\n    };\n    this.records.push(record);\n    const extendedRecord = this.buildRecordAndPersist(record);\n    return { record, extendedRecord };\n  }\n\n  buildRecordAndPersist(record) {\n    const {\n      state,\n      _id,\n      type,\n      timestamp,\n      tripTempState = {},\n      note,\n      endTimestamp,\n      endState,\n    } = record;\n    const currentRecord = {\n      _id,\n      serviceId: this._id,\n      state,\n      type,\n      timestamp,\n      recordSeq: this.recordSeq,\n      tripState:\n        type === 'RECORD'\n          ? {\n              endTimestamp,\n              traveledDistance: this.state.traveledDistance,\n              tempStateTraveledDistance: tripTempState.traveledDistance,\n              tempStateTimestamp: tripTempState.timestamp,\n            }\n          : undefined,\n      payload:\n        type === 'RECORD'\n          ? {\n              geolocationPosition: tripTempState.geolocationPosition,\n              frontDoorInput: tripTempState.frontDoorInput,\n              frontDoorOutput: tripTempState.frontDoorOutput,\n              backDoorInput: tripTempState.backDoorInput,\n              backDoorOutput: tripTempState.backDoorOutput,\n              frontDoorOpen: tripTempState.frontDoorOpen,\n              backDoorOpen: tripTempState.backDoorOpen,\n            }\n          : {\n              timestamp,\n              note,\n            },\n      authorityPayload:\n        type === 'RECORD'\n          ? {\n              idViaje: this._id,\n              cedula: this.driverDocument,\n              codigoRuta: this.route === 'NA' ? '' : this.routeCode,\n              ruta: this.route === 'NA' ? 'NA' : this.route,\n              nit: this.companyId,\n              placa: this.vehiclePlate,\n              inicio_viaje:\n                this.route === 'NA'\n                  ? ''\n                  : moment(this.state.timestamp).format('DD/MM/YYYY HH:mm:ss'),\n              fin_viaje:\n                this.route === 'NA'\n                  ? ''\n                  : endTimestamp\n                  ? moment(endTimestamp).format('DD/MM/YYYY HH:mm:ss')\n                  : '',\n              estado: this.route === 'NA' ? '' : endState === 'S' ? '1' : '0',\n              eventos: [\n                {\n                  fecha: moment(timestamp).format('YYYY/MM/DD').replaceAll('/', ''),\n                  hora: moment(timestamp).format('HH:mm:ss').replaceAll(':', ''),\n                  dop: String(tripTempState.geolocationPosition.coords.dop).replaceAll('.', ','),\n                  longitud: String(\n                    tripTempState.geolocationPosition.coords.longitude.toFixed(6)\n                  ).replaceAll('.', ','),\n                  latitud: String(\n                    tripTempState.geolocationPosition.coords.latitude.toFixed(6)\n                  ).replaceAll('.', ','),\n                  velocidad: tripTempState.geolocationPosition.coords.speed,\n                  puerta: [\n                    {\n                      idPuerta: 0,\n                      estado: tripTempState.frontDoorOpen ? 0 : 1,\n                      ingresos: tripTempState.frontDoorInput,\n                      salidas: tripTempState.frontDoorOutput,\n                    },\n                    {\n                      idPuerta: 1,\n                      estado: tripTempState.backDoorOpen ? 0 : 1,\n                      ingresos: tripTempState.backDoorInput,\n                      salidas: tripTempState.backDoorOutput,\n                    },\n                  ],\n                },\n              ],\n            }\n          : undefined,\n      stats:\n        type === 'RECORD'\n          ? {\n              retryAttempt: 0,\n              attempts: [],\n            }\n          : undefined,\n    };\n    RecordDA.insertRecord(currentRecord);\n    return currentRecord;\n  }\n}\n\n/**\n * @returns {Trip}\n */\nexport default Trip;\n"]},"metadata":{},"sourceType":"module"}