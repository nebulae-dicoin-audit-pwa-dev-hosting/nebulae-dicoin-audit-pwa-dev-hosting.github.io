{"ast":null,"code":"import _slicedToArray from \"/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback, unstable_useForkRef as useForkRef, unstable_useIsFocusVisible as useIsFocusVisible } from '@mui/utils';\nimport extractEventHandlers from '../utils/extractEventHandlers';\nexport default function useButton(props) {\n  var _ref;\n\n  var component = props.component,\n      _props$components = props.components,\n      components = _props$components === void 0 ? {} : _props$components,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      href = props.href,\n      ref = props.ref,\n      _props$tabIndex = props.tabIndex,\n      tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,\n      to = props.to,\n      type = props.type;\n  var buttonRef = React.useRef();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      active = _React$useState2[0],\n      setActive = _React$useState2[1];\n\n  var _useIsFocusVisible = useIsFocusVisible(),\n      isFocusVisibleRef = _useIsFocusVisible.isFocusVisibleRef,\n      handleFocusVisible = _useIsFocusVisible.onFocus,\n      handleBlurVisible = _useIsFocusVisible.onBlur,\n      focusVisibleRef = _useIsFocusVisible.ref;\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      focusVisible = _React$useState4[0],\n      setFocusVisible = _React$useState4[1];\n\n  if (disabled && focusVisible) {\n    setFocusVisible(false);\n  }\n\n  React.useEffect(function () {\n    isFocusVisibleRef.current = focusVisible;\n  }, [focusVisible, isFocusVisibleRef]);\n\n  var handleMouseLeave = function handleMouseLeave(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onMous;\n\n      if (focusVisible) {\n        event.preventDefault();\n      }\n\n      (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);\n    };\n  };\n\n  var handleBlur = function handleBlur(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onBlur;\n\n      handleBlurVisible(event);\n\n      if (isFocusVisibleRef.current === false) {\n        setFocusVisible(false);\n      }\n\n      (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);\n    };\n  };\n\n  var handleFocus = useEventCallback(function (otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onFocu2; // Fix for https://github.com/facebook/react/issues/7769\n\n\n      if (!buttonRef.current) {\n        buttonRef.current = event.currentTarget;\n      }\n\n      handleFocusVisible(event);\n\n      if (isFocusVisibleRef.current === true) {\n        var _otherHandlers$onFocu;\n\n        setFocusVisible(true);\n        (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);\n      }\n\n      (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu2.call(otherHandlers, event);\n    };\n  });\n  var elementType = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';\n\n  var isNonNativeButton = function isNonNativeButton() {\n    var button = buttonRef.current;\n    return elementType !== 'button' && !((button == null ? void 0 : button.tagName) === 'A' && button != null && button.href);\n  };\n\n  var handleMouseDown = function handleMouseDown(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onMous2;\n\n      if (event.target === event.currentTarget && !disabled) {\n        setActive(true);\n      }\n\n      (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);\n    };\n  };\n\n  var handleMouseUp = function handleMouseUp(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onMous3;\n\n      if (event.target === event.currentTarget) {\n        setActive(false);\n      }\n\n      (_otherHandlers$onMous3 = otherHandlers.onMouseUp) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);\n    };\n  };\n\n  var handleKeyDown = useEventCallback(function (otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onKeyD;\n\n      if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {\n        event.preventDefault();\n      }\n\n      if (event.target === event.currentTarget && event.key === ' ' && !disabled) {\n        setActive(true);\n      }\n\n      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event); // Keyboard accessibility for non interactive elements\n\n      if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {\n        var _otherHandlers$onClic;\n\n        event.preventDefault();\n        (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n      }\n    };\n  });\n  var handleKeyUp = useEventCallback(function (otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onKeyU; // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed\n      // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0\n\n\n      if (event.target === event.currentTarget) {\n        setActive(false);\n      }\n\n      (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event); // Keyboard accessibility for non interactive elements\n\n      if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {\n        var _otherHandlers$onClic2;\n\n        (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);\n      }\n    };\n  });\n  var buttonProps = {};\n\n  if (elementType === 'button') {\n    buttonProps.type = type != null ? type : 'button';\n    buttonProps.disabled = disabled;\n  } else {\n    if (!href && !to) {\n      buttonProps.role = 'button';\n    }\n\n    if (disabled) {\n      buttonProps['aria-disabled'] = disabled;\n    }\n  }\n\n  var handleOwnRef = useForkRef(focusVisibleRef, buttonRef);\n  var handleRef = useForkRef(ref, handleOwnRef);\n\n  var getRootProps = function getRootProps(otherHandlers) {\n    var propsEventHandlers = extractEventHandlers(props);\n\n    var externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);\n\n    var ownEventHandlers = {\n      onBlur: handleBlur(externalEventHandlers),\n      onFocus: handleFocus(externalEventHandlers),\n      onKeyDown: handleKeyDown(externalEventHandlers),\n      onKeyUp: handleKeyUp(externalEventHandlers),\n      onMouseDown: handleMouseDown(externalEventHandlers),\n      onMouseLeave: handleMouseLeave(externalEventHandlers),\n      onMouseUp: handleMouseUp(externalEventHandlers)\n    };\n\n    var mergedEventHandlers = _extends({}, externalEventHandlers, ownEventHandlers); // onFocusVisible can be present on the props, but since it's not a valid React event handler,\n    // it must not be forwarded to the inner component.\n\n\n    delete mergedEventHandlers.onFocusVisible;\n    return _extends({\n      tabIndex: disabled ? -1 : tabIndex,\n      type: type,\n      ref: handleRef\n    }, buttonProps, mergedEventHandlers);\n  };\n\n  return {\n    getRootProps: getRootProps,\n    focusVisible: focusVisible,\n    setFocusVisible: setFocusVisible,\n    disabled: disabled,\n    active: active\n  };\n}","map":null,"metadata":{},"sourceType":"module"}