{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst lodash_1 = __importDefault(require(\"lodash\"));\n\nconst utils = __importStar(require(\"./utils\"));\n\nconst jQueryHttpClient_1 = __importDefault(require(\"./jQueryHttpClient\"));\n\nconst quickfind = __importStar(require(\"./quickfind\"));\n\nclass RemoteDb {\n  /** Url must have trailing /, can be an arrau of URLs\n   * useQuickFind enables the quickfind protocol for finds\n   * usePostFind enables POST for find\n   */\n  constructor(url, client, httpClient) {\n    let useQuickFind = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let usePostFind = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    this.url = url;\n    this.client = client;\n    this.collections = {};\n    this.httpClient = httpClient;\n    this.useQuickFind = useQuickFind;\n    this.usePostFind = usePostFind;\n  } // Can specify url of specific collection as option.\n  // useQuickFind can be overridden in options\n  // usePostFind can be overridden in options\n\n\n  addCollection(name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let success = arguments.length > 2 ? arguments[2] : undefined;\n    let error = arguments.length > 3 ? arguments[3] : undefined;\n    let url;\n\n    if (lodash_1.default.isFunction(options)) {\n      ;\n      [options, success, error] = [{}, options, success];\n    }\n\n    if (options.url) {\n      ;\n      ({\n        url\n      } = options);\n    } else {\n      if (lodash_1.default.isArray(this.url)) {\n        url = lodash_1.default.map(this.url, url => url + name);\n      } else {\n        url = this.url + name;\n      }\n    }\n\n    let {\n      useQuickFind\n    } = this;\n\n    if (options.useQuickFind != null) {\n      ;\n      ({\n        useQuickFind\n      } = options);\n    }\n\n    let {\n      usePostFind\n    } = this;\n\n    if (options.usePostFind != null) {\n      ;\n      ({\n        usePostFind\n      } = options);\n    }\n\n    const collection = new Collection(name, url, this.client, this.httpClient, useQuickFind, usePostFind);\n    this[name] = collection;\n    this.collections[name] = collection;\n\n    if (success != null) {\n      return success();\n    }\n  }\n\n  removeCollection(name, success, error) {\n    delete this[name];\n    delete this.collections[name];\n\n    if (success != null) {\n      return success();\n    }\n  }\n\n  getCollectionNames() {\n    return lodash_1.default.keys(this.collections);\n  }\n\n}\n\nexports.default = RemoteDb; // Remote collection on server\n\nclass Collection {\n  // usePostFind allows POST to <collection>/find for long selectors\n  constructor(name, url, client, httpClient, useQuickFind, usePostFind) {\n    this.name = name;\n    this.url = url;\n    this.client = client;\n    this.httpClient = httpClient || jQueryHttpClient_1.default;\n    this.useQuickFind = useQuickFind;\n    this.usePostFind = usePostFind;\n  }\n\n  getUrl() {\n    let url;\n\n    if (lodash_1.default.isArray(this.url)) {\n      url = this.url.pop(); // Add the URL to the front of the array\n\n      this.url.unshift(url);\n      return url;\n    }\n\n    return this.url;\n  } // error is called with jqXHR\n\n\n  find(selector) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return {\n      fetch: (success, error) => {\n        // Determine method: \"get\", \"post\" or \"quickfind\"\n        // If in quickfind and localData present and (no fields option or _rev included) and not (limit with no sort), use quickfind\n        let method;\n\n        if (this.useQuickFind && options.localData && (!options.fields || options.fields._rev) && !(options.limit && !options.sort && !options.orderByExprs)) {\n          method = \"quickfind\"; // If selector or fields or sort is too big, use post\n        } else if (this.usePostFind && JSON.stringify({\n          selector,\n          sort: options.sort,\n          fields: options.fields\n        }).length > 500) {\n          method = \"post\";\n        } else {\n          method = \"get\";\n        }\n\n        if (method === \"get\") {\n          // Create url\n          const params = {};\n          params.selector = JSON.stringify(selector || {});\n\n          if (options.sort) {\n            params.sort = JSON.stringify(options.sort);\n          }\n\n          if (options.limit) {\n            params.limit = options.limit;\n          }\n\n          if (options.skip) {\n            params.skip = options.skip;\n          }\n\n          if (options.fields) {\n            params.fields = JSON.stringify(options.fields);\n          } // Advanced options for mwater-expression-based filtering and ordering\n\n\n          if (options.whereExpr) {\n            params.whereExpr = JSON.stringify(options.whereExpr);\n          }\n\n          if (options.orderByExprs) {\n            params.orderByExprs = JSON.stringify(options.orderByExprs);\n          }\n\n          if (this.client) {\n            params.client = this.client;\n          }\n\n          this.httpClient(\"GET\", this.getUrl(), params, null, success, error);\n          return;\n        } // Create body + params for quickfind and post\n\n\n        const body = {\n          selector: selector || {}\n        };\n\n        if (options.sort) {\n          body.sort = options.sort;\n        }\n\n        if (options.limit != null) {\n          body.limit = options.limit;\n        }\n\n        if (options.skip != null) {\n          body.skip = options.skip;\n        }\n\n        if (options.fields) {\n          body.fields = options.fields;\n        } // Advanced options for mwater-expression-based filtering and ordering\n\n\n        if (options.whereExpr) {\n          body.whereExpr = options.whereExpr;\n        }\n\n        if (options.orderByExprs) {\n          body.orderByExprs = options.orderByExprs;\n        }\n\n        const params = {};\n\n        if (this.client) {\n          params.client = this.client;\n        }\n\n        if (method === \"quickfind\") {\n          // Send quickfind data\n          body.quickfind = quickfind.encodeRequest(options.localData);\n          this.httpClient(\"POST\", this.getUrl() + \"/quickfind\", params, body, encodedResponse => {\n            return success(quickfind.decodeResponse(encodedResponse, options.localData, options.sort));\n          }, error);\n          return;\n        } // POST method\n\n\n        return this.httpClient(\"POST\", this.getUrl() + \"/find\", params, body, response => {\n          return success(response);\n        }, error);\n      }\n    };\n  }\n\n  findOne(selector, options, success, error) {\n    if (lodash_1.default.isFunction(options)) {\n      ;\n      [options, success, error] = [{}, options, success];\n    } // Create url\n\n\n    const params = {};\n\n    if (options.sort) {\n      params.sort = JSON.stringify(options.sort);\n    }\n\n    params.limit = 1;\n\n    if (this.client) {\n      params.client = this.client;\n    }\n\n    params.selector = JSON.stringify(selector || {});\n    return this.httpClient(\"GET\", this.getUrl(), params, null, function (results) {\n      if (results && results.length > 0) {\n        return success(results[0]);\n      } else {\n        return success(null);\n      }\n    }, error);\n  } // error is called with jqXHR\n\n\n  upsert(docs, bases, success, error) {\n    let items;\n    [items, success, error] = utils.regularizeUpsert(docs, bases, success, error);\n    const results = []; // Check if bases present\n\n    const basesPresent = lodash_1.default.compact(lodash_1.default.map(items, \"base\")).length > 0;\n    const params = {};\n\n    if (this.client) {\n      params.client = this.client;\n    } // Handle single case\n\n\n    if (items.length === 1) {\n      // POST if no base, PATCH otherwise\n      if (basesPresent) {\n        return this.httpClient(\"PATCH\", this.getUrl(), params, items[0], function (result) {\n          if (lodash_1.default.isArray(docs)) {\n            return success([result]);\n          } else {\n            return success(result);\n          }\n        }, function (err) {\n          if (error) {\n            return error(err);\n          }\n        });\n      } else {\n        return this.httpClient(\"POST\", this.getUrl(), params, items[0].doc, function (result) {\n          if (lodash_1.default.isArray(docs)) {\n            return success([result]);\n          } else {\n            return success(result);\n          }\n        }, function (err) {\n          if (error) {\n            return error(err);\n          }\n        });\n      }\n    } else {\n      // POST if no base, PATCH otherwise\n      if (basesPresent) {\n        return this.httpClient(\"PATCH\", this.getUrl(), params, {\n          doc: lodash_1.default.map(items, \"doc\"),\n          base: lodash_1.default.map(items, \"base\")\n        }, result => success(result), function (err) {\n          if (error) {\n            return error(err);\n          }\n        });\n      } else {\n        return this.httpClient(\"POST\", this.getUrl(), params, lodash_1.default.map(items, \"doc\"), result => success(result), function (err) {\n          if (error) {\n            return error(err);\n          }\n        });\n      }\n    }\n  } // error is called with jqXHR\n\n\n  remove(id, success, error) {\n    if (!this.client) {\n      throw new Error(\"Client required to remove\");\n    }\n\n    const params = {\n      client: this.client\n    };\n    return this.httpClient(\"DELETE\", this.getUrl() + \"/\" + id, params, null, success, function (err) {\n      // 410 is an acceptable delete status\n      if (err.status === 410) {\n        return success();\n      } else {\n        return error(err);\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/node_modules/minimongo/lib/RemoteDb.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","__importDefault","exports","lodash_1","require","utils","jQueryHttpClient_1","quickfind","RemoteDb","constructor","url","client","httpClient","useQuickFind","usePostFind","collections","addCollection","name","options","success","error","default","isFunction","isArray","map","collection","Collection","removeCollection","getCollectionNames","keys","getUrl","pop","unshift","find","selector","fetch","method","localData","fields","_rev","limit","sort","orderByExprs","JSON","stringify","length","params","skip","whereExpr","body","encodeRequest","encodedResponse","decodeResponse","response","findOne","results","upsert","docs","bases","items","regularizeUpsert","basesPresent","compact","err","doc","base","remove","id","Error","status"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lodash_1 = __importDefault(require(\"lodash\"));\nconst utils = __importStar(require(\"./utils\"));\nconst jQueryHttpClient_1 = __importDefault(require(\"./jQueryHttpClient\"));\nconst quickfind = __importStar(require(\"./quickfind\"));\nclass RemoteDb {\n    /** Url must have trailing /, can be an arrau of URLs\n     * useQuickFind enables the quickfind protocol for finds\n     * usePostFind enables POST for find\n     */\n    constructor(url, client, httpClient, useQuickFind = false, usePostFind = false) {\n        this.url = url;\n        this.client = client;\n        this.collections = {};\n        this.httpClient = httpClient;\n        this.useQuickFind = useQuickFind;\n        this.usePostFind = usePostFind;\n    }\n    // Can specify url of specific collection as option.\n    // useQuickFind can be overridden in options\n    // usePostFind can be overridden in options\n    addCollection(name, options = {}, success, error) {\n        let url;\n        if (lodash_1.default.isFunction(options)) {\n            ;\n            [options, success, error] = [{}, options, success];\n        }\n        if (options.url) {\n            ;\n            ({ url } = options);\n        }\n        else {\n            if (lodash_1.default.isArray(this.url)) {\n                url = lodash_1.default.map(this.url, (url) => url + name);\n            }\n            else {\n                url = this.url + name;\n            }\n        }\n        let { useQuickFind } = this;\n        if (options.useQuickFind != null) {\n            ;\n            ({ useQuickFind } = options);\n        }\n        let { usePostFind } = this;\n        if (options.usePostFind != null) {\n            ;\n            ({ usePostFind } = options);\n        }\n        const collection = new Collection(name, url, this.client, this.httpClient, useQuickFind, usePostFind);\n        this[name] = collection;\n        this.collections[name] = collection;\n        if (success != null) {\n            return success();\n        }\n    }\n    removeCollection(name, success, error) {\n        delete this[name];\n        delete this.collections[name];\n        if (success != null) {\n            return success();\n        }\n    }\n    getCollectionNames() {\n        return lodash_1.default.keys(this.collections);\n    }\n}\nexports.default = RemoteDb;\n// Remote collection on server\nclass Collection {\n    // usePostFind allows POST to <collection>/find for long selectors\n    constructor(name, url, client, httpClient, useQuickFind, usePostFind) {\n        this.name = name;\n        this.url = url;\n        this.client = client;\n        this.httpClient = httpClient || jQueryHttpClient_1.default;\n        this.useQuickFind = useQuickFind;\n        this.usePostFind = usePostFind;\n    }\n    getUrl() {\n        let url;\n        if (lodash_1.default.isArray(this.url)) {\n            url = this.url.pop();\n            // Add the URL to the front of the array\n            this.url.unshift(url);\n            return url;\n        }\n        return this.url;\n    }\n    // error is called with jqXHR\n    find(selector, options = {}) {\n        return {\n            fetch: (success, error) => {\n                // Determine method: \"get\", \"post\" or \"quickfind\"\n                // If in quickfind and localData present and (no fields option or _rev included) and not (limit with no sort), use quickfind\n                let method;\n                if (this.useQuickFind &&\n                    options.localData &&\n                    (!options.fields || options.fields._rev) &&\n                    !(options.limit && !options.sort && !options.orderByExprs)) {\n                    method = \"quickfind\";\n                    // If selector or fields or sort is too big, use post\n                }\n                else if (this.usePostFind &&\n                    JSON.stringify({ selector, sort: options.sort, fields: options.fields }).length > 500) {\n                    method = \"post\";\n                }\n                else {\n                    method = \"get\";\n                }\n                if (method === \"get\") {\n                    // Create url\n                    const params = {};\n                    params.selector = JSON.stringify(selector || {});\n                    if (options.sort) {\n                        params.sort = JSON.stringify(options.sort);\n                    }\n                    if (options.limit) {\n                        params.limit = options.limit;\n                    }\n                    if (options.skip) {\n                        params.skip = options.skip;\n                    }\n                    if (options.fields) {\n                        params.fields = JSON.stringify(options.fields);\n                    }\n                    // Advanced options for mwater-expression-based filtering and ordering\n                    if (options.whereExpr) {\n                        params.whereExpr = JSON.stringify(options.whereExpr);\n                    }\n                    if (options.orderByExprs) {\n                        params.orderByExprs = JSON.stringify(options.orderByExprs);\n                    }\n                    if (this.client) {\n                        params.client = this.client;\n                    }\n                    this.httpClient(\"GET\", this.getUrl(), params, null, success, error);\n                    return;\n                }\n                // Create body + params for quickfind and post\n                const body = {\n                    selector: selector || {}\n                };\n                if (options.sort) {\n                    body.sort = options.sort;\n                }\n                if (options.limit != null) {\n                    body.limit = options.limit;\n                }\n                if (options.skip != null) {\n                    body.skip = options.skip;\n                }\n                if (options.fields) {\n                    body.fields = options.fields;\n                }\n                // Advanced options for mwater-expression-based filtering and ordering\n                if (options.whereExpr) {\n                    body.whereExpr = options.whereExpr;\n                }\n                if (options.orderByExprs) {\n                    body.orderByExprs = options.orderByExprs;\n                }\n                const params = {};\n                if (this.client) {\n                    params.client = this.client;\n                }\n                if (method === \"quickfind\") {\n                    // Send quickfind data\n                    body.quickfind = quickfind.encodeRequest(options.localData);\n                    this.httpClient(\"POST\", this.getUrl() + \"/quickfind\", params, body, (encodedResponse) => {\n                        return success(quickfind.decodeResponse(encodedResponse, options.localData, options.sort));\n                    }, error);\n                    return;\n                }\n                // POST method\n                return this.httpClient(\"POST\", this.getUrl() + \"/find\", params, body, (response) => {\n                    return success(response);\n                }, error);\n            }\n        };\n    }\n    findOne(selector, options, success, error) {\n        if (lodash_1.default.isFunction(options)) {\n            ;\n            [options, success, error] = [{}, options, success];\n        }\n        // Create url\n        const params = {};\n        if (options.sort) {\n            params.sort = JSON.stringify(options.sort);\n        }\n        params.limit = 1;\n        if (this.client) {\n            params.client = this.client;\n        }\n        params.selector = JSON.stringify(selector || {});\n        return this.httpClient(\"GET\", this.getUrl(), params, null, function (results) {\n            if (results && results.length > 0) {\n                return success(results[0]);\n            }\n            else {\n                return success(null);\n            }\n        }, error);\n    }\n    // error is called with jqXHR\n    upsert(docs, bases, success, error) {\n        let items;\n        [items, success, error] = utils.regularizeUpsert(docs, bases, success, error);\n        const results = [];\n        // Check if bases present\n        const basesPresent = lodash_1.default.compact(lodash_1.default.map(items, \"base\")).length > 0;\n        const params = {};\n        if (this.client) {\n            params.client = this.client;\n        }\n        // Handle single case\n        if (items.length === 1) {\n            // POST if no base, PATCH otherwise\n            if (basesPresent) {\n                return this.httpClient(\"PATCH\", this.getUrl(), params, items[0], function (result) {\n                    if (lodash_1.default.isArray(docs)) {\n                        return success([result]);\n                    }\n                    else {\n                        return success(result);\n                    }\n                }, function (err) {\n                    if (error) {\n                        return error(err);\n                    }\n                });\n            }\n            else {\n                return this.httpClient(\"POST\", this.getUrl(), params, items[0].doc, function (result) {\n                    if (lodash_1.default.isArray(docs)) {\n                        return success([result]);\n                    }\n                    else {\n                        return success(result);\n                    }\n                }, function (err) {\n                    if (error) {\n                        return error(err);\n                    }\n                });\n            }\n        }\n        else {\n            // POST if no base, PATCH otherwise\n            if (basesPresent) {\n                return this.httpClient(\"PATCH\", this.getUrl(), params, { doc: lodash_1.default.map(items, \"doc\"), base: lodash_1.default.map(items, \"base\") }, (result) => success(result), function (err) {\n                    if (error) {\n                        return error(err);\n                    }\n                });\n            }\n            else {\n                return this.httpClient(\"POST\", this.getUrl(), params, lodash_1.default.map(items, \"doc\"), (result) => success(result), function (err) {\n                    if (error) {\n                        return error(err);\n                    }\n                });\n            }\n        }\n    }\n    // error is called with jqXHR\n    remove(id, success, error) {\n        if (!this.client) {\n            throw new Error(\"Client required to remove\");\n        }\n        const params = { client: this.client };\n        return this.httpClient(\"DELETE\", this.getUrl() + \"/\" + id, params, null, success, function (err) {\n            // 410 is an acceptable delete status\n            if (err.status === 410) {\n                return success();\n            }\n            else {\n                return error(err);\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"script"}