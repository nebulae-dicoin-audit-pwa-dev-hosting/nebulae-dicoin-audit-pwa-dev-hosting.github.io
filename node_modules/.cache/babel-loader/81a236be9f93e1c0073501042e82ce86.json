{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar diff = require(\"diff\");\n\nvar jsDiff = diff;\nvar DiffType;\n\n(function (DiffType) {\n  DiffType[DiffType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n  DiffType[DiffType[\"ADDED\"] = 1] = \"ADDED\";\n  DiffType[DiffType[\"REMOVED\"] = 2] = \"REMOVED\";\n})(DiffType = exports.DiffType || (exports.DiffType = {})); // See https://github.com/kpdecker/jsdiff/tree/v4.0.1#api for more info on the below JsDiff methods\n\n\nvar DiffMethod;\n\n(function (DiffMethod) {\n  DiffMethod[\"CHARS\"] = \"diffChars\";\n  DiffMethod[\"WORDS\"] = \"diffWords\";\n  DiffMethod[\"WORDS_WITH_SPACE\"] = \"diffWordsWithSpace\";\n  DiffMethod[\"LINES\"] = \"diffLines\";\n  DiffMethod[\"TRIMMED_LINES\"] = \"diffTrimmedLines\";\n  DiffMethod[\"SENTENCES\"] = \"diffSentences\";\n  DiffMethod[\"CSS\"] = \"diffCss\";\n})(DiffMethod = exports.DiffMethod || (exports.DiffMethod = {}));\n/**\n * Splits diff text by new line and computes final list of diff lines based on\n * conditions.\n *\n * @param value Diff text from the js diff module.\n */\n\n\nvar constructLines = function (value) {\n  var lines = value.split('\\n');\n  var isAllEmpty = lines.every(function (val) {\n    return !val;\n  });\n\n  if (isAllEmpty) {\n    // This is to avoid added an extra new line in the UI.\n    if (lines.length === 2) {\n      return [];\n    }\n\n    lines.pop();\n    return lines;\n  }\n\n  var lastLine = lines[lines.length - 1];\n  var firstLine = lines[0]; // Remove the first and last element if they are new line character. This is\n  // to avoid addition of extra new line in the UI.\n\n  if (!lastLine) {\n    lines.pop();\n  }\n\n  if (!firstLine) {\n    lines.shift();\n  }\n\n  return lines;\n};\n/**\n * Computes word diff information in the line.\n * [TODO]: Consider adding options argument for JsDiff text block comparison\n *\n * @param oldValue Old word in the line.\n * @param newValue New word in the line.\n * @param compareMethod JsDiff text diff method from https://github.com/kpdecker/jsdiff/tree/v4.0.1#api\n */\n\n\nvar computeDiff = function (oldValue, newValue, compareMethod) {\n  if (compareMethod === void 0) {\n    compareMethod = DiffMethod.CHARS;\n  }\n\n  var diffArray = jsDiff[compareMethod](oldValue, newValue);\n  var computedDiff = {\n    left: [],\n    right: []\n  };\n  diffArray.forEach(function (_a) {\n    var added = _a.added,\n        removed = _a.removed,\n        value = _a.value;\n    var diffInformation = {};\n\n    if (added) {\n      diffInformation.type = DiffType.ADDED;\n      diffInformation.value = value;\n      computedDiff.right.push(diffInformation);\n    }\n\n    if (removed) {\n      diffInformation.type = DiffType.REMOVED;\n      diffInformation.value = value;\n      computedDiff.left.push(diffInformation);\n    }\n\n    if (!removed && !added) {\n      diffInformation.type = DiffType.DEFAULT;\n      diffInformation.value = value;\n      computedDiff.right.push(diffInformation);\n      computedDiff.left.push(diffInformation);\n    }\n\n    return diffInformation;\n  });\n  return computedDiff;\n};\n/**\n * [TODO]: Think about moving common left and right value assignment to a\n * common place. Better readability?\n *\n * Computes line wise information based in the js diff information passed. Each\n * line contains information about left and right section. Left side denotes\n * deletion and right side denotes addition.\n *\n * @param oldString Old string to compare.\n * @param newString New string to compare with old string.\n * @param disableWordDiff Flag to enable/disable word diff.\n * @param compareMethod JsDiff text diff method from https://github.com/kpdecker/jsdiff/tree/v4.0.1#api\n * @param linesOffset line number to start counting from\n */\n\n\nvar computeLineInformation = function (oldString, newString, disableWordDiff, compareMethod, linesOffset) {\n  if (disableWordDiff === void 0) {\n    disableWordDiff = false;\n  }\n\n  if (compareMethod === void 0) {\n    compareMethod = DiffMethod.CHARS;\n  }\n\n  if (linesOffset === void 0) {\n    linesOffset = 0;\n  }\n\n  var diffArray = diff.diffLines(oldString.trimRight(), newString.trimRight(), {\n    newlineIsToken: true,\n    ignoreWhitespace: false,\n    ignoreCase: false\n  });\n  var rightLineNumber = linesOffset;\n  var leftLineNumber = linesOffset;\n  var lineInformation = [];\n  var counter = 0;\n  var diffLines = [];\n  var ignoreDiffIndexes = [];\n\n  var getLineInformation = function (value, diffIndex, added, removed, evaluateOnlyFirstLine) {\n    var lines = constructLines(value);\n    return lines.map(function (line, lineIndex) {\n      var left = {};\n      var right = {};\n\n      if (ignoreDiffIndexes.includes(diffIndex + \"-\" + lineIndex) || evaluateOnlyFirstLine && lineIndex !== 0) {\n        return undefined;\n      }\n\n      if (added || removed) {\n        if (!diffLines.includes(counter)) {\n          diffLines.push(counter);\n        }\n\n        if (removed) {\n          leftLineNumber += 1;\n          left.lineNumber = leftLineNumber;\n          left.type = DiffType.REMOVED;\n          left.value = line || ' '; // When the current line is of type REMOVED, check the next item in\n          // the diff array whether it is of type ADDED. If true, the current\n          // diff will be marked as both REMOVED and ADDED. Meaning, the\n          // current line is a modification.\n\n          var nextDiff = diffArray[diffIndex + 1];\n\n          if (nextDiff && nextDiff.added) {\n            var nextDiffLines = constructLines(nextDiff.value)[lineIndex];\n\n            if (nextDiffLines) {\n              var _a = getLineInformation(nextDiff.value, diffIndex, true, false, true)[0].right,\n                  rightValue = _a.value,\n                  lineNumber = _a.lineNumber,\n                  type = _a.type; // When identified as modification, push the next diff to ignore\n              // list as the next value will be added in this line computation as\n              // right and left values.\n\n              ignoreDiffIndexes.push(diffIndex + 1 + \"-\" + lineIndex);\n              right.lineNumber = lineNumber;\n              right.type = type; // Do word level diff and assign the corresponding values to the\n              // left and right diff information object.\n\n              if (disableWordDiff) {\n                right.value = rightValue;\n              } else {\n                var computedDiff = computeDiff(line, rightValue, compareMethod);\n                right.value = computedDiff.right;\n                left.value = computedDiff.left;\n              }\n            }\n          }\n        } else {\n          rightLineNumber += 1;\n          right.lineNumber = rightLineNumber;\n          right.type = DiffType.ADDED;\n          right.value = line;\n        }\n      } else {\n        leftLineNumber += 1;\n        rightLineNumber += 1;\n        left.lineNumber = leftLineNumber;\n        left.type = DiffType.DEFAULT;\n        left.value = line;\n        right.lineNumber = rightLineNumber;\n        right.type = DiffType.DEFAULT;\n        right.value = line;\n      }\n\n      counter += 1;\n      return {\n        right: right,\n        left: left\n      };\n    }).filter(Boolean);\n  };\n\n  diffArray.forEach(function (_a, index) {\n    var added = _a.added,\n        removed = _a.removed,\n        value = _a.value;\n    lineInformation = __spread(lineInformation, getLineInformation(value, index, added, removed));\n  });\n  return {\n    lineInformation: lineInformation,\n    diffLines: diffLines\n  };\n};\n\nexports.computeLineInformation = computeLineInformation;","map":{"version":3,"sources":["/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/node_modules/react-diff-viewer/lib/compute-lines.js"],"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","__spread","arguments","length","concat","Object","defineProperty","exports","diff","require","jsDiff","DiffType","DiffMethod","constructLines","lines","split","isAllEmpty","every","val","pop","lastLine","firstLine","shift","computeDiff","oldValue","newValue","compareMethod","CHARS","diffArray","computedDiff","left","right","forEach","_a","added","removed","diffInformation","type","ADDED","REMOVED","DEFAULT","computeLineInformation","oldString","newString","disableWordDiff","linesOffset","diffLines","trimRight","newlineIsToken","ignoreWhitespace","ignoreCase","rightLineNumber","leftLineNumber","lineInformation","counter","ignoreDiffIndexes","getLineInformation","diffIndex","evaluateOnlyFirstLine","map","line","lineIndex","includes","undefined","lineNumber","nextDiff","nextDiffLines","rightValue","filter","Boolean","index"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar diff = require(\"diff\");\nvar jsDiff = diff;\nvar DiffType;\n(function (DiffType) {\n    DiffType[DiffType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    DiffType[DiffType[\"ADDED\"] = 1] = \"ADDED\";\n    DiffType[DiffType[\"REMOVED\"] = 2] = \"REMOVED\";\n})(DiffType = exports.DiffType || (exports.DiffType = {}));\n// See https://github.com/kpdecker/jsdiff/tree/v4.0.1#api for more info on the below JsDiff methods\nvar DiffMethod;\n(function (DiffMethod) {\n    DiffMethod[\"CHARS\"] = \"diffChars\";\n    DiffMethod[\"WORDS\"] = \"diffWords\";\n    DiffMethod[\"WORDS_WITH_SPACE\"] = \"diffWordsWithSpace\";\n    DiffMethod[\"LINES\"] = \"diffLines\";\n    DiffMethod[\"TRIMMED_LINES\"] = \"diffTrimmedLines\";\n    DiffMethod[\"SENTENCES\"] = \"diffSentences\";\n    DiffMethod[\"CSS\"] = \"diffCss\";\n})(DiffMethod = exports.DiffMethod || (exports.DiffMethod = {}));\n/**\n * Splits diff text by new line and computes final list of diff lines based on\n * conditions.\n *\n * @param value Diff text from the js diff module.\n */\nvar constructLines = function (value) {\n    var lines = value.split('\\n');\n    var isAllEmpty = lines.every(function (val) { return !val; });\n    if (isAllEmpty) {\n        // This is to avoid added an extra new line in the UI.\n        if (lines.length === 2) {\n            return [];\n        }\n        lines.pop();\n        return lines;\n    }\n    var lastLine = lines[lines.length - 1];\n    var firstLine = lines[0];\n    // Remove the first and last element if they are new line character. This is\n    // to avoid addition of extra new line in the UI.\n    if (!lastLine) {\n        lines.pop();\n    }\n    if (!firstLine) {\n        lines.shift();\n    }\n    return lines;\n};\n/**\n * Computes word diff information in the line.\n * [TODO]: Consider adding options argument for JsDiff text block comparison\n *\n * @param oldValue Old word in the line.\n * @param newValue New word in the line.\n * @param compareMethod JsDiff text diff method from https://github.com/kpdecker/jsdiff/tree/v4.0.1#api\n */\nvar computeDiff = function (oldValue, newValue, compareMethod) {\n    if (compareMethod === void 0) { compareMethod = DiffMethod.CHARS; }\n    var diffArray = jsDiff[compareMethod](oldValue, newValue);\n    var computedDiff = {\n        left: [],\n        right: [],\n    };\n    diffArray.forEach(function (_a) {\n        var added = _a.added, removed = _a.removed, value = _a.value;\n        var diffInformation = {};\n        if (added) {\n            diffInformation.type = DiffType.ADDED;\n            diffInformation.value = value;\n            computedDiff.right.push(diffInformation);\n        }\n        if (removed) {\n            diffInformation.type = DiffType.REMOVED;\n            diffInformation.value = value;\n            computedDiff.left.push(diffInformation);\n        }\n        if (!removed && !added) {\n            diffInformation.type = DiffType.DEFAULT;\n            diffInformation.value = value;\n            computedDiff.right.push(diffInformation);\n            computedDiff.left.push(diffInformation);\n        }\n        return diffInformation;\n    });\n    return computedDiff;\n};\n/**\n * [TODO]: Think about moving common left and right value assignment to a\n * common place. Better readability?\n *\n * Computes line wise information based in the js diff information passed. Each\n * line contains information about left and right section. Left side denotes\n * deletion and right side denotes addition.\n *\n * @param oldString Old string to compare.\n * @param newString New string to compare with old string.\n * @param disableWordDiff Flag to enable/disable word diff.\n * @param compareMethod JsDiff text diff method from https://github.com/kpdecker/jsdiff/tree/v4.0.1#api\n * @param linesOffset line number to start counting from\n */\nvar computeLineInformation = function (oldString, newString, disableWordDiff, compareMethod, linesOffset) {\n    if (disableWordDiff === void 0) { disableWordDiff = false; }\n    if (compareMethod === void 0) { compareMethod = DiffMethod.CHARS; }\n    if (linesOffset === void 0) { linesOffset = 0; }\n    var diffArray = diff.diffLines(oldString.trimRight(), newString.trimRight(), {\n        newlineIsToken: true,\n        ignoreWhitespace: false,\n        ignoreCase: false,\n    });\n    var rightLineNumber = linesOffset;\n    var leftLineNumber = linesOffset;\n    var lineInformation = [];\n    var counter = 0;\n    var diffLines = [];\n    var ignoreDiffIndexes = [];\n    var getLineInformation = function (value, diffIndex, added, removed, evaluateOnlyFirstLine) {\n        var lines = constructLines(value);\n        return lines\n            .map(function (line, lineIndex) {\n            var left = {};\n            var right = {};\n            if (ignoreDiffIndexes.includes(diffIndex + \"-\" + lineIndex) ||\n                (evaluateOnlyFirstLine && lineIndex !== 0)) {\n                return undefined;\n            }\n            if (added || removed) {\n                if (!diffLines.includes(counter)) {\n                    diffLines.push(counter);\n                }\n                if (removed) {\n                    leftLineNumber += 1;\n                    left.lineNumber = leftLineNumber;\n                    left.type = DiffType.REMOVED;\n                    left.value = line || ' ';\n                    // When the current line is of type REMOVED, check the next item in\n                    // the diff array whether it is of type ADDED. If true, the current\n                    // diff will be marked as both REMOVED and ADDED. Meaning, the\n                    // current line is a modification.\n                    var nextDiff = diffArray[diffIndex + 1];\n                    if (nextDiff && nextDiff.added) {\n                        var nextDiffLines = constructLines(nextDiff.value)[lineIndex];\n                        if (nextDiffLines) {\n                            var _a = getLineInformation(nextDiff.value, diffIndex, true, false, true)[0].right, rightValue = _a.value, lineNumber = _a.lineNumber, type = _a.type;\n                            // When identified as modification, push the next diff to ignore\n                            // list as the next value will be added in this line computation as\n                            // right and left values.\n                            ignoreDiffIndexes.push(diffIndex + 1 + \"-\" + lineIndex);\n                            right.lineNumber = lineNumber;\n                            right.type = type;\n                            // Do word level diff and assign the corresponding values to the\n                            // left and right diff information object.\n                            if (disableWordDiff) {\n                                right.value = rightValue;\n                            }\n                            else {\n                                var computedDiff = computeDiff(line, rightValue, compareMethod);\n                                right.value = computedDiff.right;\n                                left.value = computedDiff.left;\n                            }\n                        }\n                    }\n                }\n                else {\n                    rightLineNumber += 1;\n                    right.lineNumber = rightLineNumber;\n                    right.type = DiffType.ADDED;\n                    right.value = line;\n                }\n            }\n            else {\n                leftLineNumber += 1;\n                rightLineNumber += 1;\n                left.lineNumber = leftLineNumber;\n                left.type = DiffType.DEFAULT;\n                left.value = line;\n                right.lineNumber = rightLineNumber;\n                right.type = DiffType.DEFAULT;\n                right.value = line;\n            }\n            counter += 1;\n            return { right: right, left: left };\n        })\n            .filter(Boolean);\n    };\n    diffArray.forEach(function (_a, index) {\n        var added = _a.added, removed = _a.removed, value = _a.value;\n        lineInformation = __spread(lineInformation, getLineInformation(value, index, added, removed));\n    });\n    return {\n        lineInformation: lineInformation,\n        diffLines: diffLines,\n    };\n};\nexports.computeLineInformation = computeLineInformation;\n"]},"metadata":{},"sourceType":"script"}