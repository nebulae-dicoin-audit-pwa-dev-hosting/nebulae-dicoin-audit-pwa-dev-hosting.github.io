{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nimport _ from '@lodash';\nimport useNavigatorPermissions from './NavigatorPermissions';\nconst dopScale = {\n  Ideal: {\n    min: 0,\n    max: 0.9\n  },\n  Excellent: {\n    min: 1,\n    max: 2\n  },\n  Good: {\n    min: 3,\n    max: 5\n  },\n  Moderate: {\n    min: 6,\n    max: 10\n  },\n  Fair: {\n    min: 11,\n    max: 20\n  },\n  Poor: {\n    min: 21,\n    max: 21\n  }\n};\n\nconst useGeolocation = function () {\n  let {\n    enableHighAccuracy,\n    maximumAge,\n    timeout\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let callback = arguments.length > 1 ? arguments[1] : undefined;\n  const [coordinates, setCoordinates] = useState({\n    coords: {\n      accuracy: null,\n      altitude: null,\n      altitudeAccuracy: null,\n      heading: null,\n      latitude: null,\n      longitude: null,\n      speed: null\n    },\n    timestamp: null,\n    error: null\n  });\n  const watchId = useRef();\n  const {\n    status,\n    error\n  } = useNavigatorPermissions('geolocation');\n\n  function generateDop(accuracy, _ref, _ref2) {\n    let {\n      min: minAccuaracy,\n      max: maxAccuaracy\n    } = _ref;\n    let {\n      min: minDop,\n      max: maxDop\n    } = _ref2;\n\n    /*\n    porcentaje dentro del rango de precisiÃ³n =  (7-3)/(10-3) = 0.57142857142\n    porcentaje del rango DOP = (2-1)*0.57142857142+1 = 1.57142857142\n    DOP con redondeo = 1.6\n    */\n    const accuaracyPercentage = (accuracy - minAccuaracy) / (maxAccuaracy - minAccuaracy);\n    const dopPercentage = (maxDop - minDop) * accuaracyPercentage + minDop;\n    return Math.round(dopPercentage * 10) / 10;\n  }\n\n  function convertAccuracyToDop(accuracy) {\n    if (accuracy >= 0 && accuracy < 3) return generateDop(accuracy, {\n      min: 0,\n      max: 3\n    }, dopScale.Ideal);\n    if (accuracy >= 3 && accuracy < 10) return generateDop(accuracy, {\n      min: 3,\n      max: 10\n    }, dopScale.Excellent);\n    if (accuracy >= 10 && accuracy < 50) return generateDop(accuracy, {\n      min: 10,\n      max: 50\n    }, dopScale.Good);\n    if (accuracy >= 50 && accuracy < 100) return generateDop(accuracy, {\n      min: 50,\n      max: 100\n    }, dopScale.Moderate); // if (accuracy >= 100 && accuracy < 300)\n    //   return generateDop(accuracy, { min: 100, max: 300 }, dopScale.Fare);\n    // if (accuracy >= 300) return generateDop(accuracy, { min: 300, max: 9999 }, dopScale.Poor);\n\n    return 10.9;\n  }\n\n  useEffect(() => {\n    let didCancel;\n\n    const updateCoordinates = _ref3 => {\n      let {\n        coords = {},\n        timestamp\n      } = _ref3;\n      const {\n        latitude,\n        longitude,\n        speed,\n        accuracy\n      } = coords;\n      const {\n        latitude: coorLat,\n        longitude: coorLon,\n        speed: coorSpeed\n      } = coordinates;\n\n      if (!didCancel) {\n        if (!_.isEqual({\n          latitude: coorLat,\n          longitude: coorLon,\n          speed: coorSpeed\n        }, {\n          latitude,\n          longitude,\n          speed\n        })) {\n          setCoordinates({\n            coords: {\n              latitude,\n              longitude,\n              accuracy,\n              dop: convertAccuracyToDop(accuracy),\n              speed: parseInt(speed, 10) || 0\n            },\n            timestamp,\n            error: null\n          });\n        }\n\n        if (callback instanceof Function) {\n          callback({\n            coords: {\n              latitude,\n              longitude,\n              speed: parseInt(speed, 10) || 0\n            },\n            timestamp,\n            error: null\n          });\n        }\n      }\n    };\n\n    const setError = error => {\n      if (!didCancel) {\n        watchId.current = null;\n        setCoordinates({\n          coords: {\n            latitude: null,\n            longitude: null,\n            accuracy: null,\n            dop: null,\n            speed: 0\n          },\n          timestamp: null,\n          error\n        });\n      }\n    };\n\n    if (status !== 'granted') {\n      if (watchId.current) {\n        navigator.geolocation.clearWatch(watchId.current);\n        watchId.current = null;\n      }\n\n      navigator.geolocation.getCurrentPosition(updateCoordinates, setError, {\n        enableHighAccuracy,\n        maximumAge,\n        timeout\n      });\n    } else if (navigator.geolocation && !watchId.current) {\n      watchId.current = navigator.geolocation.watchPosition(updateCoordinates, setError, {\n        enableHighAccuracy,\n        maximumAge,\n        timeout\n      });\n    }\n\n    return () => {\n      if (watchId.current) {\n        navigator.geolocation.clearWatch(watchId.current);\n      }\n\n      didCancel = true;\n    };\n  }, [navigator.geolocation, status]);\n  return coordinates;\n};\n\nexport default useGeolocation;","map":{"version":3,"sources":["/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/src/app/main/travels/tools/useGeolocation/GeoLocation.js"],"names":["useEffect","useRef","useState","_","useNavigatorPermissions","dopScale","Ideal","min","max","Excellent","Good","Moderate","Fair","Poor","useGeolocation","enableHighAccuracy","maximumAge","timeout","callback","coordinates","setCoordinates","coords","accuracy","altitude","altitudeAccuracy","heading","latitude","longitude","speed","timestamp","error","watchId","status","generateDop","minAccuaracy","maxAccuaracy","minDop","maxDop","accuaracyPercentage","dopPercentage","Math","round","convertAccuracyToDop","didCancel","updateCoordinates","coorLat","coorLon","coorSpeed","isEqual","dop","parseInt","Function","setError","current","navigator","geolocation","clearWatch","getCurrentPosition","watchPosition"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport _ from '@lodash';\nimport useNavigatorPermissions from './NavigatorPermissions';\n\nconst dopScale = {\n  Ideal: {\n    min: 0,\n    max: 0.9,\n  },\n  Excellent: {\n    min: 1,\n    max: 2,\n  },\n  Good: {\n    min: 3,\n    max: 5,\n  },\n  Moderate: {\n    min: 6,\n    max: 10,\n  },\n  Fair: {\n    min: 11,\n    max: 20,\n  },\n  Poor: {\n    min: 21,\n    max: 21,\n  },\n};\n\nconst useGeolocation = ({ enableHighAccuracy, maximumAge, timeout } = {}, callback) => {\n  const [coordinates, setCoordinates] = useState({\n    coords: {\n      accuracy: null,\n      altitude: null,\n      altitudeAccuracy: null,\n      heading: null,\n      latitude: null,\n      longitude: null,\n      speed: null,\n    },\n    timestamp: null,\n    error: null,\n  });\n  const watchId = useRef();\n  const { status, error } = useNavigatorPermissions('geolocation');\n\n  function generateDop(\n    accuracy,\n    { min: minAccuaracy, max: maxAccuaracy },\n    { min: minDop, max: maxDop }\n  ) {\n    /*\n    porcentaje dentro del rango de precisiÃ³n =  (7-3)/(10-3) = 0.57142857142\n    porcentaje del rango DOP = (2-1)*0.57142857142+1 = 1.57142857142\n    DOP con redondeo = 1.6\n    */\n    const accuaracyPercentage = (accuracy - minAccuaracy) / (maxAccuaracy - minAccuaracy);\n    const dopPercentage = (maxDop - minDop) * accuaracyPercentage + minDop;\n    return Math.round(dopPercentage * 10) / 10;\n  }\n  function convertAccuracyToDop(accuracy) {\n    if (accuracy >= 0 && accuracy < 3)\n      return generateDop(accuracy, { min: 0, max: 3 }, dopScale.Ideal);\n    if (accuracy >= 3 && accuracy < 10)\n      return generateDop(accuracy, { min: 3, max: 10 }, dopScale.Excellent);\n    if (accuracy >= 10 && accuracy < 50)\n      return generateDop(accuracy, { min: 10, max: 50 }, dopScale.Good);\n    if (accuracy >= 50 && accuracy < 100)\n      return generateDop(accuracy, { min: 50, max: 100 }, dopScale.Moderate);\n    // if (accuracy >= 100 && accuracy < 300)\n    //   return generateDop(accuracy, { min: 100, max: 300 }, dopScale.Fare);\n    // if (accuracy >= 300) return generateDop(accuracy, { min: 300, max: 9999 }, dopScale.Poor);\n    return 10.9;\n  }\n\n  useEffect(() => {\n    let didCancel;\n    const updateCoordinates = ({ coords = {}, timestamp }) => {\n      const { latitude, longitude, speed, accuracy } = coords;\n      const { latitude: coorLat, longitude: coorLon, speed: coorSpeed } = coordinates;\n      if (!didCancel) {\n        if (\n          !_.isEqual(\n            { latitude: coorLat, longitude: coorLon, speed: coorSpeed },\n            { latitude, longitude, speed }\n          )\n        ) {\n          setCoordinates({\n            coords: {\n              latitude,\n              longitude,\n              accuracy,\n              dop: convertAccuracyToDop(accuracy),\n              speed: parseInt(speed, 10) || 0,\n            },\n            timestamp,\n            error: null,\n          });\n        }\n        if (callback instanceof Function) {\n          callback({\n            coords: {\n              latitude,\n              longitude,\n              speed: parseInt(speed, 10) || 0,\n            },\n            timestamp,\n            error: null,\n          });\n        }\n      }\n    };\n\n    const setError = (error) => {\n      if (!didCancel) {\n        watchId.current = null;\n        setCoordinates({\n          coords: {\n            latitude: null,\n            longitude: null,\n            accuracy: null,\n            dop: null,\n            speed: 0,\n          },\n          timestamp: null,\n          error,\n        });\n      }\n    };\n\n    if (status !== 'granted') {\n      if (watchId.current) {\n        navigator.geolocation.clearWatch(watchId.current);\n        watchId.current = null;\n      }\n      navigator.geolocation.getCurrentPosition(updateCoordinates, setError, {\n        enableHighAccuracy,\n        maximumAge,\n        timeout,\n      });\n    } else if (navigator.geolocation && !watchId.current) {\n      watchId.current = navigator.geolocation.watchPosition(updateCoordinates, setError, {\n        enableHighAccuracy,\n        maximumAge,\n        timeout,\n      });\n    }\n\n    return () => {\n      if (watchId.current) {\n        navigator.geolocation.clearWatch(watchId.current);\n      }\n      didCancel = true;\n    };\n  }, [navigator.geolocation, status]);\n\n  return coordinates;\n};\n\nexport default useGeolocation;\n"]},"metadata":{},"sourceType":"module"}