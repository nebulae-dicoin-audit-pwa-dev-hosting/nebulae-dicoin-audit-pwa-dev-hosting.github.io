{"ast":null,"code":"/* eslint import/no-extraneous-dependencies: off */\nimport { createSlice } from '@reduxjs/toolkit';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport history from '@history';\nimport _ from '@lodash';\nimport { setInitialSettings, setDefaultSettings } from 'app/store/fuse/settingsSlice';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport auth0Service from 'app/services/auth0Service';\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nexport const setUserDataAuth0 = tokenData => async dispatch => {\n  const user = {\n    role: ['admin'],\n    from: 'auth0',\n    data: {\n      displayName: tokenData.username || tokenData.name,\n      photoURL: tokenData.picture,\n      email: tokenData.email,\n      settings: tokenData.user_metadata && tokenData.user_metadata.settings ? tokenData.user_metadata.settings : {},\n      shortcuts: tokenData.user_metadata && tokenData.user_metadata.shortcuts ? tokenData.user_metadata.shortcuts : []\n    }\n  };\n  return dispatch(setUserData(user));\n};\nexport const setUserDataFirebase = (user, authUser) => async dispatch => {\n  if (user && user.data && user.data.settings && user.data.settings.theme && user.data.settings.layout && user.data.settings.layout.style) {\n    // Set user data but do not update\n    return dispatch(setUserData(user));\n  } // Create missing user settings\n\n\n  return dispatch(createUserSettingsFirebase(authUser));\n};\nexport const createUserSettingsFirebase = authUser => async (dispatch, getState) => {\n  const guestUser = getState().auth.user;\n  const fuseDefaultSettings = getState().fuse.settings.defaults;\n  const {\n    currentUser\n  } = firebase.auth();\n  /**\n   * Merge with current Settings\n   */\n\n  const user = _.merge({}, guestUser, {\n    uid: authUser.uid,\n    from: 'firebase',\n    role: ['admin'],\n    data: {\n      displayName: authUser.displayName,\n      email: authUser.email,\n      settings: { ...fuseDefaultSettings\n      }\n    }\n  });\n\n  currentUser.updateProfile(user.data);\n  dispatch(updateUserData(user));\n  return dispatch(setUserData(user));\n};\nexport const setUserData = user => async (dispatch, getState) => {\n  /*\n        You can redirect the logged-in user to a specific route depending on his role\n         */\n  history.location.state = {\n    redirectUrl: user.redirectUrl // for example 'apps/academy'\n\n  };\n  /*\n    Set User Settings\n     */\n\n  dispatch(setDefaultSettings(user.data.settings));\n  dispatch(setUser(user));\n};\nexport const updateUserSettings = settings => async (dispatch, getState) => {\n  const oldUser = getState().auth.user;\n\n  const user = _.merge({}, oldUser, {\n    data: {\n      settings\n    }\n  });\n\n  dispatch(updateUserData(user));\n  return dispatch(setUserData(user));\n};\nexport const updateUserShortcuts = shortcuts => async (dispatch, getState) => {\n  const {\n    user\n  } = getState().auth;\n  const newUser = { ...user,\n    data: { ...user.data,\n      shortcuts\n    }\n  };\n  dispatch(updateUserData(newUser));\n  return dispatch(setUserData(newUser));\n};\nexport const logoutUser = () => async (dispatch, getState) => {\n  const {\n    user\n  } = getState().auth;\n\n  if (!user.role || user.role.length === 0) {\n    // is guest\n    return null;\n  }\n\n  history.push({\n    pathname: '/'\n  });\n\n  switch (user.from) {\n    case 'firebase':\n      {\n        firebaseService.signOut();\n        break;\n      }\n\n    case 'auth0':\n      {\n        auth0Service.logout();\n        break;\n      }\n\n    default:\n      {\n        jwtService.logout();\n      }\n  }\n\n  dispatch(setInitialSettings());\n  return dispatch(userLoggedOut());\n};\nexport const updateUserData = user => async (dispatch, getState) => {\n  if (!user.role || user.role.length === 0) {\n    // is guest\n    return;\n  }\n\n  switch (user.from) {\n    case 'firebase':\n      {\n        firebaseService.updateUserData(user).then(() => {\n          dispatch(showMessage({\n            message: 'User data saved to firebase'\n          }));\n        }).catch(error => {\n          dispatch(showMessage({\n            message: error.message\n          }));\n        });\n        break;\n      }\n\n    case 'auth0':\n      {\n        auth0Service.updateUserData({\n          settings: user.data.settings,\n          shortcuts: user.data.shortcuts\n        }).then(() => {\n          dispatch(showMessage({\n            message: 'User data saved to auth0'\n          }));\n        }).catch(error => {\n          dispatch(showMessage({\n            message: error.message\n          }));\n        });\n        break;\n      }\n\n    default:\n      {\n        jwtService.updateUserData(user).then(() => {\n          dispatch(showMessage({\n            message: 'User data saved with api'\n          }));\n        }).catch(error => {\n          dispatch(showMessage({\n            message: error.message\n          }));\n        });\n        break;\n      }\n  }\n};\nconst initialState = {\n  role: [],\n  // guest\n  data: {\n    displayName: 'GTPC',\n    photoURL: 'assets/images/logos/logo-area-metropolitana.png',\n    email: 'AuditorÃ­a v1.7.4-beta',\n    shortcuts: ['calendar', 'mail', 'contacts', 'todo']\n  }\n};\nconst userSlice = createSlice({\n  name: 'auth/user',\n  initialState,\n  reducers: {\n    setUser: (state, action) => action.payload,\n    userLoggedOut: (state, action) => initialState\n  },\n  extraReducers: {}\n});\nexport const {\n  setUser,\n  userLoggedOut\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/src/app/auth/store/userSlice.js"],"names":["createSlice","firebase","history","_","setInitialSettings","setDefaultSettings","showMessage","auth0Service","firebaseService","jwtService","setUserDataAuth0","tokenData","dispatch","user","role","from","data","displayName","username","name","photoURL","picture","email","settings","user_metadata","shortcuts","setUserData","setUserDataFirebase","authUser","theme","layout","style","createUserSettingsFirebase","getState","guestUser","auth","fuseDefaultSettings","fuse","defaults","currentUser","merge","uid","updateProfile","updateUserData","location","state","redirectUrl","setUser","updateUserSettings","oldUser","updateUserShortcuts","newUser","logoutUser","length","push","pathname","signOut","logout","userLoggedOut","then","message","catch","error","initialState","userSlice","reducers","action","payload","extraReducers","actions","reducer"],"mappings":"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","sourcesContent":["/* eslint import/no-extraneous-dependencies: off */\nimport { createSlice } from '@reduxjs/toolkit';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport history from '@history';\nimport _ from '@lodash';\nimport { setInitialSettings, setDefaultSettings } from 'app/store/fuse/settingsSlice';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport auth0Service from 'app/services/auth0Service';\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\n\nexport const setUserDataAuth0 = (tokenData) => async (dispatch) => {\n  const user = {\n    role: ['admin'],\n    from: 'auth0',\n    data: {\n      displayName: tokenData.username || tokenData.name,\n      photoURL: tokenData.picture,\n      email: tokenData.email,\n      settings:\n        tokenData.user_metadata && tokenData.user_metadata.settings\n          ? tokenData.user_metadata.settings\n          : {},\n      shortcuts:\n        tokenData.user_metadata && tokenData.user_metadata.shortcuts\n          ? tokenData.user_metadata.shortcuts\n          : [],\n    },\n  };\n\n  return dispatch(setUserData(user));\n};\n\nexport const setUserDataFirebase = (user, authUser) => async (dispatch) => {\n  if (\n    user &&\n    user.data &&\n    user.data.settings &&\n    user.data.settings.theme &&\n    user.data.settings.layout &&\n    user.data.settings.layout.style\n  ) {\n    // Set user data but do not update\n    return dispatch(setUserData(user));\n  }\n\n  // Create missing user settings\n  return dispatch(createUserSettingsFirebase(authUser));\n};\n\nexport const createUserSettingsFirebase = (authUser) => async (dispatch, getState) => {\n  const guestUser = getState().auth.user;\n  const fuseDefaultSettings = getState().fuse.settings.defaults;\n  const { currentUser } = firebase.auth();\n\n  /**\n   * Merge with current Settings\n   */\n  const user = _.merge({}, guestUser, {\n    uid: authUser.uid,\n    from: 'firebase',\n    role: ['admin'],\n    data: {\n      displayName: authUser.displayName,\n      email: authUser.email,\n      settings: { ...fuseDefaultSettings },\n    },\n  });\n  currentUser.updateProfile(user.data);\n\n  dispatch(updateUserData(user));\n\n  return dispatch(setUserData(user));\n};\n\nexport const setUserData = (user) => async (dispatch, getState) => {\n  /*\n        You can redirect the logged-in user to a specific route depending on his role\n         */\n\n  history.location.state = {\n    redirectUrl: user.redirectUrl, // for example 'apps/academy'\n  };\n\n  /*\n    Set User Settings\n     */\n  dispatch(setDefaultSettings(user.data.settings));\n\n  dispatch(setUser(user));\n};\n\nexport const updateUserSettings = (settings) => async (dispatch, getState) => {\n  const oldUser = getState().auth.user;\n  const user = _.merge({}, oldUser, { data: { settings } });\n\n  dispatch(updateUserData(user));\n\n  return dispatch(setUserData(user));\n};\n\nexport const updateUserShortcuts = (shortcuts) => async (dispatch, getState) => {\n  const { user } = getState().auth;\n  const newUser = {\n    ...user,\n    data: {\n      ...user.data,\n      shortcuts,\n    },\n  };\n\n  dispatch(updateUserData(newUser));\n\n  return dispatch(setUserData(newUser));\n};\n\nexport const logoutUser = () => async (dispatch, getState) => {\n  const { user } = getState().auth;\n\n  if (!user.role || user.role.length === 0) {\n    // is guest\n    return null;\n  }\n\n  history.push({\n    pathname: '/',\n  });\n\n  switch (user.from) {\n    case 'firebase': {\n      firebaseService.signOut();\n      break;\n    }\n    case 'auth0': {\n      auth0Service.logout();\n      break;\n    }\n    default: {\n      jwtService.logout();\n    }\n  }\n\n  dispatch(setInitialSettings());\n\n  return dispatch(userLoggedOut());\n};\n\nexport const updateUserData = (user) => async (dispatch, getState) => {\n  if (!user.role || user.role.length === 0) {\n    // is guest\n    return;\n  }\n  switch (user.from) {\n    case 'firebase': {\n      firebaseService\n        .updateUserData(user)\n        .then(() => {\n          dispatch(showMessage({ message: 'User data saved to firebase' }));\n        })\n        .catch((error) => {\n          dispatch(showMessage({ message: error.message }));\n        });\n      break;\n    }\n    case 'auth0': {\n      auth0Service\n        .updateUserData({\n          settings: user.data.settings,\n          shortcuts: user.data.shortcuts,\n        })\n        .then(() => {\n          dispatch(showMessage({ message: 'User data saved to auth0' }));\n        })\n        .catch((error) => {\n          dispatch(showMessage({ message: error.message }));\n        });\n      break;\n    }\n    default: {\n      jwtService\n        .updateUserData(user)\n        .then(() => {\n          dispatch(showMessage({ message: 'User data saved with api' }));\n        })\n        .catch((error) => {\n          dispatch(showMessage({ message: error.message }));\n        });\n      break;\n    }\n  }\n};\n\nconst initialState = {\n  role: [], // guest\n  data: {\n    displayName: 'GTPC',\n    photoURL: 'assets/images/logos/logo-area-metropolitana.png',\n    email: 'AuditorÃ­a v1.7.4-beta',\n    shortcuts: ['calendar', 'mail', 'contacts', 'todo'],\n  },\n};\n\nconst userSlice = createSlice({\n  name: 'auth/user',\n  initialState,\n  reducers: {\n    setUser: (state, action) => action.payload,\n    userLoggedOut: (state, action) => initialState,\n  },\n  extraReducers: {},\n});\n\nexport const { setUser, userLoggedOut } = userSlice.actions;\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}