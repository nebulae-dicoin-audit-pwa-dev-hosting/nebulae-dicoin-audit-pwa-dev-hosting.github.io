{"ast":null,"code":"import { feature, featureCollection, point } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport lineSegment from \"@turf/line-segment\";\nimport { featureEach } from \"@turf/meta\";\nimport rbush from \"geojson-rbush\";\n/**\n * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).\n *\n * @name lineIntersect\n * @param {GeoJSON} line1 any LineString or Polygon\n * @param {GeoJSON} line2 any LineString or Polygon\n * @returns {FeatureCollection<Point>} point(s) that intersect both\n * @example\n * var line1 = turf.lineString([[126, -11], [129, -21]]);\n * var line2 = turf.lineString([[123, -18], [131, -14]]);\n * var intersects = turf.lineIntersect(line1, line2);\n *\n * //addToMap\n * var addToMap = [line1, line2, intersects]\n */\n\nfunction lineIntersect(line1, line2) {\n  var unique = {};\n  var results = []; // First, normalize geometries to features\n  // Then, handle simple 2-vertex segments\n\n  if (line1.type === \"LineString\") {\n    line1 = feature(line1);\n  }\n\n  if (line2.type === \"LineString\") {\n    line2 = feature(line2);\n  }\n\n  if (line1.type === \"Feature\" && line2.type === \"Feature\" && line1.geometry !== null && line2.geometry !== null && line1.geometry.type === \"LineString\" && line2.geometry.type === \"LineString\" && line1.geometry.coordinates.length === 2 && line2.geometry.coordinates.length === 2) {\n    var intersect = intersects(line1, line2);\n\n    if (intersect) {\n      results.push(intersect);\n    }\n\n    return featureCollection(results);\n  } // Handles complex GeoJSON Geometries\n\n\n  var tree = rbush();\n  tree.load(lineSegment(line2));\n  featureEach(lineSegment(line1), function (segment) {\n    featureEach(tree.search(segment), function (match) {\n      var intersect = intersects(segment, match);\n\n      if (intersect) {\n        // prevent duplicate points https://github.com/Turfjs/turf/issues/688\n        var key = getCoords(intersect).join(\",\");\n\n        if (!unique[key]) {\n          unique[key] = true;\n          results.push(intersect);\n        }\n      }\n    });\n  });\n  return featureCollection(results);\n}\n/**\n * Find a point that intersects LineStrings with two coordinates each\n *\n * @private\n * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)\n * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)\n * @returns {Feature<Point>} intersecting GeoJSON Point\n */\n\n\nfunction intersects(line1, line2) {\n  var coords1 = getCoords(line1);\n  var coords2 = getCoords(line2);\n\n  if (coords1.length !== 2) {\n    throw new Error(\"<intersects> line1 must only contain 2 coordinates\");\n  }\n\n  if (coords2.length !== 2) {\n    throw new Error(\"<intersects> line2 must only contain 2 coordinates\");\n  }\n\n  var x1 = coords1[0][0];\n  var y1 = coords1[0][1];\n  var x2 = coords1[1][0];\n  var y2 = coords1[1][1];\n  var x3 = coords2[0][0];\n  var y3 = coords2[0][1];\n  var x4 = coords2[1][0];\n  var y4 = coords2[1][1];\n  var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n  var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n  var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n\n  if (denom === 0) {\n    if (numeA === 0 && numeB === 0) {\n      return null;\n    }\n\n    return null;\n  }\n\n  var uA = numeA / denom;\n  var uB = numeB / denom;\n\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n    var x = x1 + uA * (x2 - x1);\n    var y = y1 + uA * (y2 - y1);\n    return point([x, y]);\n  }\n\n  return null;\n}\n\nexport default lineIntersect;","map":{"version":3,"sources":["/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/node_modules/@turf/line-intersect/dist/es/index.js"],"names":["feature","featureCollection","point","getCoords","lineSegment","featureEach","rbush","lineIntersect","line1","line2","unique","results","type","geometry","coordinates","length","intersect","intersects","push","tree","load","segment","search","match","key","join","coords1","coords2","Error","x1","y1","x2","y2","x3","y3","x4","y4","denom","numeA","numeB","uA","uB","x","y"],"mappings":"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","sourcesContent":["import { feature, featureCollection, point, } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport lineSegment from \"@turf/line-segment\";\nimport { featureEach } from \"@turf/meta\";\nimport rbush from \"geojson-rbush\";\n/**\n * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).\n *\n * @name lineIntersect\n * @param {GeoJSON} line1 any LineString or Polygon\n * @param {GeoJSON} line2 any LineString or Polygon\n * @returns {FeatureCollection<Point>} point(s) that intersect both\n * @example\n * var line1 = turf.lineString([[126, -11], [129, -21]]);\n * var line2 = turf.lineString([[123, -18], [131, -14]]);\n * var intersects = turf.lineIntersect(line1, line2);\n *\n * //addToMap\n * var addToMap = [line1, line2, intersects]\n */\nfunction lineIntersect(line1, line2) {\n    var unique = {};\n    var results = [];\n    // First, normalize geometries to features\n    // Then, handle simple 2-vertex segments\n    if (line1.type === \"LineString\") {\n        line1 = feature(line1);\n    }\n    if (line2.type === \"LineString\") {\n        line2 = feature(line2);\n    }\n    if (line1.type === \"Feature\" &&\n        line2.type === \"Feature\" &&\n        line1.geometry !== null &&\n        line2.geometry !== null &&\n        line1.geometry.type === \"LineString\" &&\n        line2.geometry.type === \"LineString\" &&\n        line1.geometry.coordinates.length === 2 &&\n        line2.geometry.coordinates.length === 2) {\n        var intersect = intersects(line1, line2);\n        if (intersect) {\n            results.push(intersect);\n        }\n        return featureCollection(results);\n    }\n    // Handles complex GeoJSON Geometries\n    var tree = rbush();\n    tree.load(lineSegment(line2));\n    featureEach(lineSegment(line1), function (segment) {\n        featureEach(tree.search(segment), function (match) {\n            var intersect = intersects(segment, match);\n            if (intersect) {\n                // prevent duplicate points https://github.com/Turfjs/turf/issues/688\n                var key = getCoords(intersect).join(\",\");\n                if (!unique[key]) {\n                    unique[key] = true;\n                    results.push(intersect);\n                }\n            }\n        });\n    });\n    return featureCollection(results);\n}\n/**\n * Find a point that intersects LineStrings with two coordinates each\n *\n * @private\n * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)\n * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)\n * @returns {Feature<Point>} intersecting GeoJSON Point\n */\nfunction intersects(line1, line2) {\n    var coords1 = getCoords(line1);\n    var coords2 = getCoords(line2);\n    if (coords1.length !== 2) {\n        throw new Error(\"<intersects> line1 must only contain 2 coordinates\");\n    }\n    if (coords2.length !== 2) {\n        throw new Error(\"<intersects> line2 must only contain 2 coordinates\");\n    }\n    var x1 = coords1[0][0];\n    var y1 = coords1[0][1];\n    var x2 = coords1[1][0];\n    var y2 = coords1[1][1];\n    var x3 = coords2[0][0];\n    var y3 = coords2[0][1];\n    var x4 = coords2[1][0];\n    var y4 = coords2[1][1];\n    var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n    var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n    var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n    if (denom === 0) {\n        if (numeA === 0 && numeB === 0) {\n            return null;\n        }\n        return null;\n    }\n    var uA = numeA / denom;\n    var uB = numeB / denom;\n    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n        var x = x1 + uA * (x2 - x1);\n        var y = y1 + uA * (y2 - y1);\n        return point([x, y]);\n    }\n    return null;\n}\nexport default lineIntersect;\n"]},"metadata":{},"sourceType":"module"}