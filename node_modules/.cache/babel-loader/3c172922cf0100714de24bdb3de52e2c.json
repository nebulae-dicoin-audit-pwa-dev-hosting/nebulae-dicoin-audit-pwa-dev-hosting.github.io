{"ast":null,"code":"import { featureCollection, lineString, multiLineString } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\n/**\n * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a\n * {@link FeatureCollection} of {@link LineString|(Multi)LineString}.\n *\n * @name polygonToLine\n * @param {Feature<Polygon|MultiPolygon>} poly Feature to convert\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] translates GeoJSON properties to Feature\n * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString\n * @example\n * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\n *\n * var line = turf.polygonToLine(poly);\n *\n * //addToMap\n * var addToMap = [line];\n */\n\nexport default function (poly, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = getGeom(poly);\n\n  if (!options.properties && poly.type === \"Feature\") {\n    options.properties = poly.properties;\n  }\n\n  switch (geom.type) {\n    case \"Polygon\":\n      return polygonToLine(geom, options);\n\n    case \"MultiPolygon\":\n      return multiPolygonToLine(geom, options);\n\n    default:\n      throw new Error(\"invalid poly\");\n  }\n}\n/**\n * @private\n */\n\nexport function polygonToLine(poly, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = getGeom(poly);\n  var coords = geom.coordinates;\n  var properties = options.properties ? options.properties : poly.type === \"Feature\" ? poly.properties : {};\n  return coordsToLine(coords, properties);\n}\n/**\n * @private\n */\n\nexport function multiPolygonToLine(multiPoly, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = getGeom(multiPoly);\n  var coords = geom.coordinates;\n  var properties = options.properties ? options.properties : multiPoly.type === \"Feature\" ? multiPoly.properties : {};\n  var lines = [];\n  coords.forEach(function (coord) {\n    lines.push(coordsToLine(coord, properties));\n  });\n  return featureCollection(lines);\n}\n/**\n * @private\n */\n\nexport function coordsToLine(coords, properties) {\n  if (coords.length > 1) {\n    return multiLineString(coords, properties);\n  }\n\n  return lineString(coords[0], properties);\n}","map":null,"metadata":{},"sourceType":"module"}