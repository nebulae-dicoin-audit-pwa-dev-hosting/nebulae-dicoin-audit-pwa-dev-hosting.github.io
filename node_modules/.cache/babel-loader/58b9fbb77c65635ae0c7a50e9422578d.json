{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _captcha_input = require('../../ui/input/captcha_input');\n\nvar _captcha_input2 = _interopRequireDefault(_captcha_input);\n\nvar _index = require('../../core/index');\n\nvar l = _interopRequireWildcard(_index);\n\nvar _index2 = require('../../store/index');\n\nvar _captcha = require('../captcha');\n\nvar captchaField = _interopRequireWildcard(_captcha);\n\nvar _index3 = require('../index');\n\nvar _recaptcha = require('./recaptcha');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable no-nested-ternary */\n\n\nvar CaptchaPane = function (_React$Component) {\n  _inherits(CaptchaPane, _React$Component);\n\n  function CaptchaPane() {\n    _classCallCheck(this, CaptchaPane);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  CaptchaPane.prototype.render = function render() {\n    var _props = this.props,\n        i18n = _props.i18n,\n        lock = _props.lock,\n        onReload = _props.onReload;\n    var lockId = l.id(lock);\n    var captcha = l.captcha(lock);\n    var value = (0, _index3.getFieldValue)(lock, 'captcha');\n    var isValid = !(0, _index3.isFieldVisiblyInvalid)(lock, 'captcha');\n    var provider = captcha.get('provider');\n\n    if ((0, _recaptcha.isRecaptcha)(provider)) {\n      var _handleChange = function _handleChange(value) {\n        (0, _index2.swap)(_index2.updateEntity, 'lock', lockId, captchaField.set, value);\n      };\n\n      var reset = function reset() {\n        _handleChange();\n      };\n\n      return _react2.default.createElement(_recaptcha.ReCAPTCHA, {\n        provider: provider,\n        sitekey: captcha.get('siteKey'),\n        onChange: _handleChange,\n        onExpired: reset,\n        hl: l.ui.language(lock),\n        isValid: isValid,\n        value: value\n      });\n    }\n\n    function handleChange(e) {\n      (0, _index2.swap)(_index2.updateEntity, 'lock', lockId, captchaField.set, e.target.value);\n    }\n\n    var placeholder = captcha.get('type') === 'code' ? i18n.str('captchaCodeInputPlaceholder') : i18n.str('captchaMathInputPlaceholder'); // TODO: blankErrorHint is deprecated.\n    // It is kept for backwards compatibiliy in the code for the customers overwriting\n    // it with languageDictionary. It can be removed in the next major release.\n\n    return _react2.default.createElement(_captcha_input2.default, {\n      lockId: lockId,\n      image: captcha.get('image'),\n      placeholder: placeholder,\n      isValid: isValid,\n      onChange: handleChange,\n      onReload: onReload,\n      value: value,\n      invalidHint: i18n.str('blankErrorHint') || i18n.str('blankCaptchaErrorHint')\n    });\n  };\n\n  return CaptchaPane;\n}(_react2.default.Component);\n\nexports.default = CaptchaPane;\nCaptchaPane.propTypes = {\n  i18n: _propTypes2.default.object.isRequired,\n  lock: _propTypes2.default.object.isRequired,\n  error: _propTypes2.default.bool,\n  onReload: _propTypes2.default.func.isRequired\n};\nCaptchaPane.defaultProps = {\n  error: false\n};","map":null,"metadata":{},"sourceType":"script"}