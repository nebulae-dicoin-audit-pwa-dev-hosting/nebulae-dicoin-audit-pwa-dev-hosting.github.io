{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar imprecise = function imprecise(number) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  var factor = Math.pow(10, decimals);\n  return Math.round(number * factor) / factor;\n};\n\nvar decimal2sexagesimalNext = function decimal2sexagesimalNext(decimal) {\n  var _decimal$toString$spl = decimal.toString().split(\".\"),\n      _decimal$toString$spl2 = _slicedToArray(_decimal$toString$spl, 2),\n      pre = _decimal$toString$spl2[0],\n      post = _decimal$toString$spl2[1];\n\n  var deg = Math.abs(Number(pre));\n  var min0 = Number(\"0.\" + (post || 0)) * 60;\n  var sec0 = min0.toString().split(\".\");\n  var min = Math.floor(min0);\n  var sec = imprecise(Number(\"0.\" + (sec0[1] || 0)) * 60).toString();\n\n  var _sec$split = sec.split(\".\"),\n      _sec$split2 = _slicedToArray(_sec$split, 2),\n      secPreDec = _sec$split2[0],\n      _sec$split2$ = _sec$split2[1],\n      secDec = _sec$split2$ === void 0 ? \"0\" : _sec$split2$;\n\n  return deg + \"\\xB0 \" + min.toString().padStart(2, \"0\") + \"' \" + secPreDec.padStart(2, \"0\") + \".\" + secDec.padEnd(1, \"0\") + \"\\\"\";\n};\n\nvar _default = decimal2sexagesimalNext;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}