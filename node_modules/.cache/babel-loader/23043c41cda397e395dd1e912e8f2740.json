{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _slicedToArray = require(\"/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar lodash_1 = __importDefault(require(\"lodash\"));\n\nvar utils = __importStar(require(\"./utils\"));\n\nvar selector_1 = require(\"./selector\");\n/** Replicates data into a both a master and a replica db. Assumes both are identical at start\n * and then only uses master for finds and does all changes to both\n * Warning: removing a collection removes it from the underlying master and replica!\n */\n\n\nvar ReplicatingDb = /*#__PURE__*/function () {\n  function ReplicatingDb(masterDb, replicaDb) {\n    _classCallCheck(this, ReplicatingDb);\n\n    this.collections = {};\n    this.masterDb = masterDb;\n    this.replicaDb = replicaDb;\n  }\n\n  _createClass(ReplicatingDb, [{\n    key: \"addCollection\",\n    value: function addCollection(name, success, error) {\n      var collection = new Collection(name, this.masterDb[name], this.replicaDb[name]);\n      this[name] = collection;\n      this.collections[name] = collection;\n\n      if (success != null) {\n        return success();\n      }\n    }\n  }, {\n    key: \"removeCollection\",\n    value: function removeCollection(name, success, error) {\n      delete this[name];\n      delete this.collections[name];\n\n      if (success != null) {\n        return success();\n      }\n    }\n  }, {\n    key: \"getCollectionNames\",\n    value: function getCollectionNames() {\n      return lodash_1.default.keys(this.collections);\n    }\n  }]);\n\n  return ReplicatingDb;\n}();\n\nexports.default = ReplicatingDb; // Replicated collection.\n\nvar Collection = /*#__PURE__*/function () {\n  function Collection(name, masterCol, replicaCol) {\n    _classCallCheck(this, Collection);\n\n    this.name = name;\n    this.masterCol = masterCol;\n    this.replicaCol = replicaCol;\n  }\n\n  _createClass(Collection, [{\n    key: \"find\",\n    value: function find(selector, options) {\n      return this.masterCol.find(selector, options);\n    }\n  }, {\n    key: \"findOne\",\n    value: function findOne(selector, options, success, error) {\n      return this.masterCol.findOne(selector, options, success, error);\n    }\n  }, {\n    key: \"upsert\",\n    value: function upsert(docs, bases, success, error) {\n      var _this = this;\n\n      var items;\n\n      var _utils$regularizeUpse = utils.regularizeUpsert(docs, bases, success, error);\n\n      var _utils$regularizeUpse2 = _slicedToArray(_utils$regularizeUpse, 3);\n\n      items = _utils$regularizeUpse2[0];\n      success = _utils$regularizeUpse2[1];\n      error = _utils$regularizeUpse2[2];\n      // Upsert does to both\n      return this.masterCol.upsert(lodash_1.default.map(items, \"doc\"), lodash_1.default.map(items, \"base\"), function () {\n        return _this.replicaCol.upsert(lodash_1.default.map(items, \"doc\"), lodash_1.default.map(items, \"base\"), function (results) {\n          return success(docs);\n        }, error);\n      }, error);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(id, success, error) {\n      var _this2 = this;\n\n      // Do to both\n      this.masterCol.remove(id, function () {\n        _this2.replicaCol.remove(id, success, error);\n      }, error);\n    }\n  }, {\n    key: \"cache\",\n    value: function cache(docs, selector, options, success, error) {\n      var _this3 = this;\n\n      // Calculate what has to be done for cache using the master database which is faster (usually MemoryDb)\n      // then do minimum to both databases\n      // Index docs\n      var sort;\n      var docsMap = lodash_1.default.keyBy(docs, \"_id\"); // Compile sort\n\n      if (options.sort) {\n        sort = (0, selector_1.compileSort)(options.sort);\n      } // Perform query\n\n\n      return this.masterCol.find(selector, options).fetch(function (results) {\n        var result;\n        var resultsMap = lodash_1.default.keyBy(results, \"_id\"); // Determine if each result needs to be cached\n\n        var toCache = [];\n\n        var _iterator = _createForOfIteratorHelper(docs),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var doc = _step.value;\n            result = resultsMap[doc._id]; // Exclude any excluded _ids from being cached/uncached\n\n            if (options && options.exclude && options.exclude.includes(doc._id)) {\n              continue;\n            } // If not present locally, cache it\n\n\n            if (!result) {\n              toCache.push(doc);\n              continue;\n            } // If both have revisions (_rev) and new one is same or lower, do not cache\n\n\n            if (doc._rev && result._rev && doc._rev <= result._rev) {\n              continue;\n            } // Only cache if different\n\n\n            if (!lodash_1.default.isEqual(doc, result)) {\n              toCache.push(doc);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        var toUncache = [];\n\n        var _iterator2 = _createForOfIteratorHelper(results),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            result = _step2.value;\n\n            // If at limit\n            if (options.limit && docs.length === options.limit) {\n              // If past end on sorted limited, ignore\n              if (options.sort && sort(result, lodash_1.default.last(docs)) >= 0) {\n                continue;\n              } // If no sort, ignore\n\n\n              if (!options.sort) {\n                continue;\n              }\n            } // Exclude any excluded _ids from being cached/uncached\n\n\n            if (options && options.exclude && options.exclude.includes(result._id)) {\n              continue;\n            } // Determine which ones to uncache\n\n\n            if (!docsMap[result._id]) {\n              toUncache.push(result._id);\n            }\n          } // Cache ones needing caching\n\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        var performCaches = function performCaches(next) {\n          if (toCache.length > 0) {\n            return _this3.masterCol.cacheList(toCache, function () {\n              return _this3.replicaCol.cacheList(toCache, function () {\n                return next();\n              }, error);\n            }, error);\n          } else {\n            return next();\n          }\n        }; // Uncache list\n\n\n        var performUncaches = function performUncaches(next) {\n          if (toUncache.length > 0) {\n            return _this3.masterCol.uncacheList(toUncache, function () {\n              return _this3.replicaCol.uncacheList(toUncache, function () {\n                return next();\n              }, error);\n            }, error);\n          } else {\n            return next();\n          }\n        };\n\n        return performCaches(function () {\n          return performUncaches(function () {\n            if (success != null) {\n              success();\n            }\n          });\n        });\n      }, error);\n    }\n  }, {\n    key: \"pendingUpserts\",\n    value: function pendingUpserts(success, error) {\n      return this.masterCol.pendingUpserts(success, error);\n    }\n  }, {\n    key: \"pendingRemoves\",\n    value: function pendingRemoves(success, error) {\n      return this.masterCol.pendingRemoves(success, error);\n    }\n  }, {\n    key: \"resolveUpserts\",\n    value: function resolveUpserts(upserts, success, error) {\n      var _this4 = this;\n\n      return this.masterCol.resolveUpserts(upserts, function () {\n        return _this4.replicaCol.resolveUpserts(upserts, success, error);\n      }, error);\n    }\n  }, {\n    key: \"resolveRemove\",\n    value: function resolveRemove(id, success, error) {\n      var _this5 = this;\n\n      return this.masterCol.resolveRemove(id, function () {\n        return _this5.replicaCol.resolveRemove(id, success, error);\n      }, error);\n    } // Add but do not overwrite or record as upsert\n\n  }, {\n    key: \"seed\",\n    value: function seed(docs, success, error) {\n      var _this6 = this;\n\n      return this.masterCol.seed(docs, function () {\n        return _this6.replicaCol.seed(docs, success, error);\n      }, error);\n    } // Add but do not overwrite upserts or removes\n\n  }, {\n    key: \"cacheOne\",\n    value: function cacheOne(doc, success, error) {\n      var _this7 = this;\n\n      return this.masterCol.cacheOne(doc, function () {\n        return _this7.replicaCol.cacheOne(doc, success, error);\n      }, error);\n    } // Add but do not overwrite upserts or removes\n\n  }, {\n    key: \"cacheList\",\n    value: function cacheList(docs, success, error) {\n      var _this8 = this;\n\n      return this.masterCol.cacheList(docs, function () {\n        return _this8.replicaCol.cacheList(docs, success, error);\n      }, error);\n    }\n  }, {\n    key: \"uncache\",\n    value: function uncache(selector, success, error) {\n      var _this9 = this;\n\n      return this.masterCol.uncache(selector, function () {\n        return _this9.replicaCol.uncache(selector, success, error);\n      }, error);\n    }\n  }, {\n    key: \"uncacheList\",\n    value: function uncacheList(ids, success, error) {\n      var _this10 = this;\n\n      return this.masterCol.uncacheList(ids, function () {\n        return _this10.replicaCol.uncacheList(ids, success, error);\n      }, error);\n    }\n  }]);\n\n  return Collection;\n}();","map":null,"metadata":{},"sourceType":"script"}