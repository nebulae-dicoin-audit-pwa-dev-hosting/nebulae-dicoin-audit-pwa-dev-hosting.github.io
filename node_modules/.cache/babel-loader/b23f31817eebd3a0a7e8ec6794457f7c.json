{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeResponse = exports.encodeResponse = exports.encodeRequest = void 0;\n\nvar lodash_1 = __importDefault(require(\"lodash\"));\n\nvar js_sha1_1 = __importDefault(require(\"js-sha1\"));\n\nvar selector_1 = require(\"./selector\");\n/*\n\nQuickfind protocol allows sending information about which rows are already present locally to minimize\nnetwork traffic.\n\nProtocal has 3 phases:\n\nencodeRequest: Done on client. Summarize which rows are already present locally by sharding and then hashing _id:_rev|\nencodeResponse: Done on server. Given complete server list and results of encodeRequest, create list of changes, sharded by first two characters of _id\ndecodeResponse: Done on client. Given encoded response and local list, recreate complete list from server.\n\nInteraction of sort, limit and fields:\n\n- fields present: _rev might be missing. Do not use quickfind\n- limit with no sort: This gives unstable results. Do not use quickfind\n- sort: final rows need to be re-sorted. Since fields not present, is possible.\n- no sort, no limit: always sort by _id\n\n*/\n// Characters to shard by of _id\n\n\nvar shardLength = 2; // Given an array of client rows, create a summary of which rows are present\n\nfunction encodeRequest(clientRows) {\n  // Index by shard\n  clientRows = lodash_1.default.groupBy(clientRows, function (row) {\n    return row._id.substr(0, shardLength);\n  }); // Hash each one\n\n  var request = lodash_1.default.mapValues(clientRows, function (rows) {\n    return hashRows(rows);\n  });\n  return request;\n}\n\nexports.encodeRequest = encodeRequest; // Given an array of rows on the server and an encoded request, create encoded response\n\nfunction encodeResponse(serverRows, encodedRequest) {\n  // Index by shard\n  serverRows = lodash_1.default.groupBy(serverRows, function (row) {\n    return row._id.substr(0, shardLength);\n  }); // Include any that are in encoded request but not present\n\n  for (var key in encodedRequest) {\n    var value = encodedRequest[key];\n\n    if (!serverRows[key]) {\n      serverRows[key] = [];\n    }\n  } // Only keep ones where different from encoded request\n\n\n  var response = lodash_1.default.pickBy(serverRows, function (rows, key) {\n    return hashRows(rows) !== encodedRequest[key];\n  });\n  return response;\n}\n\nexports.encodeResponse = encodeResponse; // Given encoded response and array of client rows, create array of server rows\n\nfunction decodeResponse(encodedResponse, clientRows, sort) {\n  // Index by shard\n  clientRows = lodash_1.default.groupBy(clientRows, function (row) {\n    return row._id.substr(0, shardLength);\n  }); // Overwrite with response\n\n  var serverRows = lodash_1.default.extend(clientRows, encodedResponse); // Flatten\n\n  serverRows = lodash_1.default.flatten(lodash_1.default.values(serverRows)); // Sort\n\n  if (sort) {\n    serverRows.sort((0, selector_1.compileSort)(sort));\n  } else {\n    serverRows = lodash_1.default.sortBy(serverRows, \"_id\");\n  }\n\n  return serverRows;\n}\n\nexports.decodeResponse = decodeResponse;\n\nfunction hashRows(rows) {\n  var hash = js_sha1_1.default.create();\n\n  var _iterator = _createForOfIteratorHelper(lodash_1.default.sortBy(rows, \"_id\")),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var row = _step.value;\n      hash.update(row._id + \":\" + (row._rev || \"\") + \"|\");\n    } // 80 bits is enough for uniqueness\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return hash.hex().substr(0, 20);\n}","map":null,"metadata":{},"sourceType":"script"}