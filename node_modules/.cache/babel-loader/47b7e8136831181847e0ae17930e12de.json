{"ast":null,"code":"/*\n * [js-sha1]{@link https://github.com/emn178/js-sha1}\n *\n * @version 0.6.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var root = typeof window === 'object' ? window : {};\n  var NODE_JS = !root.JS_SHA1_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n\n  if (NODE_JS) {\n    root = global;\n  }\n\n  var COMMON_JS = !root.JS_SHA1_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [-2147483648, 8388608, 32768, 128];\n  var SHIFT = [24, 16, 8, 0];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];\n  var blocks = [];\n\n  var createOutputMethod = function createOutputMethod(outputType) {\n    return function (message) {\n      return new Sha1(true).update(message)[outputType]();\n    };\n  };\n\n  var createMethod = function createMethod() {\n    var method = createOutputMethod('hex');\n\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n\n    method.create = function () {\n      return new Sha1();\n    };\n\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n\n    return method;\n  };\n\n  var nodeWrap = function nodeWrap(method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n\n    var nodeMethod = function nodeMethod(message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('sha1').update(message, 'utf8').digest('hex');\n      } else if (message.constructor === ArrayBuffer) {\n        message = new Uint8Array(message);\n      } else if (message.length === undefined) {\n        return method(message);\n      }\n\n      return crypto.createHash('sha1').update(new Buffer(message)).digest('hex');\n    };\n\n    return nodeMethod;\n  };\n\n  function Sha1(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n    } else {\n      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    this.h0 = 0x67452301;\n    this.h1 = 0xEFCDAB89;\n    this.h2 = 0x98BADCFE;\n    this.h3 = 0x10325476;\n    this.h4 = 0xC3D2E1F0;\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  Sha1.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString = typeof message !== 'string';\n\n    if (notString && message.constructor === root.ArrayBuffer) {\n      message = new Uint8Array(message);\n    }\n\n    var code,\n        index = 0,\n        i,\n        length = message.length || 0,\n        blocks = this.blocks;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = this.block;\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        for (i = this.start; index < length && i < 64; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < 64; ++index) {\n          code = message.charCodeAt(index);\n\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n            blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n          }\n        }\n      }\n\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n\n      if (i >= 64) {\n        this.block = blocks[16];\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n\n    return this;\n  };\n\n  Sha1.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n\n    this.finalized = true;\n    var blocks = this.blocks,\n        i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n\n      blocks[0] = this.block;\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n\n    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\n    blocks[15] = this.bytes << 3;\n    this.hash();\n  };\n\n  Sha1.prototype.hash = function () {\n    var a = this.h0,\n        b = this.h1,\n        c = this.h2,\n        d = this.h3,\n        e = this.h4;\n    var f,\n        j,\n        t,\n        blocks = this.blocks;\n\n    for (j = 16; j < 80; ++j) {\n      t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];\n      blocks[j] = t << 1 | t >>> 31;\n    }\n\n    for (j = 0; j < 20; j += 5) {\n      f = b & c | ~b & d;\n      t = a << 5 | a >>> 27;\n      e = t + f + e + 1518500249 + blocks[j] << 0;\n      b = b << 30 | b >>> 2;\n      f = a & b | ~a & c;\n      t = e << 5 | e >>> 27;\n      d = t + f + d + 1518500249 + blocks[j + 1] << 0;\n      a = a << 30 | a >>> 2;\n      f = e & a | ~e & b;\n      t = d << 5 | d >>> 27;\n      c = t + f + c + 1518500249 + blocks[j + 2] << 0;\n      e = e << 30 | e >>> 2;\n      f = d & e | ~d & a;\n      t = c << 5 | c >>> 27;\n      b = t + f + b + 1518500249 + blocks[j + 3] << 0;\n      d = d << 30 | d >>> 2;\n      f = c & d | ~c & e;\n      t = b << 5 | b >>> 27;\n      a = t + f + a + 1518500249 + blocks[j + 4] << 0;\n      c = c << 30 | c >>> 2;\n    }\n\n    for (; j < 40; j += 5) {\n      f = b ^ c ^ d;\n      t = a << 5 | a >>> 27;\n      e = t + f + e + 1859775393 + blocks[j] << 0;\n      b = b << 30 | b >>> 2;\n      f = a ^ b ^ c;\n      t = e << 5 | e >>> 27;\n      d = t + f + d + 1859775393 + blocks[j + 1] << 0;\n      a = a << 30 | a >>> 2;\n      f = e ^ a ^ b;\n      t = d << 5 | d >>> 27;\n      c = t + f + c + 1859775393 + blocks[j + 2] << 0;\n      e = e << 30 | e >>> 2;\n      f = d ^ e ^ a;\n      t = c << 5 | c >>> 27;\n      b = t + f + b + 1859775393 + blocks[j + 3] << 0;\n      d = d << 30 | d >>> 2;\n      f = c ^ d ^ e;\n      t = b << 5 | b >>> 27;\n      a = t + f + a + 1859775393 + blocks[j + 4] << 0;\n      c = c << 30 | c >>> 2;\n    }\n\n    for (; j < 60; j += 5) {\n      f = b & c | b & d | c & d;\n      t = a << 5 | a >>> 27;\n      e = t + f + e - 1894007588 + blocks[j] << 0;\n      b = b << 30 | b >>> 2;\n      f = a & b | a & c | b & c;\n      t = e << 5 | e >>> 27;\n      d = t + f + d - 1894007588 + blocks[j + 1] << 0;\n      a = a << 30 | a >>> 2;\n      f = e & a | e & b | a & b;\n      t = d << 5 | d >>> 27;\n      c = t + f + c - 1894007588 + blocks[j + 2] << 0;\n      e = e << 30 | e >>> 2;\n      f = d & e | d & a | e & a;\n      t = c << 5 | c >>> 27;\n      b = t + f + b - 1894007588 + blocks[j + 3] << 0;\n      d = d << 30 | d >>> 2;\n      f = c & d | c & e | d & e;\n      t = b << 5 | b >>> 27;\n      a = t + f + a - 1894007588 + blocks[j + 4] << 0;\n      c = c << 30 | c >>> 2;\n    }\n\n    for (; j < 80; j += 5) {\n      f = b ^ c ^ d;\n      t = a << 5 | a >>> 27;\n      e = t + f + e - 899497514 + blocks[j] << 0;\n      b = b << 30 | b >>> 2;\n      f = a ^ b ^ c;\n      t = e << 5 | e >>> 27;\n      d = t + f + d - 899497514 + blocks[j + 1] << 0;\n      a = a << 30 | a >>> 2;\n      f = e ^ a ^ b;\n      t = d << 5 | d >>> 27;\n      c = t + f + c - 899497514 + blocks[j + 2] << 0;\n      e = e << 30 | e >>> 2;\n      f = d ^ e ^ a;\n      t = c << 5 | c >>> 27;\n      b = t + f + b - 899497514 + blocks[j + 3] << 0;\n      d = d << 30 | d >>> 2;\n      f = c ^ d ^ e;\n      t = b << 5 | b >>> 27;\n      a = t + f + a - 899497514 + blocks[j + 4] << 0;\n      c = c << 30 | c >>> 2;\n    }\n\n    this.h0 = this.h0 + a << 0;\n    this.h1 = this.h1 + b << 0;\n    this.h2 = this.h2 + c << 0;\n    this.h3 = this.h3 + d << 0;\n    this.h4 = this.h4 + e << 0;\n  };\n\n  Sha1.prototype.hex = function () {\n    this.finalize();\n    var h0 = this.h0,\n        h1 = this.h1,\n        h2 = this.h2,\n        h3 = this.h3,\n        h4 = this.h4;\n    return HEX_CHARS[h0 >> 28 & 0x0F] + HEX_CHARS[h0 >> 24 & 0x0F] + HEX_CHARS[h0 >> 20 & 0x0F] + HEX_CHARS[h0 >> 16 & 0x0F] + HEX_CHARS[h0 >> 12 & 0x0F] + HEX_CHARS[h0 >> 8 & 0x0F] + HEX_CHARS[h0 >> 4 & 0x0F] + HEX_CHARS[h0 & 0x0F] + HEX_CHARS[h1 >> 28 & 0x0F] + HEX_CHARS[h1 >> 24 & 0x0F] + HEX_CHARS[h1 >> 20 & 0x0F] + HEX_CHARS[h1 >> 16 & 0x0F] + HEX_CHARS[h1 >> 12 & 0x0F] + HEX_CHARS[h1 >> 8 & 0x0F] + HEX_CHARS[h1 >> 4 & 0x0F] + HEX_CHARS[h1 & 0x0F] + HEX_CHARS[h2 >> 28 & 0x0F] + HEX_CHARS[h2 >> 24 & 0x0F] + HEX_CHARS[h2 >> 20 & 0x0F] + HEX_CHARS[h2 >> 16 & 0x0F] + HEX_CHARS[h2 >> 12 & 0x0F] + HEX_CHARS[h2 >> 8 & 0x0F] + HEX_CHARS[h2 >> 4 & 0x0F] + HEX_CHARS[h2 & 0x0F] + HEX_CHARS[h3 >> 28 & 0x0F] + HEX_CHARS[h3 >> 24 & 0x0F] + HEX_CHARS[h3 >> 20 & 0x0F] + HEX_CHARS[h3 >> 16 & 0x0F] + HEX_CHARS[h3 >> 12 & 0x0F] + HEX_CHARS[h3 >> 8 & 0x0F] + HEX_CHARS[h3 >> 4 & 0x0F] + HEX_CHARS[h3 & 0x0F] + HEX_CHARS[h4 >> 28 & 0x0F] + HEX_CHARS[h4 >> 24 & 0x0F] + HEX_CHARS[h4 >> 20 & 0x0F] + HEX_CHARS[h4 >> 16 & 0x0F] + HEX_CHARS[h4 >> 12 & 0x0F] + HEX_CHARS[h4 >> 8 & 0x0F] + HEX_CHARS[h4 >> 4 & 0x0F] + HEX_CHARS[h4 & 0x0F];\n  };\n\n  Sha1.prototype.toString = Sha1.prototype.hex;\n\n  Sha1.prototype.digest = function () {\n    this.finalize();\n    var h0 = this.h0,\n        h1 = this.h1,\n        h2 = this.h2,\n        h3 = this.h3,\n        h4 = this.h4;\n    return [h0 >> 24 & 0xFF, h0 >> 16 & 0xFF, h0 >> 8 & 0xFF, h0 & 0xFF, h1 >> 24 & 0xFF, h1 >> 16 & 0xFF, h1 >> 8 & 0xFF, h1 & 0xFF, h2 >> 24 & 0xFF, h2 >> 16 & 0xFF, h2 >> 8 & 0xFF, h2 & 0xFF, h3 >> 24 & 0xFF, h3 >> 16 & 0xFF, h3 >> 8 & 0xFF, h3 & 0xFF, h4 >> 24 & 0xFF, h4 >> 16 & 0xFF, h4 >> 8 & 0xFF, h4 & 0xFF];\n  };\n\n  Sha1.prototype.array = Sha1.prototype.digest;\n\n  Sha1.prototype.arrayBuffer = function () {\n    this.finalize();\n    var buffer = new ArrayBuffer(20);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    return buffer;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    root.sha1 = exports;\n\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}