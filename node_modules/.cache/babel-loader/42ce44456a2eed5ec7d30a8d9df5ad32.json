{"ast":null,"code":"import { useState, useEffect, useRef } from 'react';\n\nconst useNavigatorPermissions = (name, configuration) => {\n  const [error, setError] = useState(false);\n  const [permitted, setPermitted] = useState('');\n  const permissionstatus = useRef(undefined);\n  useEffect(() => {\n    const t = Date.now();\n\n    if (window && window.navigator && window.navigator.permissions && !permissionstatus.current) {\n      window.navigator.permissions.query({\n        name,\n        ...configuration\n      }).then(status => {\n        status.onchange = function () {\n          setPermitted(status.state);\n          permissionstatus.current = status;\n        };\n      });\n    } else {\n      setError(true);\n    }\n\n    return () => {\n      if (permissionstatus.current) permissionstatus.current.onchange = undefined;\n    };\n  }, [name, configuration]);\n  return {\n    status: permitted,\n    error\n  };\n};\n\nexport default useNavigatorPermissions;","map":{"version":3,"sources":["/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/src/app/main/travels/tools/useGeolocation/NavigatorPermissions.js"],"names":["useState","useEffect","useRef","useNavigatorPermissions","name","configuration","error","setError","permitted","setPermitted","permissionstatus","undefined","t","Date","now","window","navigator","permissions","current","query","then","status","onchange","state"],"mappings":"AACA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;;AAEA,MAAMC,uBAAuB,GAAG,CAACC,IAAD,EAAOC,aAAP,KAAyB;AACrD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAMU,gBAAgB,GAAGR,MAAM,CAACS,SAAD,CAA/B;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,CAAC,GAAGC,IAAI,CAACC,GAAL,EAAV;;AACA,QAAIC,MAAM,IAAIA,MAAM,CAACC,SAAjB,IAA8BD,MAAM,CAACC,SAAP,CAAiBC,WAA/C,IAA8D,CAACP,gBAAgB,CAACQ,OAApF,EAA6F;AAEzFH,MAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CACKE,KADL,CACW;AAAEf,QAAAA,IAAF;AAAQ,WAAGC;AAAX,OADX,EAEKe,IAFL,CAEUC,MAAM,IAAI;AACZA,QAAAA,MAAM,CAACC,QAAP,GAAkB,YAAY;AAC1Bb,UAAAA,YAAY,CAACY,MAAM,CAACE,KAAR,CAAZ;AACAb,UAAAA,gBAAgB,CAACQ,OAAjB,GAA2BG,MAA3B;AACH,SAHD;AAIH,OAPL;AAQH,KAVD,MAUO;AACHd,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AAED,WAAO,MAAM;AACT,UAAIG,gBAAgB,CAACQ,OAArB,EACIR,gBAAgB,CAACQ,OAAjB,CAAyBI,QAAzB,GAAoCX,SAApC;AACP,KAHD;AAIH,GApBQ,EAoBN,CAACP,IAAD,EAAOC,aAAP,CApBM,CAAT;AAsBA,SAAO;AAAEgB,IAAAA,MAAM,EAAEb,SAAV;AAAqBF,IAAAA;AAArB,GAAP;AACH,CA5BD;;AA8BA,eAAeH,uBAAf","sourcesContent":["\nimport { useState, useEffect, useRef } from 'react';\n\nconst useNavigatorPermissions = (name, configuration) => {\n    const [error, setError] = useState(false);\n    const [permitted, setPermitted] = useState('');\n    const permissionstatus = useRef(undefined);\n\n    useEffect(() => {\n        const t = Date.now();\n        if (window && window.navigator && window.navigator.permissions && !permissionstatus.current) {\n\n            window.navigator.permissions\n                .query({ name, ...configuration })\n                .then(status => {\n                    status.onchange = function () {\n                        setPermitted(status.state);\n                        permissionstatus.current = status;\n                    };\n                });\n        } else {\n            setError(true);\n        }\n\n        return () => {\n            if (permissionstatus.current)\n                permissionstatus.current.onchange = undefined;\n        };\n    }, [name, configuration]);\n\n    return { status: permitted, error };\n};\n\nexport default useNavigatorPermissions;\n"]},"metadata":{},"sourceType":"module"}