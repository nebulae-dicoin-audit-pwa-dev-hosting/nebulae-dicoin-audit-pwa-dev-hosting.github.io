{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport { setUserData } from './userSlice';\nexport const submitLogin = _ref => {\n  let {\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    return jwtService.signInWithEmailAndPassword(email, password).then(user => {\n      dispatch(setUserData(user));\n      return dispatch(loginSuccess());\n    }).catch(errors => {\n      return dispatch(loginError(errors));\n    });\n  };\n};\nexport const submitLoginWithFireBase = _ref2 => {\n  let {\n    email,\n    password\n  } = _ref2;\n  return async dispatch => {\n    if (!firebaseService.auth) {\n      console.warn(\"Firebase Service didn't initialize, check your configuration\");\n      return () => false;\n    }\n\n    return firebaseService.auth.signInWithEmailAndPassword(email, password).then(() => {\n      return dispatch(loginSuccess());\n    }).catch(error => {\n      const emailErrorCodes = ['auth/email-already-in-use', 'auth/invalid-email', 'auth/operation-not-allowed', 'auth/user-not-found', 'auth/user-disabled'];\n      const passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n      const response = [];\n\n      if (emailErrorCodes.includes(error.code)) {\n        response.push({\n          type: 'email',\n          message: error.message\n        });\n      }\n\n      if (passwordErrorCodes.includes(error.code)) {\n        response.push({\n          type: 'password',\n          message: error.message\n        });\n      }\n\n      if (error.code === 'auth/invalid-api-key') {\n        dispatch(showMessage({\n          message: error.message\n        }));\n      }\n\n      return dispatch(loginError(response));\n    });\n  };\n};\nconst initialState = {\n  success: false,\n  errors: []\n};\nconst loginSlice = createSlice({\n  name: 'auth/login',\n  initialState,\n  reducers: {\n    loginSuccess: (state, action) => {\n      state.success = true;\n      state.errors = [];\n    },\n    loginError: (state, action) => {\n      state.success = false;\n      state.errors = action.payload;\n    }\n  },\n  extraReducers: {}\n});\nexport const {\n  loginSuccess,\n  loginError\n} = loginSlice.actions;\nexport default loginSlice.reducer;","map":{"version":3,"sources":["/Users/sebastianmolano/NebulaE/Projects/GTPC/dicon-audit-pwa/frontend/dicon-audit-pwa/src/app/auth/store/loginSlice.js"],"names":["createSlice","showMessage","firebaseService","jwtService","setUserData","submitLogin","email","password","dispatch","signInWithEmailAndPassword","then","user","loginSuccess","catch","errors","loginError","submitLoginWithFireBase","auth","console","warn","error","emailErrorCodes","passwordErrorCodes","response","includes","code","push","type","message","initialState","success","loginSlice","name","reducers","state","action","payload","extraReducers","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAO,MAAMC,WAAW,GACtB;AAAA,MAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD;AAAA,SACA,MAAOC,QAAP,IAAoB;AAClB,WAAOL,UAAU,CACdM,0BADI,CACuBH,KADvB,EAC8BC,QAD9B,EAEJG,IAFI,CAEEC,IAAD,IAAU;AACdH,MAAAA,QAAQ,CAACJ,WAAW,CAACO,IAAD,CAAZ,CAAR;AAEA,aAAOH,QAAQ,CAACI,YAAY,EAAb,CAAf;AACD,KANI,EAOJC,KAPI,CAOGC,MAAD,IAAY;AACjB,aAAON,QAAQ,CAACO,UAAU,CAACD,MAAD,CAAX,CAAf;AACD,KATI,CAAP;AAUD,GAZD;AAAA,CADK;AAeP,OAAO,MAAME,uBAAuB,GAClC;AAAA,MAAC;AAAEV,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD;AAAA,SACA,MAAOC,QAAP,IAAoB;AAClB,QAAI,CAACN,eAAe,CAACe,IAArB,EAA2B;AACzBC,MAAAA,OAAO,CAACC,IAAR,CAAa,8DAAb;AAEA,aAAO,MAAM,KAAb;AACD;;AACD,WAAOjB,eAAe,CAACe,IAAhB,CACJR,0BADI,CACuBH,KADvB,EAC8BC,QAD9B,EAEJG,IAFI,CAEC,MAAM;AACV,aAAOF,QAAQ,CAACI,YAAY,EAAb,CAAf;AACD,KAJI,EAKJC,KALI,CAKGO,KAAD,IAAW;AAChB,YAAMC,eAAe,GAAG,CACtB,2BADsB,EAEtB,oBAFsB,EAGtB,4BAHsB,EAItB,qBAJsB,EAKtB,oBALsB,CAAxB;AAOA,YAAMC,kBAAkB,GAAG,CAAC,oBAAD,EAAuB,qBAAvB,CAA3B;AACA,YAAMC,QAAQ,GAAG,EAAjB;;AAEA,UAAIF,eAAe,CAACG,QAAhB,CAAyBJ,KAAK,CAACK,IAA/B,CAAJ,EAA0C;AACxCF,QAAAA,QAAQ,CAACG,IAAT,CAAc;AACZC,UAAAA,IAAI,EAAE,OADM;AAEZC,UAAAA,OAAO,EAAER,KAAK,CAACQ;AAFH,SAAd;AAID;;AAED,UAAIN,kBAAkB,CAACE,QAAnB,CAA4BJ,KAAK,CAACK,IAAlC,CAAJ,EAA6C;AAC3CF,QAAAA,QAAQ,CAACG,IAAT,CAAc;AACZC,UAAAA,IAAI,EAAE,UADM;AAEZC,UAAAA,OAAO,EAAER,KAAK,CAACQ;AAFH,SAAd;AAID;;AAED,UAAIR,KAAK,CAACK,IAAN,KAAe,sBAAnB,EAA2C;AACzCjB,QAAAA,QAAQ,CAACP,WAAW,CAAC;AAAE2B,UAAAA,OAAO,EAAER,KAAK,CAACQ;AAAjB,SAAD,CAAZ,CAAR;AACD;;AAED,aAAOpB,QAAQ,CAACO,UAAU,CAACQ,QAAD,CAAX,CAAf;AACD,KAnCI,CAAP;AAoCD,GA3CD;AAAA,CADK;AA8CP,MAAMM,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBhB,EAAAA,MAAM,EAAE;AAFW,CAArB;AAKA,MAAMiB,UAAU,GAAG/B,WAAW,CAAC;AAC7BgC,EAAAA,IAAI,EAAE,YADuB;AAE7BH,EAAAA,YAF6B;AAG7BI,EAAAA,QAAQ,EAAE;AACRrB,IAAAA,YAAY,EAAE,CAACsB,KAAD,EAAQC,MAAR,KAAmB;AAC/BD,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACAI,MAAAA,KAAK,CAACpB,MAAN,GAAe,EAAf;AACD,KAJO;AAKRC,IAAAA,UAAU,EAAE,CAACmB,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACAI,MAAAA,KAAK,CAACpB,MAAN,GAAeqB,MAAM,CAACC,OAAtB;AACD;AARO,GAHmB;AAa7BC,EAAAA,aAAa,EAAE;AAbc,CAAD,CAA9B;AAgBA,OAAO,MAAM;AAAEzB,EAAAA,YAAF;AAAgBG,EAAAA;AAAhB,IAA+BgB,UAAU,CAACO,OAAhD;AAEP,eAAeP,UAAU,CAACQ,OAA1B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport { setUserData } from './userSlice';\n\nexport const submitLogin =\n  ({ email, password }) =>\n  async (dispatch) => {\n    return jwtService\n      .signInWithEmailAndPassword(email, password)\n      .then((user) => {\n        dispatch(setUserData(user));\n\n        return dispatch(loginSuccess());\n      })\n      .catch((errors) => {\n        return dispatch(loginError(errors));\n      });\n  };\n\nexport const submitLoginWithFireBase =\n  ({ email, password }) =>\n  async (dispatch) => {\n    if (!firebaseService.auth) {\n      console.warn(\"Firebase Service didn't initialize, check your configuration\");\n\n      return () => false;\n    }\n    return firebaseService.auth\n      .signInWithEmailAndPassword(email, password)\n      .then(() => {\n        return dispatch(loginSuccess());\n      })\n      .catch((error) => {\n        const emailErrorCodes = [\n          'auth/email-already-in-use',\n          'auth/invalid-email',\n          'auth/operation-not-allowed',\n          'auth/user-not-found',\n          'auth/user-disabled',\n        ];\n        const passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n        const response = [];\n\n        if (emailErrorCodes.includes(error.code)) {\n          response.push({\n            type: 'email',\n            message: error.message,\n          });\n        }\n\n        if (passwordErrorCodes.includes(error.code)) {\n          response.push({\n            type: 'password',\n            message: error.message,\n          });\n        }\n\n        if (error.code === 'auth/invalid-api-key') {\n          dispatch(showMessage({ message: error.message }));\n        }\n\n        return dispatch(loginError(response));\n      });\n  };\n\nconst initialState = {\n  success: false,\n  errors: [],\n};\n\nconst loginSlice = createSlice({\n  name: 'auth/login',\n  initialState,\n  reducers: {\n    loginSuccess: (state, action) => {\n      state.success = true;\n      state.errors = [];\n    },\n    loginError: (state, action) => {\n      state.success = false;\n      state.errors = action.payload;\n    },\n  },\n  extraReducers: {},\n});\n\nexport const { loginSuccess, loginError } = loginSlice.actions;\n\nexport default loginSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}